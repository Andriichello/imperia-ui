/* tslint:disable */
/* eslint-disable */
/**
 * imperia-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IndexCategoryResponse,
  ShowCategoryResponse,
  UnauthenticatedResponse,
} from '../models';
import {
    IndexCategoryResponseFromJSON,
    IndexCategoryResponseToJSON,
    ShowCategoryResponseFromJSON,
    ShowCategoryResponseToJSON,
    UnauthenticatedResponseFromJSON,
    UnauthenticatedResponseToJSON,
} from '../models';

export interface IndexCategoriesRequest {
    include?: string;
    pageSize?: number;
    pageNumber?: number;
    sort?: string;
    filterRestaurants?: string;
    filterTags?: string;
    filterTarget?: string;
}

export interface ShowCategoryRequest {
    id: number;
    include?: string;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * Index categories.
     */
    async indexCategoriesRaw(requestParameters: IndexCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexCategoryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterRestaurants !== undefined) {
            queryParameters['filter[restaurants]'] = requestParameters.filterRestaurants;
        }

        if (requestParameters.filterTags !== undefined) {
            queryParameters['filter[tags]'] = requestParameters.filterTags;
        }

        if (requestParameters.filterTarget !== undefined) {
            queryParameters['filter[target]'] = requestParameters.filterTarget;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Index categories.
     */
    async indexCategories(requestParameters: IndexCategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexCategoryResponse> {
        const response = await this.indexCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show category by id.
     */
    async showCategoryRaw(requestParameters: ShowCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Show category by id.
     */
    async showCategory(requestParameters: ShowCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowCategoryResponse> {
        const response = await this.showCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
