/* tslint:disable */
/* eslint-disable */
/**
 * imperia-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Restaurant } from './Restaurant';
import {
    RestaurantFromJSON,
    RestaurantFromJSONTyped,
    RestaurantToJSON,
} from './Restaurant';

/**
 * Tip resource object
 * @export
 * @interface Tip
 */
export interface Tip {
    /**
     * 
     * @type {number}
     * @memberof Tip
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Tip
     */
    restaurantId: number | null;
    /**
     * 
     * @type {string}
     * @memberof Tip
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof Tip
     */
    amount: number;
    /**
     * 
     * @type {number}
     * @memberof Tip
     */
    commission: number | null;
    /**
     * 
     * @type {string}
     * @memberof Tip
     */
    about: string | null;
    /**
     * 
     * @type {Restaurant}
     * @memberof Tip
     */
    restaurant?: Restaurant;
}

/**
 * Check if a given object implements the Tip interface.
 */
export function instanceOfTip(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "restaurantId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "commission" in value;
    isInstance = isInstance && "about" in value;

    return isInstance;
}

export function TipFromJSON(json: any): Tip {
    return TipFromJSONTyped(json, false);
}

export function TipFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tip {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'restaurantId': json['restaurant_id'],
        'type': json['type'],
        'amount': json['amount'],
        'commission': json['commission'],
        'about': json['about'],
        'restaurant': !exists(json, 'restaurant') ? undefined : RestaurantFromJSON(json['restaurant']),
    };
}

export function TipToJSON(value?: Tip | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'restaurant_id': value.restaurantId,
        'type': value.type,
        'amount': value.amount,
        'commission': value.commission,
        'about': value.about,
        'restaurant': RestaurantToJSON(value.restaurant),
    };
}

