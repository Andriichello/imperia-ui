/* tslint:disable */
/* eslint-disable */
/**
 * imperia-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Category } from './Category';
import {
    CategoryFromJSON,
    CategoryFromJSONTyped,
    CategoryToJSON,
} from './Category';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
} from './Media';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
} from './Product';

/**
 * Menu resource object
 * @export
 * @interface Menu
 */
export interface Menu {
    /**
     * 
     * @type {number}
     * @memberof Menu
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof Menu
     */
    archived: boolean;
    /**
     * 
     * @type {number}
     * @memberof Menu
     */
    popularity: number | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof Menu
     */
    products?: Array<Product>;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Menu
     */
    categories: Array<Category>;
    /**
     * 
     * @type {Array<Media>}
     * @memberof Menu
     */
    media: Array<Media>;
}

/**
 * Check if a given object implements the Menu interface.
 */
export function instanceOfMenu(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "archived" in value;
    isInstance = isInstance && "popularity" in value;
    isInstance = isInstance && "categories" in value;
    isInstance = isInstance && "media" in value;

    return isInstance;
}

export function MenuFromJSON(json: any): Menu {
    return MenuFromJSONTyped(json, false);
}

export function MenuFromJSONTyped(json: any, ignoreDiscriminator: boolean): Menu {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'title': json['title'],
        'description': json['description'],
        'archived': json['archived'],
        'popularity': json['popularity'],
        'products': !exists(json, 'products') ? undefined : ((json['products'] as Array<any>).map(ProductFromJSON)),
        'categories': ((json['categories'] as Array<any>).map(CategoryFromJSON)),
        'media': ((json['media'] as Array<any>).map(MediaFromJSON)),
    };
}

export function MenuToJSON(value?: Menu | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'title': value.title,
        'description': value.description,
        'archived': value.archived,
        'popularity': value.popularity,
        'products': value.products === undefined ? undefined : ((value.products as Array<any>).map(ProductToJSON)),
        'categories': ((value.categories as Array<any>).map(CategoryToJSON)),
        'media': ((value.media as Array<any>).map(MediaToJSON)),
    };
}

