/* tslint:disable */
/* eslint-disable */
/**
 * imperia-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Notification resource object
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    channel: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    body: string | null;
    /**
     * 
     * @type {object}
     * @memberof Notification
     */
    payload: object | null;
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    senderId: number | null;
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    receiverId: number;
    /**
     * 
     * @type {Date}
     * @memberof Notification
     */
    sendAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Notification
     */
    sentAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Notification
     */
    seenAt: Date | null;
}

/**
 * Check if a given object implements the Notification interface.
 */
export function instanceOfNotification(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "channel" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "body" in value;
    isInstance = isInstance && "payload" in value;
    isInstance = isInstance && "senderId" in value;
    isInstance = isInstance && "receiverId" in value;
    isInstance = isInstance && "sendAt" in value;
    isInstance = isInstance && "sentAt" in value;
    isInstance = isInstance && "seenAt" in value;

    return isInstance;
}

export function NotificationFromJSON(json: any): Notification {
    return NotificationFromJSONTyped(json, false);
}

export function NotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Notification {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'channel': json['channel'],
        'subject': json['subject'],
        'body': json['body'],
        'payload': json['payload'],
        'senderId': json['sender_id'],
        'receiverId': json['receiver_id'],
        'sendAt': (new Date(json['send_at'])),
        'sentAt': (json['sent_at'] === null ? null : new Date(json['sent_at'])),
        'seenAt': (json['seen_at'] === null ? null : new Date(json['seen_at'])),
    };
}

export function NotificationToJSON(value?: Notification | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'channel': value.channel,
        'subject': value.subject,
        'body': value.body,
        'payload': value.payload,
        'sender_id': value.senderId,
        'receiver_id': value.receiverId,
        'send_at': (value.sendAt.toISOString()),
        'sent_at': (value.sentAt === null ? null : value.sentAt.toISOString()),
        'seen_at': (value.seenAt === null ? null : value.seenAt.toISOString()),
    };
}

