/* tslint:disable */
/* eslint-disable */
/**
 * imperia-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Store notification request
 * @export
 * @interface StoreNotificationRequest
 */
export interface StoreNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof StoreNotificationRequest
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof StoreNotificationRequest
     */
    body: string;
    /**
     * 
     * @type {object}
     * @memberof StoreNotificationRequest
     */
    payload: object | null;
    /**
     * 
     * @type {number}
     * @memberof StoreNotificationRequest
     */
    receiverId: number;
    /**
     * 
     * @type {string}
     * @memberof StoreNotificationRequest
     */
    channel?: StoreNotificationRequestChannelEnum;
    /**
     * Date and time when notification should be sent. Only future values are acceptable.
     * @type {Date}
     * @memberof StoreNotificationRequest
     */
    sendAt?: Date;
}


/**
 * @export
 */
export const StoreNotificationRequestChannelEnum = {
    Default: 'default'
} as const;
export type StoreNotificationRequestChannelEnum = typeof StoreNotificationRequestChannelEnum[keyof typeof StoreNotificationRequestChannelEnum];


/**
 * Check if a given object implements the StoreNotificationRequest interface.
 */
export function instanceOfStoreNotificationRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "body" in value;
    isInstance = isInstance && "payload" in value;
    isInstance = isInstance && "receiverId" in value;

    return isInstance;
}

export function StoreNotificationRequestFromJSON(json: any): StoreNotificationRequest {
    return StoreNotificationRequestFromJSONTyped(json, false);
}

export function StoreNotificationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreNotificationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': json['subject'],
        'body': json['body'],
        'payload': json['payload'],
        'receiverId': json['receiver_id'],
        'channel': !exists(json, 'channel') ? undefined : json['channel'],
        'sendAt': !exists(json, 'send_at') ? undefined : (new Date(json['send_at'])),
    };
}

export function StoreNotificationRequestToJSON(value?: StoreNotificationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': value.subject,
        'body': value.body,
        'payload': value.payload,
        'receiver_id': value.receiverId,
        'channel': value.channel,
        'send_at': value.sendAt === undefined ? undefined : (value.sendAt.toISOString()),
    };
}

