/* tslint:disable */
/* eslint-disable */
/**
 * imperia-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { AttachingComment } from "./AttachingComment";
import {
  AttachingCommentFromJSON,
  AttachingCommentFromJSONTyped,
  AttachingCommentToJSON,
} from "./AttachingComment";
import type { AttachingDiscount } from "./AttachingDiscount";
import {
  AttachingDiscountFromJSON,
  AttachingDiscountFromJSONTyped,
  AttachingDiscountToJSON,
} from "./AttachingDiscount";

/**
 * Store banquet request
 * @export
 * @interface StoreBanquetRequest
 */
export interface StoreBanquetRequest {
  /**
   *
   * @type {string}
   * @memberof StoreBanquetRequest
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof StoreBanquetRequest
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof StoreBanquetRequest
   */
  state: StoreBanquetRequestStateEnum;
  /**
   * Id of the user, who created banquet.
   * @type {number}
   * @memberof StoreBanquetRequest
   */
  creatorId?: number;
  /**
   *
   * @type {number}
   * @memberof StoreBanquetRequest
   */
  customerId: number;
  /**
   *
   * @type {number}
   * @memberof StoreBanquetRequest
   */
  restaurantId?: number | null;
  /**
   *
   * @type {number}
   * @memberof StoreBanquetRequest
   */
  advanceAmount?: number;
  /**
   * Date and time of when banquet should start.
   * @type {Date}
   * @memberof StoreBanquetRequest
   */
  startAt: Date;
  /**
   * Date and time of when banquet should end. Must be after or equal to `start_at`.
   * @type {Date}
   * @memberof StoreBanquetRequest
   */
  endAt: Date;
  /**
   * Date and time of when banquet was fully paid for.
   * @type {Date}
   * @memberof StoreBanquetRequest
   */
  paidAt?: Date | null;
  /**
   *
   * @type {Array<AttachingComment>}
   * @memberof StoreBanquetRequest
   */
  comments?: Array<AttachingComment>;
  /**
   *
   * @type {Array<AttachingDiscount>}
   * @memberof StoreBanquetRequest
   */
  discounts?: Array<AttachingDiscount>;
}

/**
 * @export
 */
export const StoreBanquetRequestStateEnum = {
  Draft: "draft",
  New: "new",
} as const;
export type StoreBanquetRequestStateEnum =
  typeof StoreBanquetRequestStateEnum[keyof typeof StoreBanquetRequestStateEnum];

/**
 * Check if a given object implements the StoreBanquetRequest interface.
 */
export function instanceOfStoreBanquetRequest(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "title" in value;
  isInstance = isInstance && "description" in value;
  isInstance = isInstance && "state" in value;
  isInstance = isInstance && "customerId" in value;
  isInstance = isInstance && "startAt" in value;
  isInstance = isInstance && "endAt" in value;

  return isInstance;
}

export function StoreBanquetRequestFromJSON(json: any): StoreBanquetRequest {
  return StoreBanquetRequestFromJSONTyped(json, false);
}

export function StoreBanquetRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): StoreBanquetRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    title: json["title"],
    description: json["description"],
    state: json["state"],
    creatorId: !exists(json, "creator_id") ? undefined : json["creator_id"],
    customerId: json["customer_id"],
    restaurantId: !exists(json, "restaurant_id")
      ? undefined
      : json["restaurant_id"],
    advanceAmount: !exists(json, "advance_amount")
      ? undefined
      : json["advance_amount"],
    startAt: new Date(json["start_at"]),
    endAt: new Date(json["end_at"]),
    paidAt: !exists(json, "paid_at")
      ? undefined
      : json["paid_at"] === null
      ? null
      : new Date(json["paid_at"]),
    comments: !exists(json, "comments")
      ? undefined
      : (json["comments"] as Array<any>).map(AttachingCommentFromJSON),
    discounts: !exists(json, "discounts")
      ? undefined
      : (json["discounts"] as Array<any>).map(AttachingDiscountFromJSON),
  };
}

export function StoreBanquetRequestToJSON(
  value?: StoreBanquetRequest | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    description: value.description,
    state: value.state,
    creator_id: value.creatorId,
    customer_id: value.customerId,
    restaurant_id: value.restaurantId,
    advance_amount: value.advanceAmount,
    start_at: value.startAt.toISOString(),
    end_at: value.endAt.toISOString(),
    paid_at:
      value.paidAt === undefined
        ? undefined
        : value.paidAt === null
        ? null
        : value.paidAt.toISOString(),
    comments:
      value.comments === undefined
        ? undefined
        : (value.comments as Array<any>).map(AttachingCommentToJSON),
    discounts:
      value.discounts === undefined
        ? undefined
        : (value.discounts as Array<any>).map(AttachingDiscountToJSON),
  };
}
