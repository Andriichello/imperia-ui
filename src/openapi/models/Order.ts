/* tslint:disable */
/* eslint-disable */
/**
 * imperia-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
} from './Comment';
import type { Discount } from './Discount';
import {
    DiscountFromJSON,
    DiscountFromJSONTyped,
    DiscountToJSON,
} from './Discount';
import type { OrderTotals } from './OrderTotals';
import {
    OrderTotalsFromJSON,
    OrderTotalsFromJSONTyped,
    OrderTotalsToJSON,
} from './OrderTotals';
import type { ProductOrderField } from './ProductOrderField';
import {
    ProductOrderFieldFromJSON,
    ProductOrderFieldFromJSONTyped,
    ProductOrderFieldToJSON,
} from './ProductOrderField';
import type { ServiceOrderField } from './ServiceOrderField';
import {
    ServiceOrderFieldFromJSON,
    ServiceOrderFieldFromJSONTyped,
    ServiceOrderFieldToJSON,
} from './ServiceOrderField';
import type { SpaceOrderField } from './SpaceOrderField';
import {
    SpaceOrderFieldFromJSON,
    SpaceOrderFieldFromJSONTyped,
    SpaceOrderFieldToJSON,
} from './SpaceOrderField';
import type { TicketOrderField } from './TicketOrderField';
import {
    TicketOrderFieldFromJSON,
    TicketOrderFieldFromJSONTyped,
    TicketOrderFieldToJSON,
} from './TicketOrderField';

/**
 * Order resource object
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    type: string;
    /**
     * 
     * @type {OrderTotals}
     * @memberof Order
     */
    totals: OrderTotals;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    banquetId: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    invoiceUrl?: string | null;
    /**
     * 
     * @type {Array<SpaceOrderField>}
     * @memberof Order
     */
    spaces?: Array<SpaceOrderField>;
    /**
     * 
     * @type {Array<TicketOrderField>}
     * @memberof Order
     */
    tickets?: Array<TicketOrderField>;
    /**
     * 
     * @type {Array<ProductOrderField>}
     * @memberof Order
     */
    products?: Array<ProductOrderField>;
    /**
     * 
     * @type {Array<ServiceOrderField>}
     * @memberof Order
     */
    services?: Array<ServiceOrderField>;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof Order
     */
    comments?: Array<Comment>;
    /**
     * 
     * @type {Array<Discount>}
     * @memberof Order
     */
    discounts?: Array<Discount>;
}

/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "totals" in value;
    isInstance = isInstance && "banquetId" in value;

    return isInstance;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'totals': OrderTotalsFromJSON(json['totals']),
        'banquetId': json['banquet_id'],
        'invoiceUrl': !exists(json, 'invoice_url') ? undefined : json['invoice_url'],
        'spaces': !exists(json, 'spaces') ? undefined : ((json['spaces'] as Array<any>).map(SpaceOrderFieldFromJSON)),
        'tickets': !exists(json, 'tickets') ? undefined : ((json['tickets'] as Array<any>).map(TicketOrderFieldFromJSON)),
        'products': !exists(json, 'products') ? undefined : ((json['products'] as Array<any>).map(ProductOrderFieldFromJSON)),
        'services': !exists(json, 'services') ? undefined : ((json['services'] as Array<any>).map(ServiceOrderFieldFromJSON)),
        'comments': !exists(json, 'comments') ? undefined : ((json['comments'] as Array<any>).map(CommentFromJSON)),
        'discounts': !exists(json, 'discounts') ? undefined : ((json['discounts'] as Array<any>).map(DiscountFromJSON)),
    };
}

export function OrderToJSON(value?: Order | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'totals': OrderTotalsToJSON(value.totals),
        'banquet_id': value.banquetId,
        'invoice_url': value.invoiceUrl,
        'spaces': value.spaces === undefined ? undefined : ((value.spaces as Array<any>).map(SpaceOrderFieldToJSON)),
        'tickets': value.tickets === undefined ? undefined : ((value.tickets as Array<any>).map(TicketOrderFieldToJSON)),
        'products': value.products === undefined ? undefined : ((value.products as Array<any>).map(ProductOrderFieldToJSON)),
        'services': value.services === undefined ? undefined : ((value.services as Array<any>).map(ServiceOrderFieldToJSON)),
        'comments': value.comments === undefined ? undefined : ((value.comments as Array<any>).map(CommentToJSON)),
        'discounts': value.discounts === undefined ? undefined : ((value.discounts as Array<any>).map(DiscountToJSON)),
    };
}

