/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for creating a model record.
 * @export
 * @interface StoreModelRequest
 */
export interface StoreModelRequest {
    /**
     * 
     * @type {string}
     * @memberof StoreModelRequest
     */
    type: StoreModelRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StoreModelRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof StoreModelRequest
     */
    approach: StoreModelRequestApproachEnum;
    /**
     * 
     * @type {string}
     * @memberof StoreModelRequest
     */
    procSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreModelRequest
     */
    definition?: string | null;
    /**
     * 
     * @type {object}
     * @memberof StoreModelRequest
     */
    metadata?: object | null;
}


/**
 * @export
 */
export const StoreModelRequestTypeEnum = {
    SightabilityModel: 'SightabilityModel',
    Jags: 'JAGS'
} as const;
export type StoreModelRequestTypeEnum = typeof StoreModelRequestTypeEnum[keyof typeof StoreModelRequestTypeEnum];

/**
 * @export
 */
export const StoreModelRequestApproachEnum = {
    Regression: 'Regression',
    Bayesian: 'Bayesian'
} as const;
export type StoreModelRequestApproachEnum = typeof StoreModelRequestApproachEnum[keyof typeof StoreModelRequestApproachEnum];


/**
 * Check if a given object implements the StoreModelRequest interface.
 */
export function instanceOfStoreModelRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "approach" in value;

    return isInstance;
}

export function StoreModelRequestFromJSON(json: any): StoreModelRequest {
    return StoreModelRequestFromJSONTyped(json, false);
}

export function StoreModelRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreModelRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'name': json['name'],
        'approach': json['approach'],
        'procSuffix': !exists(json, 'proc_suffix') ? undefined : json['proc_suffix'],
        'definition': !exists(json, 'definition') ? undefined : json['definition'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function StoreModelRequestToJSON(value?: StoreModelRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'name': value.name,
        'approach': value.approach,
        'proc_suffix': value.procSuffix,
        'definition': value.definition,
        'metadata': value.metadata,
    };
}

