/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for updating an aerial survey entry record.
 *             `total` is required if at least one count column is present (
 *      *      `males`, `females`, `youngs` or `unclass`).
 * @export
 * @interface UpdateAerialSurveyEntryRequest
 */
export interface UpdateAerialSurveyEntryRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    aerialSurveyId?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    subunitId?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    speciesId?: number;
    /**
     * Must be equal to sum of `males`, `females`, `youngs` and`unclass`
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    males?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    females?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    youngs?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    unclass?: number;
    /**
     * 
     * @type {object}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    mappings?: object | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    activity?: UpdateAerialSurveyEntryRequestActivityEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    screenType?: UpdateAerialSurveyEntryRequestScreenTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    vegetationType?: UpdateAerialSurveyEntryRequestVegetationTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    snowPercentage?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    screenPercentage?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    waypoint?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    latitude?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateAerialSurveyEntryRequest
     */
    longitude?: number | null;
}


/**
 * @export
 */
export const UpdateAerialSurveyEntryRequestActivityEnum = {
    Bedded: 'Bedded',
    Standing: 'Standing',
    Moving: 'Moving'
} as const;
export type UpdateAerialSurveyEntryRequestActivityEnum = typeof UpdateAerialSurveyEntryRequestActivityEnum[keyof typeof UpdateAerialSurveyEntryRequestActivityEnum];

/**
 * @export
 */
export const UpdateAerialSurveyEntryRequestScreenTypeEnum = {
    AspenRiparianBrush: 'Aspen/Riparian/Brush',
    Conifer: 'Conifer',
    Sagebrush: 'Sagebrush',
    JuniperMahogany: 'Juniper/Mahogany',
    GrasslandOpen: 'Grassland/Open'
} as const;
export type UpdateAerialSurveyEntryRequestScreenTypeEnum = typeof UpdateAerialSurveyEntryRequestScreenTypeEnum[keyof typeof UpdateAerialSurveyEntryRequestScreenTypeEnum];

/**
 * @export
 */
export const UpdateAerialSurveyEntryRequestVegetationTypeEnum = {
    AspenRiparianBrush: 'Aspen/Riparian/Brush',
    Conifer: 'Conifer',
    Sagebrush: 'Sagebrush',
    JuniperMahogany: 'Juniper/Mahogany',
    GrasslandOpen: 'Grassland/Open'
} as const;
export type UpdateAerialSurveyEntryRequestVegetationTypeEnum = typeof UpdateAerialSurveyEntryRequestVegetationTypeEnum[keyof typeof UpdateAerialSurveyEntryRequestVegetationTypeEnum];


/**
 * Check if a given object implements the UpdateAerialSurveyEntryRequest interface.
 */
export function instanceOfUpdateAerialSurveyEntryRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UpdateAerialSurveyEntryRequestFromJSON(json: any): UpdateAerialSurveyEntryRequest {
    return UpdateAerialSurveyEntryRequestFromJSONTyped(json, false);
}

export function UpdateAerialSurveyEntryRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateAerialSurveyEntryRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'aerialSurveyId': !exists(json, 'aerial_survey_id') ? undefined : json['aerial_survey_id'],
        'subunitId': !exists(json, 'subunit_id') ? undefined : json['subunit_id'],
        'speciesId': !exists(json, 'species_id') ? undefined : json['species_id'],
        'total': !exists(json, 'total') ? undefined : json['total'],
        'males': !exists(json, 'males') ? undefined : json['males'],
        'females': !exists(json, 'females') ? undefined : json['females'],
        'youngs': !exists(json, 'youngs') ? undefined : json['youngs'],
        'unclass': !exists(json, 'unclass') ? undefined : json['unclass'],
        'mappings': !exists(json, 'mappings') ? undefined : json['mappings'],
        'activity': !exists(json, 'activity') ? undefined : json['activity'],
        'screenType': !exists(json, 'screen_type') ? undefined : json['screen_type'],
        'vegetationType': !exists(json, 'vegetation_type') ? undefined : json['vegetation_type'],
        'snowPercentage': !exists(json, 'snow_percentage') ? undefined : json['snow_percentage'],
        'screenPercentage': !exists(json, 'screen_percentage') ? undefined : json['screen_percentage'],
        'waypoint': !exists(json, 'waypoint') ? undefined : json['waypoint'],
        'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
        'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
    };
}

export function UpdateAerialSurveyEntryRequestToJSON(value?: UpdateAerialSurveyEntryRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'aerial_survey_id': value.aerialSurveyId,
        'subunit_id': value.subunitId,
        'species_id': value.speciesId,
        'total': value.total,
        'males': value.males,
        'females': value.females,
        'youngs': value.youngs,
        'unclass': value.unclass,
        'mappings': value.mappings,
        'activity': value.activity,
        'screen_type': value.screenType,
        'vegetation_type': value.vegetationType,
        'snow_percentage': value.snowPercentage,
        'screen_percentage': value.screenPercentage,
        'waypoint': value.waypoint,
        'latitude': value.latitude,
        'longitude': value.longitude,
    };
}

