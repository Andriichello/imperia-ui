/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
} from './Project';
import type { Species } from './Species';
import {
    SpeciesFromJSON,
    SpeciesFromJSONTyped,
    SpeciesToJSON,
} from './Species';

/**
 * Analysis unit version resource object
 * @export
 * @interface AnalysisUnitVersion
 */
export interface AnalysisUnitVersion {
    /**
     * 
     * @type {number}
     * @memberof AnalysisUnitVersion
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof AnalysisUnitVersion
     */
    projectId: number;
    /**
     * 
     * @type {number}
     * @memberof AnalysisUnitVersion
     */
    speciesId: number;
    /**
     * 
     * @type {string}
     * @memberof AnalysisUnitVersion
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisUnitVersion
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisUnitVersion
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisUnitVersion
     */
    createdBy: string;
    /**
     * 
     * @type {Project}
     * @memberof AnalysisUnitVersion
     */
    project?: Project;
    /**
     * 
     * @type {Species}
     * @memberof AnalysisUnitVersion
     */
    species?: Species;
}

/**
 * Check if a given object implements the AnalysisUnitVersion interface.
 */
export function instanceOfAnalysisUnitVersion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "speciesId" in value;
    isInstance = isInstance && "date" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "createdBy" in value;

    return isInstance;
}

export function AnalysisUnitVersionFromJSON(json: any): AnalysisUnitVersion {
    return AnalysisUnitVersionFromJSONTyped(json, false);
}

export function AnalysisUnitVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnalysisUnitVersion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'projectId': json['project_id'],
        'speciesId': json['species_id'],
        'date': json['date'],
        'name': json['name'],
        'source': json['source'],
        'createdBy': json['created_by'],
        'project': !exists(json, 'project') ? undefined : ProjectFromJSON(json['project']),
        'species': !exists(json, 'species') ? undefined : SpeciesFromJSON(json['species']),
    };
}

export function AnalysisUnitVersionToJSON(value?: AnalysisUnitVersion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'project_id': value.projectId,
        'species_id': value.speciesId,
        'date': value.date,
        'name': value.name,
        'source': value.source,
        'created_by': value.createdBy,
        'project': ProjectToJSON(value.project),
        'species': SpeciesToJSON(value.species),
    };
}

