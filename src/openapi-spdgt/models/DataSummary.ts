/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Aerial survey data summary resource object
 * @export
 * @interface DataSummary
 */
export interface DataSummary {
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    bioYear: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    surveyTypeId: number;
    /**
     * 
     * @type {string}
     * @memberof DataSummary
     */
    surveyType: string;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    speciesId: number;
    /**
     * 
     * @type {string}
     * @memberof DataSummary
     */
    species: string;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    analysisUnitId: number;
    /**
     * 
     * @type {string}
     * @memberof DataSummary
     */
    analysisUnit: string;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    allManagementUnits?: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    sampledManagementUnits?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof DataSummary
     */
    managementUnitIds: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    datasheets: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof DataSummary
     */
    surveyIds: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DataSummary
     */
    surveyDates: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DataSummary
     */
    startDate: string;
    /**
     * 
     * @type {string}
     * @memberof DataSummary
     */
    endDate: string;
    /**
     * Difference between `end_date` and `start_date` (in days).
     * @type {number}
     * @memberof DataSummary
     */
    duration: number;
    /**
     * Only target species records.
     * @type {number}
     * @memberof DataSummary
     */
    observations: number;
    /**
     * Only non-target species records.
     * @type {number}
     * @memberof DataSummary
     */
    otherObservations: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    allObservations: number;
    /**
     * Only target species records.
     * @type {number}
     * @memberof DataSummary
     */
    zeroTotals?: number;
    /**
     * Only non-target species records.
     * @type {number}
     * @memberof DataSummary
     */
    otherZeroTotals?: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    allZeroTotals?: number;
    /**
     * Only target species records.
     * @type {number}
     * @memberof DataSummary
     */
    animals: number;
    /**
     * Only non-target species records.
     * @type {number}
     * @memberof DataSummary
     */
    otherAnimals: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    allAnimals: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    allSubunits: number;
    /**
     * Only target species records.
     * @type {number}
     * @memberof DataSummary
     */
    sampledSubunits: number;
    /**
     * Only non-target species records.
     * @type {number}
     * @memberof DataSummary
     */
    otherSampledSubunits: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    allSampledSubunits: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    stratifiedSubunits: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    selectedSubunits: number;
    /**
     * 
     * @type {number}
     * @memberof DataSummary
     */
    surveyedSubunits: number;
}

/**
 * Check if a given object implements the DataSummary interface.
 */
export function instanceOfDataSummary(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "bioYear" in value;
    isInstance = isInstance && "surveyTypeId" in value;
    isInstance = isInstance && "surveyType" in value;
    isInstance = isInstance && "speciesId" in value;
    isInstance = isInstance && "species" in value;
    isInstance = isInstance && "analysisUnitId" in value;
    isInstance = isInstance && "analysisUnit" in value;
    isInstance = isInstance && "managementUnitIds" in value;
    isInstance = isInstance && "datasheets" in value;
    isInstance = isInstance && "surveyIds" in value;
    isInstance = isInstance && "surveyDates" in value;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "endDate" in value;
    isInstance = isInstance && "duration" in value;
    isInstance = isInstance && "observations" in value;
    isInstance = isInstance && "otherObservations" in value;
    isInstance = isInstance && "allObservations" in value;
    isInstance = isInstance && "animals" in value;
    isInstance = isInstance && "otherAnimals" in value;
    isInstance = isInstance && "allAnimals" in value;
    isInstance = isInstance && "allSubunits" in value;
    isInstance = isInstance && "sampledSubunits" in value;
    isInstance = isInstance && "otherSampledSubunits" in value;
    isInstance = isInstance && "allSampledSubunits" in value;
    isInstance = isInstance && "stratifiedSubunits" in value;
    isInstance = isInstance && "selectedSubunits" in value;
    isInstance = isInstance && "surveyedSubunits" in value;

    return isInstance;
}

export function DataSummaryFromJSON(json: any): DataSummary {
    return DataSummaryFromJSONTyped(json, false);
}

export function DataSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bioYear': json['bio_year'],
        'surveyTypeId': json['survey_type_id'],
        'surveyType': json['survey_type'],
        'speciesId': json['species_id'],
        'species': json['species'],
        'analysisUnitId': json['analysis_unit_id'],
        'analysisUnit': json['analysis_unit'],
        'allManagementUnits': !exists(json, 'all_management_units') ? undefined : json['all_management_units'],
        'sampledManagementUnits': !exists(json, 'sampled_management_units') ? undefined : json['sampled_management_units'],
        'managementUnitIds': json['management_unit_ids'],
        'datasheets': json['datasheets'],
        'surveyIds': json['survey_ids'],
        'surveyDates': json['survey_dates'],
        'startDate': json['start_date'],
        'endDate': json['end_date'],
        'duration': json['duration'],
        'observations': json['observations'],
        'otherObservations': json['other_observations'],
        'allObservations': json['all_observations'],
        'zeroTotals': !exists(json, 'zero_totals') ? undefined : json['zero_totals'],
        'otherZeroTotals': !exists(json, 'other_zero_totals') ? undefined : json['other_zero_totals'],
        'allZeroTotals': !exists(json, 'all_zero_totals') ? undefined : json['all_zero_totals'],
        'animals': json['animals'],
        'otherAnimals': json['other_animals'],
        'allAnimals': json['all_animals'],
        'allSubunits': json['all_subunits'],
        'sampledSubunits': json['sampled_subunits'],
        'otherSampledSubunits': json['other_sampled_subunits'],
        'allSampledSubunits': json['all_sampled_subunits'],
        'stratifiedSubunits': json['stratified_subunits'],
        'selectedSubunits': json['selected_subunits'],
        'surveyedSubunits': json['surveyed_subunits'],
    };
}

export function DataSummaryToJSON(value?: DataSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bio_year': value.bioYear,
        'survey_type_id': value.surveyTypeId,
        'survey_type': value.surveyType,
        'species_id': value.speciesId,
        'species': value.species,
        'analysis_unit_id': value.analysisUnitId,
        'analysis_unit': value.analysisUnit,
        'all_management_units': value.allManagementUnits,
        'sampled_management_units': value.sampledManagementUnits,
        'management_unit_ids': value.managementUnitIds,
        'datasheets': value.datasheets,
        'survey_ids': value.surveyIds,
        'survey_dates': value.surveyDates,
        'start_date': value.startDate,
        'end_date': value.endDate,
        'duration': value.duration,
        'observations': value.observations,
        'other_observations': value.otherObservations,
        'all_observations': value.allObservations,
        'zero_totals': value.zeroTotals,
        'other_zero_totals': value.otherZeroTotals,
        'all_zero_totals': value.allZeroTotals,
        'animals': value.animals,
        'other_animals': value.otherAnimals,
        'all_animals': value.allAnimals,
        'all_subunits': value.allSubunits,
        'sampled_subunits': value.sampledSubunits,
        'other_sampled_subunits': value.otherSampledSubunits,
        'all_sampled_subunits': value.allSampledSubunits,
        'stratified_subunits': value.stratifiedSubunits,
        'selected_subunits': value.selectedSubunits,
        'surveyed_subunits': value.surveyedSubunits,
    };
}

