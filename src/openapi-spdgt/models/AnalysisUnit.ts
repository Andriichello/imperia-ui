/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AnalysisUnitVersion } from './AnalysisUnitVersion';
import {
    AnalysisUnitVersionFromJSON,
    AnalysisUnitVersionFromJSONTyped,
    AnalysisUnitVersionToJSON,
} from './AnalysisUnitVersion';
import type { ManagementUnit } from './ManagementUnit';
import {
    ManagementUnitFromJSON,
    ManagementUnitFromJSONTyped,
    ManagementUnitToJSON,
} from './ManagementUnit';

/**
 * Analysis unit resource object
 * @export
 * @interface AnalysisUnit
 */
export interface AnalysisUnit {
    /**
     * 
     * @type {number}
     * @memberof AnalysisUnit
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof AnalysisUnit
     */
    versionId: number;
    /**
     * 
     * @type {number}
     * @memberof AnalysisUnit
     */
    number: number;
    /**
     * 
     * @type {string}
     * @memberof AnalysisUnit
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisUnit
     */
    abbreviation: string;
    /**
     * 
     * @type {number}
     * @memberof AnalysisUnit
     */
    sortOrder: number;
    /**
     * 
     * @type {AnalysisUnitVersion}
     * @memberof AnalysisUnit
     */
    version?: AnalysisUnitVersion;
    /**
     * 
     * @type {Array<ManagementUnit>}
     * @memberof AnalysisUnit
     */
    managementUnits?: Array<ManagementUnit>;
}

/**
 * Check if a given object implements the AnalysisUnit interface.
 */
export function instanceOfAnalysisUnit(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "versionId" in value;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "abbreviation" in value;
    isInstance = isInstance && "sortOrder" in value;

    return isInstance;
}

export function AnalysisUnitFromJSON(json: any): AnalysisUnit {
    return AnalysisUnitFromJSONTyped(json, false);
}

export function AnalysisUnitFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnalysisUnit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'versionId': json['version_id'],
        'number': json['number'],
        'name': json['name'],
        'abbreviation': json['abbreviation'],
        'sortOrder': json['sort_order'],
        'version': !exists(json, 'version') ? undefined : AnalysisUnitVersionFromJSON(json['version']),
        'managementUnits': !exists(json, 'managementUnits') ? undefined : ((json['managementUnits'] as Array<any>).map(ManagementUnitFromJSON)),
    };
}

export function AnalysisUnitToJSON(value?: AnalysisUnit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'version_id': value.versionId,
        'number': value.number,
        'name': value.name,
        'abbreviation': value.abbreviation,
        'sort_order': value.sortOrder,
        'version': AnalysisUnitVersionToJSON(value.version),
        'managementUnits': value.managementUnits === undefined ? undefined : ((value.managementUnits as Array<any>).map(ManagementUnitToJSON)),
    };
}

