/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AnalysisUnit } from './AnalysisUnit';
import {
    AnalysisUnitFromJSON,
    AnalysisUnitFromJSONTyped,
    AnalysisUnitToJSON,
} from './AnalysisUnit';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
} from './Project';
import type { Region } from './Region';
import {
    RegionFromJSON,
    RegionFromJSONTyped,
    RegionToJSON,
} from './Region';
import type { Species } from './Species';
import {
    SpeciesFromJSON,
    SpeciesFromJSONTyped,
    SpeciesToJSON,
} from './Species';

/**
 * Management unit resource object
 * @export
 * @interface ManagementUnit
 */
export interface ManagementUnit {
    /**
     * 
     * @type {number}
     * @memberof ManagementUnit
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof ManagementUnit
     */
    analysisUnitId: number | null;
    /**
     * 
     * @type {number}
     * @memberof ManagementUnit
     */
    regionId: number;
    /**
     * 
     * @type {number}
     * @memberof ManagementUnit
     */
    projectId: number;
    /**
     * 
     * @type {number}
     * @memberof ManagementUnit
     */
    speciesId: number;
    /**
     * 
     * @type {string}
     * @memberof ManagementUnit
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementUnit
     */
    abbreviation: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementUnit
     */
    number: string;
    /**
     * 
     * @type {number}
     * @memberof ManagementUnit
     */
    sortOrder: number;
    /**
     * 
     * @type {string}
     * @memberof ManagementUnit
     */
    polygon?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ManagementUnit
     */
    geography?: string | null;
    /**
     * 
     * @type {AnalysisUnit}
     * @memberof ManagementUnit
     */
    analysisUnit?: AnalysisUnit;
    /**
     * 
     * @type {Region}
     * @memberof ManagementUnit
     */
    region?: Region;
    /**
     * 
     * @type {Project}
     * @memberof ManagementUnit
     */
    project?: Project;
    /**
     * 
     * @type {Species}
     * @memberof ManagementUnit
     */
    species?: Species;
}

/**
 * Check if a given object implements the ManagementUnit interface.
 */
export function instanceOfManagementUnit(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "analysisUnitId" in value;
    isInstance = isInstance && "regionId" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "speciesId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "abbreviation" in value;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "sortOrder" in value;

    return isInstance;
}

export function ManagementUnitFromJSON(json: any): ManagementUnit {
    return ManagementUnitFromJSONTyped(json, false);
}

export function ManagementUnitFromJSONTyped(json: any, ignoreDiscriminator: boolean): ManagementUnit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'analysisUnitId': json['analysis_unit_id'],
        'regionId': json['region_id'],
        'projectId': json['project_id'],
        'speciesId': json['species_id'],
        'name': json['name'],
        'abbreviation': json['abbreviation'],
        'number': json['number'],
        'sortOrder': json['sort_order'],
        'polygon': !exists(json, 'polygon') ? undefined : json['polygon'],
        'geography': !exists(json, 'geography') ? undefined : json['geography'],
        'analysisUnit': !exists(json, 'analysisUnit') ? undefined : AnalysisUnitFromJSON(json['analysisUnit']),
        'region': !exists(json, 'region') ? undefined : RegionFromJSON(json['region']),
        'project': !exists(json, 'project') ? undefined : ProjectFromJSON(json['project']),
        'species': !exists(json, 'species') ? undefined : SpeciesFromJSON(json['species']),
    };
}

export function ManagementUnitToJSON(value?: ManagementUnit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'analysis_unit_id': value.analysisUnitId,
        'region_id': value.regionId,
        'project_id': value.projectId,
        'species_id': value.speciesId,
        'name': value.name,
        'abbreviation': value.abbreviation,
        'number': value.number,
        'sort_order': value.sortOrder,
        'polygon': value.polygon,
        'geography': value.geography,
        'analysisUnit': AnalysisUnitToJSON(value.analysisUnit),
        'region': RegionToJSON(value.region),
        'project': ProjectToJSON(value.project),
        'species': SpeciesToJSON(value.species),
    };
}

