/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Microsoft token resource object
 * @export
 * @interface MicrosoftToken
 */
export interface MicrosoftToken {
    /**
     * 
     * @type {number}
     * @memberof MicrosoftToken
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftToken
     */
    tokenType: string | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftToken
     */
    accessToken: string;
    /**
     * 
     * @type {boolean}
     * @memberof MicrosoftToken
     */
    isExpired?: boolean;
    /**
     * Number of seconds that the token will be valid for after creation.
     * @type {number}
     * @memberof MicrosoftToken
     */
    expiresIn: number;
    /**
     * Token expiration date and time (`created_at` + `expires_in`).
     * @type {Date}
     * @memberof MicrosoftToken
     */
    expiresAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftToken
     */
    refreshToken: string | null;
    /**
     * 
     * @type {Date}
     * @memberof MicrosoftToken
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof MicrosoftToken
     */
    updatedAt: Date | null;
}

/**
 * Check if a given object implements the MicrosoftToken interface.
 */
export function instanceOfMicrosoftToken(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "tokenType" in value;
    isInstance = isInstance && "accessToken" in value;
    isInstance = isInstance && "expiresIn" in value;
    isInstance = isInstance && "expiresAt" in value;
    isInstance = isInstance && "refreshToken" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function MicrosoftTokenFromJSON(json: any): MicrosoftToken {
    return MicrosoftTokenFromJSONTyped(json, false);
}

export function MicrosoftTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): MicrosoftToken {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tokenType': json['token_type'],
        'accessToken': json['access_token'],
        'isExpired': !exists(json, 'is_expired') ? undefined : json['is_expired'],
        'expiresIn': json['expires_in'],
        'expiresAt': (json['expires_at'] === null ? null : new Date(json['expires_at'])),
        'refreshToken': json['refresh_token'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
    };
}

export function MicrosoftTokenToJSON(value?: MicrosoftToken | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'token_type': value.tokenType,
        'access_token': value.accessToken,
        'is_expired': value.isExpired,
        'expires_in': value.expiresIn,
        'expires_at': (value.expiresAt === null ? null : value.expiresAt.toISOString()),
        'refresh_token': value.refreshToken,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
    };
}

