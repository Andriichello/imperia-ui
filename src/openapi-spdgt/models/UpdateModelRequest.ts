/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for updating a model record.
 * @export
 * @interface UpdateModelRequest
 */
export interface UpdateModelRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateModelRequest
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateModelRequest
     */
    type?: UpdateModelRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateModelRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateModelRequest
     */
    approach?: UpdateModelRequestApproachEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateModelRequest
     */
    procSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateModelRequest
     */
    definition?: string | null;
    /**
     * 
     * @type {object}
     * @memberof UpdateModelRequest
     */
    metadata?: object | null;
}


/**
 * @export
 */
export const UpdateModelRequestTypeEnum = {
    SightabilityModel: 'SightabilityModel',
    Jags: 'JAGS'
} as const;
export type UpdateModelRequestTypeEnum = typeof UpdateModelRequestTypeEnum[keyof typeof UpdateModelRequestTypeEnum];

/**
 * @export
 */
export const UpdateModelRequestApproachEnum = {
    Regression: 'Regression',
    Bayesian: 'Bayesian'
} as const;
export type UpdateModelRequestApproachEnum = typeof UpdateModelRequestApproachEnum[keyof typeof UpdateModelRequestApproachEnum];


/**
 * Check if a given object implements the UpdateModelRequest interface.
 */
export function instanceOfUpdateModelRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UpdateModelRequestFromJSON(json: any): UpdateModelRequest {
    return UpdateModelRequestFromJSONTyped(json, false);
}

export function UpdateModelRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateModelRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'approach': !exists(json, 'approach') ? undefined : json['approach'],
        'procSuffix': !exists(json, 'proc_suffix') ? undefined : json['proc_suffix'],
        'definition': !exists(json, 'definition') ? undefined : json['definition'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function UpdateModelRequestToJSON(value?: UpdateModelRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'name': value.name,
        'approach': value.approach,
        'proc_suffix': value.procSuffix,
        'definition': value.definition,
        'metadata': value.metadata,
    };
}

