/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for getting logging in with OpenID
 * @export
 * @interface OpenIDLoginRequest
 */
export interface OpenIDLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenIDLoginRequest
     */
    clientId: string;
    /**
     * 
     * @type {string}
     * @memberof OpenIDLoginRequest
     */
    responseType: OpenIDLoginRequestResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OpenIDLoginRequest
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenIDLoginRequest
     */
    nonce?: string;
    /**
     * By credentials. Required with `password`
     * @type {string}
     * @memberof OpenIDLoginRequest
     */
    email: string;
    /**
     * By credentials. Required with `email`
     * @type {string}
     * @memberof OpenIDLoginRequest
     */
    password: string;
    /**
     * Project's `abbreviation`
     * @type {string}
     * @memberof OpenIDLoginRequest
     */
    abbreviation: string | null;
}


/**
 * @export
 */
export const OpenIDLoginRequestResponseTypeEnum = {
    Code: 'code'
} as const;
export type OpenIDLoginRequestResponseTypeEnum = typeof OpenIDLoginRequestResponseTypeEnum[keyof typeof OpenIDLoginRequestResponseTypeEnum];


/**
 * Check if a given object implements the OpenIDLoginRequest interface.
 */
export function instanceOfOpenIDLoginRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "clientId" in value;
    isInstance = isInstance && "responseType" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "password" in value;
    isInstance = isInstance && "abbreviation" in value;

    return isInstance;
}

export function OpenIDLoginRequestFromJSON(json: any): OpenIDLoginRequest {
    return OpenIDLoginRequestFromJSONTyped(json, false);
}

export function OpenIDLoginRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenIDLoginRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'clientId': json['client_id'],
        'responseType': json['response_type'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'nonce': !exists(json, 'nonce') ? undefined : json['nonce'],
        'email': json['email'],
        'password': json['password'],
        'abbreviation': json['abbreviation'],
    };
}

export function OpenIDLoginRequestToJSON(value?: OpenIDLoginRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'client_id': value.clientId,
        'response_type': value.responseType,
        'state': value.state,
        'nonce': value.nonce,
        'email': value.email,
        'password': value.password,
        'abbreviation': value.abbreviation,
    };
}

