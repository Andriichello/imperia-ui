/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
} from './Project';

/**
 * Region resource object
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    projectId: number;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    abbreviation: string;
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    number: number;
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    sortOrder: number;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    polygon?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    geography?: string | null;
    /**
     * 
     * @type {Project}
     * @memberof Region
     */
    project?: Project;
}

/**
 * Check if a given object implements the Region interface.
 */
export function instanceOfRegion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "abbreviation" in value;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "sortOrder" in value;

    return isInstance;
}

export function RegionFromJSON(json: any): Region {
    return RegionFromJSONTyped(json, false);
}

export function RegionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Region {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'projectId': json['project_id'],
        'name': json['name'],
        'abbreviation': json['abbreviation'],
        'number': json['number'],
        'sortOrder': json['sort_order'],
        'polygon': !exists(json, 'polygon') ? undefined : json['polygon'],
        'geography': !exists(json, 'geography') ? undefined : json['geography'],
        'project': !exists(json, 'project') ? undefined : ProjectFromJSON(json['project']),
    };
}

export function RegionToJSON(value?: Region | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'project_id': value.projectId,
        'name': value.name,
        'abbreviation': value.abbreviation,
        'number': value.number,
        'sort_order': value.sortOrder,
        'polygon': value.polygon,
        'geography': value.geography,
        'project': ProjectToJSON(value.project),
    };
}

