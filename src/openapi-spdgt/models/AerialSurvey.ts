/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AerialSurveyFile } from './AerialSurveyFile';
import {
    AerialSurveyFileFromJSON,
    AerialSurveyFileFromJSONTyped,
    AerialSurveyFileToJSON,
} from './AerialSurveyFile';
import type { Aircraft } from './Aircraft';
import {
    AircraftFromJSON,
    AircraftFromJSONTyped,
    AircraftToJSON,
} from './Aircraft';
import type { Model } from './Model';
import {
    ModelFromJSON,
    ModelFromJSONTyped,
    ModelToJSON,
} from './Model';
import type { ModelAerialSurveyPivot } from './ModelAerialSurveyPivot';
import {
    ModelAerialSurveyPivotFromJSON,
    ModelAerialSurveyPivotFromJSONTyped,
    ModelAerialSurveyPivotToJSON,
} from './ModelAerialSurveyPivot';
import type { SurveyTypeForCountApi } from './SurveyTypeForCountApi';
import {
    SurveyTypeForCountApiFromJSON,
    SurveyTypeForCountApiFromJSONTyped,
    SurveyTypeForCountApiToJSON,
} from './SurveyTypeForCountApi';

/**
 * Aerial survey resource object
 * @export
 * @interface AerialSurvey
 */
export interface AerialSurvey {
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    surveyTypeId: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    managementUnitId: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    columnMappingVersionId: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    aircraftId: number | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurvey
     */
    date: string;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    startTach: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    endTach: number | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurvey
     */
    startTime: string | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurvey
     */
    endTime: string | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurvey
     */
    flight: string | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurvey
     */
    pilot: string | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurvey
     */
    observers: string | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    temperature: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    wind: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    clouds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurvey
     */
    precipitation: number | null;
    /**
     * Aerial survey's metadata.
     * @type {object}
     * @memberof AerialSurvey
     */
    metadata: object;
    /**
     * 
     * @type {Date}
     * @memberof AerialSurvey
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof AerialSurvey
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {ModelAerialSurveyPivot}
     * @memberof AerialSurvey
     */
    modelPivot?: ModelAerialSurveyPivot;
    /**
     * 
     * @type {Aircraft}
     * @memberof AerialSurvey
     */
    aircraft?: Aircraft;
    /**
     * 
     * @type {SurveyTypeForCountApi}
     * @memberof AerialSurvey
     */
    surveyType?: SurveyTypeForCountApi;
    /**
     * 
     * @type {Array<AerialSurveyFile>}
     * @memberof AerialSurvey
     */
    files?: Array<AerialSurveyFile>;
    /**
     * 
     * @type {Array<Model>}
     * @memberof AerialSurvey
     */
    models?: Array<Model>;
}

/**
 * Check if a given object implements the AerialSurvey interface.
 */
export function instanceOfAerialSurvey(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "surveyTypeId" in value;
    isInstance = isInstance && "managementUnitId" in value;
    isInstance = isInstance && "columnMappingVersionId" in value;
    isInstance = isInstance && "aircraftId" in value;
    isInstance = isInstance && "date" in value;
    isInstance = isInstance && "startTach" in value;
    isInstance = isInstance && "endTach" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "endTime" in value;
    isInstance = isInstance && "flight" in value;
    isInstance = isInstance && "pilot" in value;
    isInstance = isInstance && "observers" in value;
    isInstance = isInstance && "temperature" in value;
    isInstance = isInstance && "wind" in value;
    isInstance = isInstance && "precipitation" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function AerialSurveyFromJSON(json: any): AerialSurvey {
    return AerialSurveyFromJSONTyped(json, false);
}

export function AerialSurveyFromJSONTyped(json: any, ignoreDiscriminator: boolean): AerialSurvey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'surveyTypeId': json['survey_type_id'],
        'managementUnitId': json['management_unit_id'],
        'columnMappingVersionId': json['column_mapping_version_id'],
        'aircraftId': json['aircraft_id'],
        'date': json['date'],
        'startTach': json['start_tach'],
        'endTach': json['end_tach'],
        'startTime': json['start_time'],
        'endTime': json['end_time'],
        'flight': json['flight'],
        'pilot': json['pilot'],
        'observers': json['observers'],
        'temperature': json['temperature'],
        'wind': json['wind'],
        'clouds': !exists(json, 'clouds') ? undefined : json['clouds'],
        'precipitation': json['precipitation'],
        'metadata': json['metadata'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'modelPivot': !exists(json, 'modelPivot') ? undefined : ModelAerialSurveyPivotFromJSON(json['modelPivot']),
        'aircraft': !exists(json, 'aircraft') ? undefined : AircraftFromJSON(json['aircraft']),
        'surveyType': !exists(json, 'surveyType') ? undefined : SurveyTypeForCountApiFromJSON(json['surveyType']),
        'files': !exists(json, 'files') ? undefined : ((json['files'] as Array<any>).map(AerialSurveyFileFromJSON)),
        'models': !exists(json, 'models') ? undefined : ((json['models'] as Array<any>).map(ModelFromJSON)),
    };
}

export function AerialSurveyToJSON(value?: AerialSurvey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'survey_type_id': value.surveyTypeId,
        'management_unit_id': value.managementUnitId,
        'column_mapping_version_id': value.columnMappingVersionId,
        'aircraft_id': value.aircraftId,
        'date': value.date,
        'start_tach': value.startTach,
        'end_tach': value.endTach,
        'start_time': value.startTime,
        'end_time': value.endTime,
        'flight': value.flight,
        'pilot': value.pilot,
        'observers': value.observers,
        'temperature': value.temperature,
        'wind': value.wind,
        'clouds': value.clouds,
        'precipitation': value.precipitation,
        'metadata': value.metadata,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'modelPivot': ModelAerialSurveyPivotToJSON(value.modelPivot),
        'aircraft': AircraftToJSON(value.aircraft),
        'surveyType': SurveyTypeForCountApiToJSON(value.surveyType),
        'files': value.files === undefined ? undefined : ((value.files as Array<any>).map(AerialSurveyFileToJSON)),
        'models': value.models === undefined ? undefined : ((value.models as Array<any>).map(ModelToJSON)),
    };
}

