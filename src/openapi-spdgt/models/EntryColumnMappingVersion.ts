/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SurveyType } from './SurveyType';
import {
    SurveyTypeFromJSON,
    SurveyTypeFromJSONTyped,
    SurveyTypeToJSON,
} from './SurveyType';

/**
 * Entry column mapping version resource object
 * @export
 * @interface EntryColumnMappingVersion
 */
export interface EntryColumnMappingVersion {
    /**
     * 
     * @type {number}
     * @memberof EntryColumnMappingVersion
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof EntryColumnMappingVersion
     */
    surveyTypeId: number;
    /**
     * 
     * @type {string}
     * @memberof EntryColumnMappingVersion
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EntryColumnMappingVersion
     */
    description: string;
    /**
     * 
     * @type {Date}
     * @memberof EntryColumnMappingVersion
     */
    activeFrom: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof EntryColumnMappingVersion
     */
    activeUntil: Date | null;
    /**
     * 
     * @type {SurveyType}
     * @memberof EntryColumnMappingVersion
     */
    surveyType?: SurveyType;
}

/**
 * Check if a given object implements the EntryColumnMappingVersion interface.
 */
export function instanceOfEntryColumnMappingVersion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "surveyTypeId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "activeFrom" in value;
    isInstance = isInstance && "activeUntil" in value;

    return isInstance;
}

export function EntryColumnMappingVersionFromJSON(json: any): EntryColumnMappingVersion {
    return EntryColumnMappingVersionFromJSONTyped(json, false);
}

export function EntryColumnMappingVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntryColumnMappingVersion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'surveyTypeId': json['survey_type_id'],
        'name': json['name'],
        'description': json['description'],
        'activeFrom': (json['active_from'] === null ? null : new Date(json['active_from'])),
        'activeUntil': (json['active_until'] === null ? null : new Date(json['active_until'])),
        'surveyType': !exists(json, 'surveyType') ? undefined : SurveyTypeFromJSON(json['surveyType']),
    };
}

export function EntryColumnMappingVersionToJSON(value?: EntryColumnMappingVersion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'survey_type_id': value.surveyTypeId,
        'name': value.name,
        'description': value.description,
        'active_from': (value.activeFrom === null ? null : value.activeFrom.toISOString()),
        'active_until': (value.activeUntil === null ? null : value.activeUntil.toISOString()),
        'surveyType': SurveyTypeToJSON(value.surveyType),
    };
}

