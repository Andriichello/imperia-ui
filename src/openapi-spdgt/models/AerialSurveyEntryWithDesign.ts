/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Aerial survey entry with design resource object
 * @export
 * @interface AerialSurveyEntryWithDesign
 */
export interface AerialSurveyEntryWithDesign {
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    entryId: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    surveyId: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    designId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    surveyTypeId: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    speciesId: number;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntryWithDesign
     */
    species: string;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    bioYear: number;
    /**
     * 
     * @type {Date}
     * @memberof AerialSurveyEntryWithDesign
     */
    date: Date;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    analysisUnitId: number;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntryWithDesign
     */
    analysisUnit: string;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    managementUnitId: number;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntryWithDesign
     */
    managementUnit: string;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    subunitId: number;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntryWithDesign
     */
    subunit: string;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    stratumId: number | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntryWithDesign
     */
    stratum: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AerialSurveyEntryWithDesign
     */
    isSelected: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof AerialSurveyEntryWithDesign
     */
    isSurveyed: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    latitude: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntryWithDesign
     */
    longitude: number | null;
}

/**
 * Check if a given object implements the AerialSurveyEntryWithDesign interface.
 */
export function instanceOfAerialSurveyEntryWithDesign(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entryId" in value;
    isInstance = isInstance && "surveyId" in value;
    isInstance = isInstance && "surveyTypeId" in value;
    isInstance = isInstance && "speciesId" in value;
    isInstance = isInstance && "species" in value;
    isInstance = isInstance && "bioYear" in value;
    isInstance = isInstance && "date" in value;
    isInstance = isInstance && "analysisUnitId" in value;
    isInstance = isInstance && "analysisUnit" in value;
    isInstance = isInstance && "managementUnitId" in value;
    isInstance = isInstance && "managementUnit" in value;
    isInstance = isInstance && "subunitId" in value;
    isInstance = isInstance && "subunit" in value;
    isInstance = isInstance && "stratumId" in value;
    isInstance = isInstance && "stratum" in value;
    isInstance = isInstance && "isSelected" in value;
    isInstance = isInstance && "isSurveyed" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "latitude" in value;
    isInstance = isInstance && "longitude" in value;

    return isInstance;
}

export function AerialSurveyEntryWithDesignFromJSON(json: any): AerialSurveyEntryWithDesign {
    return AerialSurveyEntryWithDesignFromJSONTyped(json, false);
}

export function AerialSurveyEntryWithDesignFromJSONTyped(json: any, ignoreDiscriminator: boolean): AerialSurveyEntryWithDesign {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entryId': json['entry_id'],
        'surveyId': json['survey_id'],
        'designId': !exists(json, 'design_id') ? undefined : json['design_id'],
        'surveyTypeId': json['survey_type_id'],
        'speciesId': json['species_id'],
        'species': json['species'],
        'bioYear': json['bio_year'],
        'date': (new Date(json['date'])),
        'analysisUnitId': json['analysis_unit_id'],
        'analysisUnit': json['analysis_unit'],
        'managementUnitId': json['management_unit_id'],
        'managementUnit': json['management_unit'],
        'subunitId': json['subunit_id'],
        'subunit': json['subunit'],
        'stratumId': json['stratum_id'],
        'stratum': json['stratum'],
        'isSelected': json['is_selected'],
        'isSurveyed': json['is_surveyed'],
        'total': json['total'],
        'latitude': json['latitude'],
        'longitude': json['longitude'],
    };
}

export function AerialSurveyEntryWithDesignToJSON(value?: AerialSurveyEntryWithDesign | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entry_id': value.entryId,
        'survey_id': value.surveyId,
        'design_id': value.designId,
        'survey_type_id': value.surveyTypeId,
        'species_id': value.speciesId,
        'species': value.species,
        'bio_year': value.bioYear,
        'date': (value.date.toISOString().substr(0,10)),
        'analysis_unit_id': value.analysisUnitId,
        'analysis_unit': value.analysisUnit,
        'management_unit_id': value.managementUnitId,
        'management_unit': value.managementUnit,
        'subunit_id': value.subunitId,
        'subunit': value.subunit,
        'stratum_id': value.stratumId,
        'stratum': value.stratum,
        'is_selected': value.isSelected,
        'is_surveyed': value.isSurveyed,
        'total': value.total,
        'latitude': value.latitude,
        'longitude': value.longitude,
    };
}

