/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Entry column mapping resource object
 * @export
 * @interface EntryColumnMapping
 */
export interface EntryColumnMapping {
    /**
     * 
     * @type {number}
     * @memberof EntryColumnMapping
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof EntryColumnMapping
     */
    versionId: number;
    /**
     * 
     * @type {string}
     * @memberof EntryColumnMapping
     */
    title: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntryColumnMapping
     */
    source: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntryColumnMapping
     */
    mapped: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntryColumnMapping
     */
    operation: EntryColumnMappingOperationEnum;
    /**
     * 
     * @type {object}
     * @memberof EntryColumnMapping
     */
    metadata: object | null;
}


/**
 * @export
 */
export const EntryColumnMappingOperationEnum = {
    Hide: 'Hide',
    Substitute: 'Substitute',
    Add: 'Add',
    Subtract: 'Subtract',
    Multiply: 'Multiply',
    Divide: 'Divide'
} as const;
export type EntryColumnMappingOperationEnum = typeof EntryColumnMappingOperationEnum[keyof typeof EntryColumnMappingOperationEnum];


/**
 * Check if a given object implements the EntryColumnMapping interface.
 */
export function instanceOfEntryColumnMapping(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "versionId" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "mapped" in value;
    isInstance = isInstance && "operation" in value;
    isInstance = isInstance && "metadata" in value;

    return isInstance;
}

export function EntryColumnMappingFromJSON(json: any): EntryColumnMapping {
    return EntryColumnMappingFromJSONTyped(json, false);
}

export function EntryColumnMappingFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntryColumnMapping {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'versionId': json['version_id'],
        'title': json['title'],
        'source': json['source'],
        'mapped': json['mapped'],
        'operation': json['operation'],
        'metadata': json['metadata'],
    };
}

export function EntryColumnMappingToJSON(value?: EntryColumnMapping | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'version_id': value.versionId,
        'title': value.title,
        'source': value.source,
        'mapped': value.mapped,
        'operation': value.operation,
        'metadata': value.metadata,
    };
}

