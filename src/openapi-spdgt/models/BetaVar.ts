/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CovarBeta } from './CovarBeta';
import {
    CovarBetaFromJSON,
    CovarBetaFromJSONTyped,
    CovarBetaToJSON,
} from './CovarBeta';

/**
 * Beta var resource object
 * @export
 * @interface BetaVar
 */
export interface BetaVar {
    /**
     * 
     * @type {number}
     * @memberof BetaVar
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof BetaVar
     */
    betaId1: number;
    /**
     * 
     * @type {number}
     * @memberof BetaVar
     */
    betaId2: number;
    /**
     * 
     * @type {number}
     * @memberof BetaVar
     */
    vcov: number;
    /**
     * 
     * @type {Date}
     * @memberof BetaVar
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof BetaVar
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {CovarBeta}
     * @memberof BetaVar
     */
    betaOne?: CovarBeta;
    /**
     * 
     * @type {CovarBeta}
     * @memberof BetaVar
     */
    betaTwo?: CovarBeta;
}

/**
 * Check if a given object implements the BetaVar interface.
 */
export function instanceOfBetaVar(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "betaId1" in value;
    isInstance = isInstance && "betaId2" in value;
    isInstance = isInstance && "vcov" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function BetaVarFromJSON(json: any): BetaVar {
    return BetaVarFromJSONTyped(json, false);
}

export function BetaVarFromJSONTyped(json: any, ignoreDiscriminator: boolean): BetaVar {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'betaId1': json['beta_id1'],
        'betaId2': json['beta_id2'],
        'vcov': json['vcov'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'betaOne': !exists(json, 'betaOne') ? undefined : CovarBetaFromJSON(json['betaOne']),
        'betaTwo': !exists(json, 'betaTwo') ? undefined : CovarBetaFromJSON(json['betaTwo']),
    };
}

export function BetaVarToJSON(value?: BetaVar | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'beta_id1': value.betaId1,
        'beta_id2': value.betaId2,
        'vcov': value.vcov,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'betaOne': CovarBetaToJSON(value.betaOne),
        'betaTwo': CovarBetaToJSON(value.betaTwo),
    };
}

