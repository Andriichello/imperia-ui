/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for creating a model output record.
 * @export
 * @interface StoreOutputRequest
 */
export interface StoreOutputRequest {
    /**
     * 
     * @type {number}
     * @memberof StoreOutputRequest
     */
    projectId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof StoreOutputRequest
     */
    modelId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof StoreOutputRequest
     */
    recipeId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof StoreOutputRequest
     */
    contextId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof StoreOutputRequest
     */
    contextType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreOutputRequest
     */
    status?: StoreOutputRequestStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof StoreOutputRequest
     */
    metadata?: object | null;
}


/**
 * @export
 */
export const StoreOutputRequestStatusEnum = {
    Pending: 'Pending',
    Processing: 'Processing',
    Postponed: 'Postponed',
    Cancelled: 'Cancelled',
    Completed: 'Completed'
} as const;
export type StoreOutputRequestStatusEnum = typeof StoreOutputRequestStatusEnum[keyof typeof StoreOutputRequestStatusEnum];


/**
 * Check if a given object implements the StoreOutputRequest interface.
 */
export function instanceOfStoreOutputRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StoreOutputRequestFromJSON(json: any): StoreOutputRequest {
    return StoreOutputRequestFromJSONTyped(json, false);
}

export function StoreOutputRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreOutputRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'projectId': !exists(json, 'project_id') ? undefined : json['project_id'],
        'modelId': !exists(json, 'model_id') ? undefined : json['model_id'],
        'recipeId': !exists(json, 'recipe_id') ? undefined : json['recipe_id'],
        'contextId': !exists(json, 'context_id') ? undefined : json['context_id'],
        'contextType': !exists(json, 'context_type') ? undefined : json['context_type'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function StoreOutputRequestToJSON(value?: StoreOutputRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'project_id': value.projectId,
        'model_id': value.modelId,
        'recipe_id': value.recipeId,
        'context_id': value.contextId,
        'context_type': value.contextType,
        'status': value.status,
        'metadata': value.metadata,
    };
}

