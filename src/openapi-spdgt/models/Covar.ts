/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CovarBeta } from './CovarBeta';
import {
    CovarBetaFromJSON,
    CovarBetaFromJSONTyped,
    CovarBetaToJSON,
} from './CovarBeta';
import type { CovarBin } from './CovarBin';
import {
    CovarBinFromJSON,
    CovarBinFromJSONTyped,
    CovarBinToJSON,
} from './CovarBin';
import type { CovarCategory } from './CovarCategory';
import {
    CovarCategoryFromJSON,
    CovarCategoryFromJSONTyped,
    CovarCategoryToJSON,
} from './CovarCategory';
import type { Model } from './Model';
import {
    ModelFromJSON,
    ModelFromJSONTyped,
    ModelToJSON,
} from './Model';

/**
 * Covar resource object
 * @export
 * @interface Covar
 */
export interface Covar {
    /**
     * 
     * @type {number}
     * @memberof Covar
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Covar
     */
    modelId: number;
    /**
     * 
     * @type {string}
     * @memberof Covar
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Covar
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Covar
     */
    description: string | null;
    /**
     * 
     * @type {string}
     * @memberof Covar
     */
    transformation: string | null;
    /**
     * 
     * @type {number}
     * @memberof Covar
     */
    sortOrder: number;
    /**
     * 
     * @type {Date}
     * @memberof Covar
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Covar
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Covar
     */
    availableActivities?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Covar
     */
    availableVegetation?: Array<string>;
    /**
     * 
     * @type {Model}
     * @memberof Covar
     */
    model?: Model;
    /**
     * 
     * @type {Array<CovarBeta>}
     * @memberof Covar
     */
    betas?: Array<CovarBeta>;
    /**
     * 
     * @type {Array<CovarBin>}
     * @memberof Covar
     */
    bins?: Array<CovarBin>;
    /**
     * 
     * @type {Array<CovarCategory>}
     * @memberof Covar
     */
    categories?: Array<CovarCategory>;
}

/**
 * Check if a given object implements the Covar interface.
 */
export function instanceOfCovar(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "modelId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "transformation" in value;
    isInstance = isInstance && "sortOrder" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function CovarFromJSON(json: any): Covar {
    return CovarFromJSONTyped(json, false);
}

export function CovarFromJSONTyped(json: any, ignoreDiscriminator: boolean): Covar {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'modelId': json['model_id'],
        'type': json['type'],
        'name': json['name'],
        'description': json['description'],
        'transformation': json['transformation'],
        'sortOrder': json['sort_order'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'availableActivities': !exists(json, 'available_activities') ? undefined : json['available_activities'],
        'availableVegetation': !exists(json, 'available_vegetation') ? undefined : json['available_vegetation'],
        'model': !exists(json, 'model') ? undefined : ModelFromJSON(json['model']),
        'betas': !exists(json, 'betas') ? undefined : ((json['betas'] as Array<any>).map(CovarBetaFromJSON)),
        'bins': !exists(json, 'bins') ? undefined : ((json['bins'] as Array<any>).map(CovarBinFromJSON)),
        'categories': !exists(json, 'categories') ? undefined : ((json['categories'] as Array<any>).map(CovarCategoryFromJSON)),
    };
}

export function CovarToJSON(value?: Covar | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'model_id': value.modelId,
        'type': value.type,
        'name': value.name,
        'description': value.description,
        'transformation': value.transformation,
        'sort_order': value.sortOrder,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'available_activities': value.availableActivities,
        'available_vegetation': value.availableVegetation,
        'model': ModelToJSON(value.model),
        'betas': value.betas === undefined ? undefined : ((value.betas as Array<any>).map(CovarBetaToJSON)),
        'bins': value.bins === undefined ? undefined : ((value.bins as Array<any>).map(CovarBinToJSON)),
        'categories': value.categories === undefined ? undefined : ((value.categories as Array<any>).map(CovarCategoryToJSON)),
    };
}

