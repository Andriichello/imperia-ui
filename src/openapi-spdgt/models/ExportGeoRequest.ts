/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for exporting Geo information.
 * @export
 * @interface ExportGeoRequest
 */
export interface ExportGeoRequest {
    /**
     * 
     * @type {string}
     * @memberof ExportGeoRequest
     */
    as: ExportGeoRequestAsEnum;
    /**
     * If target geography is a polygon and `function` is to `Centroid`,
     *              then a point will be returned instead of a polygon.
     * @type {string}
     * @memberof ExportGeoRequest
     */
    _function?: ExportGeoRequestFunctionEnum;
    /**
     * Works only for GPX format exports.
     * @type {boolean}
     * @memberof ExportGeoRequest
     */
    singleTrack?: boolean;
}


/**
 * @export
 */
export const ExportGeoRequestAsEnum = {
    Kml: 'KML',
    Gpx: 'GPX',
    GeoJson: 'GeoJSON'
} as const;
export type ExportGeoRequestAsEnum = typeof ExportGeoRequestAsEnum[keyof typeof ExportGeoRequestAsEnum];

/**
 * @export
 */
export const ExportGeoRequestFunctionEnum = {
    Centroid: 'Centroid',
    PointOnSurface: 'PointOnSurface'
} as const;
export type ExportGeoRequestFunctionEnum = typeof ExportGeoRequestFunctionEnum[keyof typeof ExportGeoRequestFunctionEnum];


/**
 * Check if a given object implements the ExportGeoRequest interface.
 */
export function instanceOfExportGeoRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "as" in value;

    return isInstance;
}

export function ExportGeoRequestFromJSON(json: any): ExportGeoRequest {
    return ExportGeoRequestFromJSONTyped(json, false);
}

export function ExportGeoRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportGeoRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'as': json['as'],
        '_function': !exists(json, 'function') ? undefined : json['function'],
        'singleTrack': !exists(json, 'single_track') ? undefined : json['single_track'],
    };
}

export function ExportGeoRequestToJSON(value?: ExportGeoRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'as': value.as,
        'function': value._function,
        'single_track': value.singleTrack,
    };
}

