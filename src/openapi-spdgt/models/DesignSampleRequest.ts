/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DesignSampleItem } from './DesignSampleItem';
import {
    DesignSampleItemFromJSON,
    DesignSampleItemFromJSONTyped,
    DesignSampleItemToJSON,
} from './DesignSampleItem';
import type { DesignSampleProportionItem } from './DesignSampleProportionItem';
import {
    DesignSampleProportionItemFromJSON,
    DesignSampleProportionItemFromJSONTyped,
    DesignSampleProportionItemToJSON,
} from './DesignSampleProportionItem';

/**
 * Request to sample desings.
 * @export
 * @interface DesignSampleRequest
 */
export interface DesignSampleRequest {
    /**
     * Sampling method. `random` by default.
     * @type {string}
     * @memberof DesignSampleRequest
     */
    method?: DesignSampleRequestMethodEnum;
    /**
     * 
     * @type {number}
     * @memberof DesignSampleRequest
     */
    bioYear: number;
    /**
     * 
     * @type {number}
     * @memberof DesignSampleRequest
     */
    surveyTypeId: number;
    /**
     * * Required without `management_unit_id`.
     * @type {number}
     * @memberof DesignSampleRequest
     */
    analysisUnitId: number;
    /**
     * * Required without `analysis_unit_id`.
     * @type {number}
     * @memberof DesignSampleRequest
     */
    managementUnitId?: number;
    /**
     * 
     * @type {Array<DesignSampleProportionItem>}
     * @memberof DesignSampleRequest
     */
    proportions: Array<DesignSampleProportionItem>;
    /**
     * 
     * @type {Array<DesignSampleItem>}
     * @memberof DesignSampleRequest
     */
    designs?: Array<DesignSampleItem>;
}


/**
 * @export
 */
export const DesignSampleRequestMethodEnum = {
    Random: 'random'
} as const;
export type DesignSampleRequestMethodEnum = typeof DesignSampleRequestMethodEnum[keyof typeof DesignSampleRequestMethodEnum];


/**
 * Check if a given object implements the DesignSampleRequest interface.
 */
export function instanceOfDesignSampleRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "bioYear" in value;
    isInstance = isInstance && "surveyTypeId" in value;
    isInstance = isInstance && "analysisUnitId" in value;
    isInstance = isInstance && "proportions" in value;

    return isInstance;
}

export function DesignSampleRequestFromJSON(json: any): DesignSampleRequest {
    return DesignSampleRequestFromJSONTyped(json, false);
}

export function DesignSampleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DesignSampleRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'method': !exists(json, 'method') ? undefined : json['method'],
        'bioYear': json['bio_year'],
        'surveyTypeId': json['survey_type_id'],
        'analysisUnitId': json['analysis_unit_id'],
        'managementUnitId': !exists(json, 'management_unit_id') ? undefined : json['management_unit_id'],
        'proportions': ((json['proportions'] as Array<any>).map(DesignSampleProportionItemFromJSON)),
        'designs': !exists(json, 'designs') ? undefined : ((json['designs'] as Array<any>).map(DesignSampleItemFromJSON)),
    };
}

export function DesignSampleRequestToJSON(value?: DesignSampleRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'method': value.method,
        'bio_year': value.bioYear,
        'survey_type_id': value.surveyTypeId,
        'analysis_unit_id': value.analysisUnitId,
        'management_unit_id': value.managementUnitId,
        'proportions': ((value.proportions as Array<any>).map(DesignSampleProportionItemToJSON)),
        'designs': value.designs === undefined ? undefined : ((value.designs as Array<any>).map(DesignSampleItemToJSON)),
    };
}

