/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for creating a covar record.
 * @export
 * @interface StoreCovarRequest
 */
export interface StoreCovarRequest {
    /**
     * 
     * @type {number}
     * @memberof StoreCovarRequest
     */
    modelId: number;
    /**
     * 
     * @type {string}
     * @memberof StoreCovarRequest
     */
    type: StoreCovarRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StoreCovarRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof StoreCovarRequest
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreCovarRequest
     */
    transformation?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StoreCovarRequest
     */
    sortOrder: number;
}


/**
 * @export
 */
export const StoreCovarRequestTypeEnum = {
    Intercept: 'Intercept',
    Continuous: 'Continuous',
    Discrete: 'Discrete',
    Categorical: 'Categorical'
} as const;
export type StoreCovarRequestTypeEnum = typeof StoreCovarRequestTypeEnum[keyof typeof StoreCovarRequestTypeEnum];


/**
 * Check if a given object implements the StoreCovarRequest interface.
 */
export function instanceOfStoreCovarRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "modelId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "sortOrder" in value;

    return isInstance;
}

export function StoreCovarRequestFromJSON(json: any): StoreCovarRequest {
    return StoreCovarRequestFromJSONTyped(json, false);
}

export function StoreCovarRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreCovarRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'modelId': json['model_id'],
        'type': json['type'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'transformation': !exists(json, 'transformation') ? undefined : json['transformation'],
        'sortOrder': json['sort_order'],
    };
}

export function StoreCovarRequestToJSON(value?: StoreCovarRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'model_id': value.modelId,
        'type': value.type,
        'name': value.name,
        'description': value.description,
        'transformation': value.transformation,
        'sort_order': value.sortOrder,
    };
}

