/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Covar } from './Covar';
import {
    CovarFromJSON,
    CovarFromJSONTyped,
    CovarToJSON,
} from './Covar';

/**
 * Count category resource object
 * @export
 * @interface CovarBin
 */
export interface CovarBin {
    /**
     * 
     * @type {number}
     * @memberof CovarBin
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof CovarBin
     */
    covarId: number;
    /**
     * 
     * @type {number}
     * @memberof CovarBin
     */
    min: number;
    /**
     * 
     * @type {number}
     * @memberof CovarBin
     */
    max: number;
    /**
     * 
     * @type {number}
     * @memberof CovarBin
     */
    value: number;
    /**
     * 
     * @type {Date}
     * @memberof CovarBin
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CovarBin
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {Covar}
     * @memberof CovarBin
     */
    covar?: Covar;
}

/**
 * Check if a given object implements the CovarBin interface.
 */
export function instanceOfCovarBin(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "covarId" in value;
    isInstance = isInstance && "min" in value;
    isInstance = isInstance && "max" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function CovarBinFromJSON(json: any): CovarBin {
    return CovarBinFromJSONTyped(json, false);
}

export function CovarBinFromJSONTyped(json: any, ignoreDiscriminator: boolean): CovarBin {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'covarId': json['covar_id'],
        'min': json['min'],
        'max': json['max'],
        'value': json['value'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'covar': !exists(json, 'covar') ? undefined : CovarFromJSON(json['covar']),
    };
}

export function CovarBinToJSON(value?: CovarBin | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'covar_id': value.covarId,
        'min': value.min,
        'max': value.max,
        'value': value.value,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'covar': CovarToJSON(value.covar),
    };
}

