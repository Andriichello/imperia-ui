/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Aircraft } from './Aircraft';
import {
    AircraftFromJSON,
    AircraftFromJSONTyped,
    AircraftToJSON,
} from './Aircraft';
import type { AnalysisUnit } from './AnalysisUnit';
import {
    AnalysisUnitFromJSON,
    AnalysisUnitFromJSONTyped,
    AnalysisUnitToJSON,
} from './AnalysisUnit';
import type { AnalysisUnitVersion } from './AnalysisUnitVersion';
import {
    AnalysisUnitVersionFromJSON,
    AnalysisUnitVersionFromJSONTyped,
    AnalysisUnitVersionToJSON,
} from './AnalysisUnitVersion';
import type { ManagementUnit } from './ManagementUnit';
import {
    ManagementUnitFromJSON,
    ManagementUnitFromJSONTyped,
    ManagementUnitToJSON,
} from './ManagementUnit';
import type { Parameter } from './Parameter';
import {
    ParameterFromJSON,
    ParameterFromJSONTyped,
    ParameterToJSON,
} from './Parameter';
import type { ProjectAgeClass } from './ProjectAgeClass';
import {
    ProjectAgeClassFromJSON,
    ProjectAgeClassFromJSONTyped,
    ProjectAgeClassToJSON,
} from './ProjectAgeClass';
import type { ProjectSpecies } from './ProjectSpecies';
import {
    ProjectSpeciesFromJSON,
    ProjectSpeciesFromJSONTyped,
    ProjectSpeciesToJSON,
} from './ProjectSpecies';
import type { Species } from './Species';
import {
    SpeciesFromJSON,
    SpeciesFromJSONTyped,
    SpeciesToJSON,
} from './Species';
import type { SurveyTypeForCountApi } from './SurveyTypeForCountApi';
import {
    SurveyTypeForCountApiFromJSON,
    SurveyTypeForCountApiFromJSONTyped,
    SurveyTypeForCountApiToJSON,
} from './SurveyTypeForCountApi';

/**
 * Lookup resource object
 * @export
 * @interface Lookup
 */
export interface Lookup {
    /**
     * 
     * @type {Array<string>}
     * @memberof Lookup
     */
    activities: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Lookup
     */
    vegetation: Array<string>;
    /**
     * 
     * @type {Array<Species>}
     * @memberof Lookup
     */
    species: Array<Species>;
    /**
     * 
     * @type {Array<ProjectSpecies>}
     * @memberof Lookup
     */
    projectSpecies: Array<ProjectSpecies>;
    /**
     * 
     * @type {Array<Aircraft>}
     * @memberof Lookup
     */
    aircraft: Array<Aircraft>;
    /**
     * 
     * @type {Array<ProjectAgeClass>}
     * @memberof Lookup
     */
    ageClasses: Array<ProjectAgeClass>;
    /**
     * 
     * @type {Array<SurveyTypeForCountApi>}
     * @memberof Lookup
     */
    surveyTypes: Array<SurveyTypeForCountApi>;
    /**
     * 
     * @type {Array<Parameter>}
     * @memberof Lookup
     */
    parameters: Array<Parameter>;
    /**
     * 
     * @type {Array<AnalysisUnitVersion>}
     * @memberof Lookup
     */
    analysisUnitVersions: Array<AnalysisUnitVersion>;
    /**
     * 
     * @type {Array<AnalysisUnit>}
     * @memberof Lookup
     */
    analysisUnits: Array<AnalysisUnit>;
    /**
     * 
     * @type {Array<ManagementUnit>}
     * @memberof Lookup
     */
    managementUnits: Array<ManagementUnit>;
}

/**
 * Check if a given object implements the Lookup interface.
 */
export function instanceOfLookup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "activities" in value;
    isInstance = isInstance && "vegetation" in value;
    isInstance = isInstance && "species" in value;
    isInstance = isInstance && "projectSpecies" in value;
    isInstance = isInstance && "aircraft" in value;
    isInstance = isInstance && "ageClasses" in value;
    isInstance = isInstance && "surveyTypes" in value;
    isInstance = isInstance && "parameters" in value;
    isInstance = isInstance && "analysisUnitVersions" in value;
    isInstance = isInstance && "analysisUnits" in value;
    isInstance = isInstance && "managementUnits" in value;

    return isInstance;
}

export function LookupFromJSON(json: any): Lookup {
    return LookupFromJSONTyped(json, false);
}

export function LookupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Lookup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activities': json['activities'],
        'vegetation': json['vegetation'],
        'species': ((json['species'] as Array<any>).map(SpeciesFromJSON)),
        'projectSpecies': ((json['projectSpecies'] as Array<any>).map(ProjectSpeciesFromJSON)),
        'aircraft': ((json['aircraft'] as Array<any>).map(AircraftFromJSON)),
        'ageClasses': ((json['ageClasses'] as Array<any>).map(ProjectAgeClassFromJSON)),
        'surveyTypes': ((json['surveyTypes'] as Array<any>).map(SurveyTypeForCountApiFromJSON)),
        'parameters': ((json['parameters'] as Array<any>).map(ParameterFromJSON)),
        'analysisUnitVersions': ((json['analysisUnitVersions'] as Array<any>).map(AnalysisUnitVersionFromJSON)),
        'analysisUnits': ((json['analysisUnits'] as Array<any>).map(AnalysisUnitFromJSON)),
        'managementUnits': ((json['managementUnits'] as Array<any>).map(ManagementUnitFromJSON)),
    };
}

export function LookupToJSON(value?: Lookup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activities': value.activities,
        'vegetation': value.vegetation,
        'species': ((value.species as Array<any>).map(SpeciesToJSON)),
        'projectSpecies': ((value.projectSpecies as Array<any>).map(ProjectSpeciesToJSON)),
        'aircraft': ((value.aircraft as Array<any>).map(AircraftToJSON)),
        'ageClasses': ((value.ageClasses as Array<any>).map(ProjectAgeClassToJSON)),
        'surveyTypes': ((value.surveyTypes as Array<any>).map(SurveyTypeForCountApiToJSON)),
        'parameters': ((value.parameters as Array<any>).map(ParameterToJSON)),
        'analysisUnitVersions': ((value.analysisUnitVersions as Array<any>).map(AnalysisUnitVersionToJSON)),
        'analysisUnits': ((value.analysisUnits as Array<any>).map(AnalysisUnitToJSON)),
        'managementUnits': ((value.managementUnits as Array<any>).map(ManagementUnitToJSON)),
    };
}

