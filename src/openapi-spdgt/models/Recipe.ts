/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Output } from './Output';
import {
    OutputFromJSON,
    OutputFromJSONTyped,
    OutputToJSON,
} from './Output';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
} from './Project';

/**
 * Recipe resource object
 * @export
 * @interface Recipe
 */
export interface Recipe {
    /**
     * 
     * @type {number}
     * @memberof Recipe
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Recipe
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof Recipe
     */
    projectId: number | null;
    /**
     * Coma-separated list of model ids or/and names.
     * @type {string}
     * @memberof Recipe
     */
    model: string | null;
    /**
     * Array of model ids or/and names.
     * @type {Array<string>}
     * @memberof Recipe
     */
    modelArray: Array<string> | null;
    /**
     * Coma-separated list of species ids or/and names.
     * @type {string}
     * @memberof Recipe
     */
    species: string;
    /**
     * Array of species ids or/and names.
     * @type {Array<string>}
     * @memberof Recipe
     */
    speciesArray: Array<string> | null;
    /**
     * Coma-separated list of survey type ids or/and names.
     * @type {string}
     * @memberof Recipe
     */
    surveyType: string | null;
    /**
     * Array of survey type ids or/and names.
     * @type {Array<string>}
     * @memberof Recipe
     */
    surveyTypeArray: Array<string> | null;
    /**
     * Coma-separated list of analysis unit ids or/and names.
     * @type {string}
     * @memberof Recipe
     */
    analysisUnit: string;
    /**
     * Array of analysis unit ids or/and names.
     * @type {Array<string>}
     * @memberof Recipe
     */
    analysisUnitArray: Array<string> | null;
    /**
     * Coma-separated list of management unit ids or/and names.
     * @type {string}
     * @memberof Recipe
     */
    managementUnit: string | null;
    /**
     * Array of management unit ids or/and names.
     * @type {Array<string>}
     * @memberof Recipe
     */
    managementUnitArray: Array<string> | null;
    /**
     * Coma-separated list of keywords.
     * @type {string}
     * @memberof Recipe
     */
    keywords: string;
    /**
     * Array of keywords.
     * @type {Array<string>}
     * @memberof Recipe
     */
    keywordsArray: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof Recipe
     */
    year: number;
    /**
     * Recipe's metadata.
     * @type {object}
     * @memberof Recipe
     */
    metadata: object;
    /**
     * 
     * @type {Date}
     * @memberof Recipe
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Recipe
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {Project}
     * @memberof Recipe
     */
    project?: Project;
    /**
     * 
     * @type {Array<Output>}
     * @memberof Recipe
     */
    outputs?: Array<Output>;
}

/**
 * Check if a given object implements the Recipe interface.
 */
export function instanceOfRecipe(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "model" in value;
    isInstance = isInstance && "modelArray" in value;
    isInstance = isInstance && "species" in value;
    isInstance = isInstance && "speciesArray" in value;
    isInstance = isInstance && "surveyType" in value;
    isInstance = isInstance && "surveyTypeArray" in value;
    isInstance = isInstance && "analysisUnit" in value;
    isInstance = isInstance && "analysisUnitArray" in value;
    isInstance = isInstance && "managementUnit" in value;
    isInstance = isInstance && "managementUnitArray" in value;
    isInstance = isInstance && "keywords" in value;
    isInstance = isInstance && "keywordsArray" in value;
    isInstance = isInstance && "year" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function RecipeFromJSON(json: any): Recipe {
    return RecipeFromJSONTyped(json, false);
}

export function RecipeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Recipe {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'projectId': json['project_id'],
        'model': json['model'],
        'modelArray': json['model_array'],
        'species': json['species'],
        'speciesArray': json['species_array'],
        'surveyType': json['survey_type'],
        'surveyTypeArray': json['survey_type_array'],
        'analysisUnit': json['analysis_unit'],
        'analysisUnitArray': json['analysis_unit_array'],
        'managementUnit': json['management_unit'],
        'managementUnitArray': json['management_unit_array'],
        'keywords': json['keywords'],
        'keywordsArray': json['keywords_array'],
        'year': json['year'],
        'metadata': json['metadata'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'project': !exists(json, 'project') ? undefined : ProjectFromJSON(json['project']),
        'outputs': !exists(json, 'outputs') ? undefined : ((json['outputs'] as Array<any>).map(OutputFromJSON)),
    };
}

export function RecipeToJSON(value?: Recipe | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'project_id': value.projectId,
        'model': value.model,
        'model_array': value.modelArray,
        'species': value.species,
        'species_array': value.speciesArray,
        'survey_type': value.surveyType,
        'survey_type_array': value.surveyTypeArray,
        'analysis_unit': value.analysisUnit,
        'analysis_unit_array': value.analysisUnitArray,
        'management_unit': value.managementUnit,
        'management_unit_array': value.managementUnitArray,
        'keywords': value.keywords,
        'keywords_array': value.keywordsArray,
        'year': value.year,
        'metadata': value.metadata,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'project': ProjectToJSON(value.project),
        'outputs': value.outputs === undefined ? undefined : ((value.outputs as Array<any>).map(OutputToJSON)),
    };
}

