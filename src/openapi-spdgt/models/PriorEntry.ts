/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AnalysisUnit } from './AnalysisUnit';
import {
    AnalysisUnitFromJSON,
    AnalysisUnitFromJSONTyped,
    AnalysisUnitToJSON,
} from './AnalysisUnit';
import type { ManagementUnit } from './ManagementUnit';
import {
    ManagementUnitFromJSON,
    ManagementUnitFromJSONTyped,
    ManagementUnitToJSON,
} from './ManagementUnit';
import type { Output } from './Output';
import {
    OutputFromJSON,
    OutputFromJSONTyped,
    OutputToJSON,
} from './Output';
import type { Parameter } from './Parameter';
import {
    ParameterFromJSON,
    ParameterFromJSONTyped,
    ParameterToJSON,
} from './Parameter';
import type { Species } from './Species';
import {
    SpeciesFromJSON,
    SpeciesFromJSONTyped,
    SpeciesToJSON,
} from './Species';

/**
 * Prior entry resource object
 * @export
 * @interface PriorEntry
 */
export interface PriorEntry {
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    outputId: number;
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    speciesId: number;
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    analysisUnitId: number;
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    managementUnitId: number | null;
    /**
     * 
     * @type {string}
     * @memberof PriorEntry
     */
    state: string | null;
    /**
     * 
     * @type {string}
     * @memberof PriorEntry
     */
    sex: PriorEntrySexEnum;
    /**
     * 
     * @type {string}
     * @memberof PriorEntry
     */
    age: PriorEntryAgeEnum;
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    parameterId: number | null;
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    mean: number;
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    linkMean: number | null;
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    se: number;
    /**
     * 
     * @type {number}
     * @memberof PriorEntry
     */
    linkSe: number | null;
    /**
     * 
     * @type {string}
     * @memberof PriorEntry
     */
    source: string | null;
    /**
     * 
     * @type {Date}
     * @memberof PriorEntry
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof PriorEntry
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {Output}
     * @memberof PriorEntry
     */
    output?: Output;
    /**
     * 
     * @type {Species}
     * @memberof PriorEntry
     */
    species?: Species;
    /**
     * 
     * @type {AnalysisUnit}
     * @memberof PriorEntry
     */
    analysisUnit?: AnalysisUnit;
    /**
     * 
     * @type {ManagementUnit}
     * @memberof PriorEntry
     */
    managementUnit?: ManagementUnit;
    /**
     * 
     * @type {Parameter}
     * @memberof PriorEntry
     */
    parameter?: Parameter;
}


/**
 * @export
 */
export const PriorEntrySexEnum = {
    Male: 'Male',
    Female: 'Female'
} as const;
export type PriorEntrySexEnum = typeof PriorEntrySexEnum[keyof typeof PriorEntrySexEnum];

/**
 * @export
 */
export const PriorEntryAgeEnum = {
    YoungOfYear: 'Young of Year',
    Juvenile: 'Juvenile',
    Subadult: 'Subadult',
    Adult: 'Adult'
} as const;
export type PriorEntryAgeEnum = typeof PriorEntryAgeEnum[keyof typeof PriorEntryAgeEnum];


/**
 * Check if a given object implements the PriorEntry interface.
 */
export function instanceOfPriorEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "outputId" in value;
    isInstance = isInstance && "speciesId" in value;
    isInstance = isInstance && "analysisUnitId" in value;
    isInstance = isInstance && "managementUnitId" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "sex" in value;
    isInstance = isInstance && "age" in value;
    isInstance = isInstance && "parameterId" in value;
    isInstance = isInstance && "mean" in value;
    isInstance = isInstance && "linkMean" in value;
    isInstance = isInstance && "se" in value;
    isInstance = isInstance && "linkSe" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function PriorEntryFromJSON(json: any): PriorEntry {
    return PriorEntryFromJSONTyped(json, false);
}

export function PriorEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): PriorEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'outputId': json['output_id'],
        'speciesId': json['species_id'],
        'analysisUnitId': json['analysis_unit_id'],
        'managementUnitId': json['management_unit_id'],
        'state': json['state'],
        'sex': json['sex'],
        'age': json['age'],
        'parameterId': json['parameter_id'],
        'mean': json['mean'],
        'linkMean': json['link_mean'],
        'se': json['se'],
        'linkSe': json['link_se'],
        'source': json['source'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'output': !exists(json, 'output') ? undefined : OutputFromJSON(json['output']),
        'species': !exists(json, 'species') ? undefined : SpeciesFromJSON(json['species']),
        'analysisUnit': !exists(json, 'analysisUnit') ? undefined : AnalysisUnitFromJSON(json['analysisUnit']),
        'managementUnit': !exists(json, 'managementUnit') ? undefined : ManagementUnitFromJSON(json['managementUnit']),
        'parameter': !exists(json, 'parameter') ? undefined : ParameterFromJSON(json['parameter']),
    };
}

export function PriorEntryToJSON(value?: PriorEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'output_id': value.outputId,
        'species_id': value.speciesId,
        'analysis_unit_id': value.analysisUnitId,
        'management_unit_id': value.managementUnitId,
        'state': value.state,
        'sex': value.sex,
        'age': value.age,
        'parameter_id': value.parameterId,
        'mean': value.mean,
        'link_mean': value.linkMean,
        'se': value.se,
        'link_se': value.linkSe,
        'source': value.source,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'output': OutputToJSON(value.output),
        'species': SpeciesToJSON(value.species),
        'analysisUnit': AnalysisUnitToJSON(value.analysisUnit),
        'managementUnit': ManagementUnitToJSON(value.managementUnit),
        'parameter': ParameterToJSON(value.parameter),
    };
}

