/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for creating a recipe record.
 * @export
 * @interface StoreRecipeRequest
 */
export interface StoreRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof StoreRecipeRequest
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof StoreRecipeRequest
     */
    projectId?: number | null;
    /**
     * Coma-separated list of model ids or/and names.
     * @type {string}
     * @memberof StoreRecipeRequest
     */
    model?: string | null;
    /**
     * Coma-separated list of species ids or/and names.
     * @type {string}
     * @memberof StoreRecipeRequest
     */
    species: string;
    /**
     * Coma-separated list of survey type ids or/and names.
     * @type {string}
     * @memberof StoreRecipeRequest
     */
    surveyType?: string | null;
    /**
     * Coma-separated list of analysis unit ids or/and names.
     * @type {string}
     * @memberof StoreRecipeRequest
     */
    analysisUnit: string;
    /**
     * Coma-separated list of management unit ids or/and names.
     * @type {string}
     * @memberof StoreRecipeRequest
     */
    managementUnit?: string | null;
    /**
     * Coma-separated list of keywords.
     * @type {string}
     * @memberof StoreRecipeRequest
     */
    keywords?: string;
    /**
     * 
     * @type {number}
     * @memberof StoreRecipeRequest
     */
    year: number;
    /**
     * Recipe's metadata.
     * @type {object}
     * @memberof StoreRecipeRequest
     */
    metadata?: object;
}

/**
 * Check if a given object implements the StoreRecipeRequest interface.
 */
export function instanceOfStoreRecipeRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "species" in value;
    isInstance = isInstance && "analysisUnit" in value;
    isInstance = isInstance && "year" in value;

    return isInstance;
}

export function StoreRecipeRequestFromJSON(json: any): StoreRecipeRequest {
    return StoreRecipeRequestFromJSONTyped(json, false);
}

export function StoreRecipeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreRecipeRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'projectId': !exists(json, 'project_id') ? undefined : json['project_id'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'species': json['species'],
        'surveyType': !exists(json, 'survey_type') ? undefined : json['survey_type'],
        'analysisUnit': json['analysis_unit'],
        'managementUnit': !exists(json, 'management_unit') ? undefined : json['management_unit'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'year': json['year'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function StoreRecipeRequestToJSON(value?: StoreRecipeRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'project_id': value.projectId,
        'model': value.model,
        'species': value.species,
        'survey_type': value.surveyType,
        'analysis_unit': value.analysisUnit,
        'management_unit': value.managementUnit,
        'keywords': value.keywords,
        'year': value.year,
        'metadata': value.metadata,
    };
}

