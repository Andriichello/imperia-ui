/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AerialSurvey } from './AerialSurvey';
import {
    AerialSurveyFromJSON,
    AerialSurveyFromJSONTyped,
    AerialSurveyToJSON,
} from './AerialSurvey';
import type { AerialSurveyEntryMetadata } from './AerialSurveyEntryMetadata';
import {
    AerialSurveyEntryMetadataFromJSON,
    AerialSurveyEntryMetadataFromJSONTyped,
    AerialSurveyEntryMetadataToJSON,
} from './AerialSurveyEntryMetadata';
import type { Species } from './Species';
import {
    SpeciesFromJSON,
    SpeciesFromJSONTyped,
    SpeciesToJSON,
} from './Species';
import type { Subunit } from './Subunit';
import {
    SubunitFromJSON,
    SubunitFromJSONTyped,
    SubunitToJSON,
} from './Subunit';

/**
 * Aerial survey entry resource object
 * @export
 * @interface AerialSurveyEntry
 */
export interface AerialSurveyEntry {
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    aerialSurveyId: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    subunitId: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    speciesId: number;
    /**
     * 
     * @type {boolean}
     * @memberof AerialSurveyEntry
     */
    isTargetSpeceis?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    males: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    females: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    youngs: number;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    unclass: number;
    /**
     * 
     * @type {object}
     * @memberof AerialSurveyEntry
     */
    mappings: object | null;
    /**
     * 
     * @type {AerialSurveyEntryMetadata}
     * @memberof AerialSurveyEntry
     */
    metadata: AerialSurveyEntryMetadata;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntry
     */
    activity: string | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntry
     */
    screenType: string | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntry
     */
    vegetationType: string | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    snowPercentage: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    screenPercentage: number | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntry
     */
    waypoint: string | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    latitude: number | null;
    /**
     * 
     * @type {number}
     * @memberof AerialSurveyEntry
     */
    longitude: number | null;
    /**
     * 
     * @type {Date}
     * @memberof AerialSurveyEntry
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof AerialSurveyEntry
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntry
     */
    polygon?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AerialSurveyEntry
     */
    geography?: string | null;
    /**
     * 
     * @type {AerialSurvey}
     * @memberof AerialSurveyEntry
     */
    aerialSurvey?: AerialSurvey;
    /**
     * 
     * @type {Subunit}
     * @memberof AerialSurveyEntry
     */
    subunit?: Subunit;
    /**
     * 
     * @type {Species}
     * @memberof AerialSurveyEntry
     */
    species?: Species;
}

/**
 * Check if a given object implements the AerialSurveyEntry interface.
 */
export function instanceOfAerialSurveyEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "aerialSurveyId" in value;
    isInstance = isInstance && "subunitId" in value;
    isInstance = isInstance && "speciesId" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "males" in value;
    isInstance = isInstance && "females" in value;
    isInstance = isInstance && "youngs" in value;
    isInstance = isInstance && "unclass" in value;
    isInstance = isInstance && "mappings" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "activity" in value;
    isInstance = isInstance && "screenType" in value;
    isInstance = isInstance && "vegetationType" in value;
    isInstance = isInstance && "snowPercentage" in value;
    isInstance = isInstance && "screenPercentage" in value;
    isInstance = isInstance && "waypoint" in value;
    isInstance = isInstance && "latitude" in value;
    isInstance = isInstance && "longitude" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function AerialSurveyEntryFromJSON(json: any): AerialSurveyEntry {
    return AerialSurveyEntryFromJSONTyped(json, false);
}

export function AerialSurveyEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): AerialSurveyEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'aerialSurveyId': json['aerial_survey_id'],
        'subunitId': json['subunit_id'],
        'speciesId': json['species_id'],
        'isTargetSpeceis': !exists(json, 'is_target_speceis') ? undefined : json['is_target_speceis'],
        'total': json['total'],
        'males': json['males'],
        'females': json['females'],
        'youngs': json['youngs'],
        'unclass': json['unclass'],
        'mappings': json['mappings'],
        'metadata': AerialSurveyEntryMetadataFromJSON(json['metadata']),
        'activity': json['activity'],
        'screenType': json['screen_type'],
        'vegetationType': json['vegetation_type'],
        'snowPercentage': json['snow_percentage'],
        'screenPercentage': json['screen_percentage'],
        'waypoint': json['waypoint'],
        'latitude': json['latitude'],
        'longitude': json['longitude'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'polygon': !exists(json, 'polygon') ? undefined : json['polygon'],
        'geography': !exists(json, 'geography') ? undefined : json['geography'],
        'aerialSurvey': !exists(json, 'aerialSurvey') ? undefined : AerialSurveyFromJSON(json['aerialSurvey']),
        'subunit': !exists(json, 'subunit') ? undefined : SubunitFromJSON(json['subunit']),
        'species': !exists(json, 'species') ? undefined : SpeciesFromJSON(json['species']),
    };
}

export function AerialSurveyEntryToJSON(value?: AerialSurveyEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'aerial_survey_id': value.aerialSurveyId,
        'subunit_id': value.subunitId,
        'species_id': value.speciesId,
        'is_target_speceis': value.isTargetSpeceis,
        'total': value.total,
        'males': value.males,
        'females': value.females,
        'youngs': value.youngs,
        'unclass': value.unclass,
        'mappings': value.mappings,
        'metadata': AerialSurveyEntryMetadataToJSON(value.metadata),
        'activity': value.activity,
        'screen_type': value.screenType,
        'vegetation_type': value.vegetationType,
        'snow_percentage': value.snowPercentage,
        'screen_percentage': value.screenPercentage,
        'waypoint': value.waypoint,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'polygon': value.polygon,
        'geography': value.geography,
        'aerialSurvey': AerialSurveyToJSON(value.aerialSurvey),
        'subunit': SubunitToJSON(value.subunit),
        'species': SpeciesToJSON(value.species),
    };
}

