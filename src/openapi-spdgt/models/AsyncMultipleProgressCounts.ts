/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Async create or update multiple response's counts.
 * @export
 * @interface AsyncMultipleProgressCounts
 */
export interface AsyncMultipleProgressCounts {
    /**
     * 
     * @type {number}
     * @memberof AsyncMultipleProgressCounts
     */
    processed: number;
    /**
     * 
     * @type {number}
     * @memberof AsyncMultipleProgressCounts
     */
    remaining: number;
    /**
     * 
     * @type {number}
     * @memberof AsyncMultipleProgressCounts
     */
    failed: number;
}

/**
 * Check if a given object implements the AsyncMultipleProgressCounts interface.
 */
export function instanceOfAsyncMultipleProgressCounts(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "processed" in value;
    isInstance = isInstance && "remaining" in value;
    isInstance = isInstance && "failed" in value;

    return isInstance;
}

export function AsyncMultipleProgressCountsFromJSON(json: any): AsyncMultipleProgressCounts {
    return AsyncMultipleProgressCountsFromJSONTyped(json, false);
}

export function AsyncMultipleProgressCountsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AsyncMultipleProgressCounts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'processed': json['processed'],
        'remaining': json['remaining'],
        'failed': json['failed'],
    };
}

export function AsyncMultipleProgressCountsToJSON(value?: AsyncMultipleProgressCounts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'processed': value.processed,
        'remaining': value.remaining,
        'failed': value.failed,
    };
}

