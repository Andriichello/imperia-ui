/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for updating a management unit record.
 *            `number`, `analysis_unit_id`, `region_id`, `project_id` and `species_id`
 *            combination must be unique within the
 *            `location.management_units` table.
 * @export
 * @interface UpdateManagementUnitRequest
 */
export interface UpdateManagementUnitRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateManagementUnitRequest
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateManagementUnitRequest
     */
    analysisUnitId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateManagementUnitRequest
     */
    regionId?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateManagementUnitRequest
     */
    projectId?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateManagementUnitRequest
     */
    speciesId?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateManagementUnitRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateManagementUnitRequest
     */
    abbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateManagementUnitRequest
     */
    number?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateManagementUnitRequest
     */
    sortOrder?: number;
}

/**
 * Check if a given object implements the UpdateManagementUnitRequest interface.
 */
export function instanceOfUpdateManagementUnitRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UpdateManagementUnitRequestFromJSON(json: any): UpdateManagementUnitRequest {
    return UpdateManagementUnitRequestFromJSONTyped(json, false);
}

export function UpdateManagementUnitRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateManagementUnitRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'analysisUnitId': !exists(json, 'analysis_unit_id') ? undefined : json['analysis_unit_id'],
        'regionId': !exists(json, 'region_id') ? undefined : json['region_id'],
        'projectId': !exists(json, 'project_id') ? undefined : json['project_id'],
        'speciesId': !exists(json, 'species_id') ? undefined : json['species_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'abbreviation': !exists(json, 'abbreviation') ? undefined : json['abbreviation'],
        'number': !exists(json, 'number') ? undefined : json['number'],
        'sortOrder': !exists(json, 'sort_order') ? undefined : json['sort_order'],
    };
}

export function UpdateManagementUnitRequestToJSON(value?: UpdateManagementUnitRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'analysis_unit_id': value.analysisUnitId,
        'region_id': value.regionId,
        'project_id': value.projectId,
        'species_id': value.speciesId,
        'name': value.name,
        'abbreviation': value.abbreviation,
        'number': value.number,
        'sort_order': value.sortOrder,
    };
}

