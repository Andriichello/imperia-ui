/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ColumnMapping } from './ColumnMapping';
import {
    ColumnMappingFromJSON,
    ColumnMappingFromJSONTyped,
    ColumnMappingToJSON,
} from './ColumnMapping';
import type { CountCategory } from './CountCategory';
import {
    CountCategoryFromJSON,
    CountCategoryFromJSONTyped,
    CountCategoryToJSON,
} from './CountCategory';
import type { Model } from './Model';
import {
    ModelFromJSON,
    ModelFromJSONTyped,
    ModelToJSON,
} from './Model';
import type { ModelSurveyTypePivot } from './ModelSurveyTypePivot';
import {
    ModelSurveyTypePivotFromJSON,
    ModelSurveyTypePivotFromJSONTyped,
    ModelSurveyTypePivotToJSON,
} from './ModelSurveyTypePivot';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
} from './Project';
import type { Species } from './Species';
import {
    SpeciesFromJSON,
    SpeciesFromJSONTyped,
    SpeciesToJSON,
} from './Species';

/**
 * Survey type resource object
 * @export
 * @interface SurveyTypeForCountApi
 */
export interface SurveyTypeForCountApi {
    /**
     * 
     * @type {number}
     * @memberof SurveyTypeForCountApi
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof SurveyTypeForCountApi
     */
    projectId: number;
    /**
     * 
     * @type {number}
     * @memberof SurveyTypeForCountApi
     */
    speciesId: number;
    /**
     * 
     * @type {string}
     * @memberof SurveyTypeForCountApi
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof SurveyTypeForCountApi
     */
    cutoffDay: number;
    /**
     * 
     * @type {number}
     * @memberof SurveyTypeForCountApi
     */
    cutoffMonth: number;
    /**
     * 
     * @type {ModelSurveyTypePivot}
     * @memberof SurveyTypeForCountApi
     */
    modelPivot?: ModelSurveyTypePivot;
    /**
     * 
     * @type {Project}
     * @memberof SurveyTypeForCountApi
     */
    project?: Project;
    /**
     * 
     * @type {Species}
     * @memberof SurveyTypeForCountApi
     */
    species?: Species;
    /**
     * 
     * @type {Array<ColumnMapping>}
     * @memberof SurveyTypeForCountApi
     */
    columnMappings?: Array<ColumnMapping>;
    /**
     * 
     * @type {Array<CountCategory>}
     * @memberof SurveyTypeForCountApi
     */
    countCategory?: Array<CountCategory>;
    /**
     * 
     * @type {Array<Model>}
     * @memberof SurveyTypeForCountApi
     */
    models?: Array<Model>;
}

/**
 * Check if a given object implements the SurveyTypeForCountApi interface.
 */
export function instanceOfSurveyTypeForCountApi(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "speciesId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "cutoffDay" in value;
    isInstance = isInstance && "cutoffMonth" in value;

    return isInstance;
}

export function SurveyTypeForCountApiFromJSON(json: any): SurveyTypeForCountApi {
    return SurveyTypeForCountApiFromJSONTyped(json, false);
}

export function SurveyTypeForCountApiFromJSONTyped(json: any, ignoreDiscriminator: boolean): SurveyTypeForCountApi {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'projectId': json['project_id'],
        'speciesId': json['species_id'],
        'name': json['name'],
        'cutoffDay': json['cutoff_day'],
        'cutoffMonth': json['cutoff_month'],
        'modelPivot': !exists(json, 'modelPivot') ? undefined : ModelSurveyTypePivotFromJSON(json['modelPivot']),
        'project': !exists(json, 'project') ? undefined : ProjectFromJSON(json['project']),
        'species': !exists(json, 'species') ? undefined : SpeciesFromJSON(json['species']),
        'columnMappings': !exists(json, 'columnMappings') ? undefined : ((json['columnMappings'] as Array<any>).map(ColumnMappingFromJSON)),
        'countCategory': !exists(json, 'countCategory') ? undefined : ((json['countCategory'] as Array<any>).map(CountCategoryFromJSON)),
        'models': !exists(json, 'models') ? undefined : ((json['models'] as Array<any>).map(ModelFromJSON)),
    };
}

export function SurveyTypeForCountApiToJSON(value?: SurveyTypeForCountApi | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'project_id': value.projectId,
        'species_id': value.speciesId,
        'name': value.name,
        'cutoff_day': value.cutoffDay,
        'cutoff_month': value.cutoffMonth,
        'modelPivot': ModelSurveyTypePivotToJSON(value.modelPivot),
        'project': ProjectToJSON(value.project),
        'species': SpeciesToJSON(value.species),
        'columnMappings': value.columnMappings === undefined ? undefined : ((value.columnMappings as Array<any>).map(ColumnMappingToJSON)),
        'countCategory': value.countCategory === undefined ? undefined : ((value.countCategory as Array<any>).map(CountCategoryToJSON)),
        'models': value.models === undefined ? undefined : ((value.models as Array<any>).map(ModelToJSON)),
    };
}

