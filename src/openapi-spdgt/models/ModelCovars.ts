/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Model covars resource object
 * @export
 * @interface ModelCovars
 */
export interface ModelCovars {
    /**
     * 
     * @type {number}
     * @memberof ModelCovars
     */
    modelId: number;
    /**
     * 
     * @type {string}
     * @memberof ModelCovars
     */
    covarName: string;
    /**
     * 
     * @type {string}
     * @memberof ModelCovars
     */
    covarType: string;
    /**
     * 
     * @type {number}
     * @memberof ModelCovars
     */
    covarOrder: number;
    /**
     * 
     * @type {string}
     * @memberof ModelCovars
     */
    covarDefinition: string | null;
    /**
     * 
     * @type {number}
     * @memberof ModelCovars
     */
    covarValue: number | null;
    /**
     * 
     * @type {number}
     * @memberof ModelCovars
     */
    betaValue: number;
}

/**
 * Check if a given object implements the ModelCovars interface.
 */
export function instanceOfModelCovars(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "modelId" in value;
    isInstance = isInstance && "covarName" in value;
    isInstance = isInstance && "covarType" in value;
    isInstance = isInstance && "covarOrder" in value;
    isInstance = isInstance && "covarDefinition" in value;
    isInstance = isInstance && "covarValue" in value;
    isInstance = isInstance && "betaValue" in value;

    return isInstance;
}

export function ModelCovarsFromJSON(json: any): ModelCovars {
    return ModelCovarsFromJSONTyped(json, false);
}

export function ModelCovarsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelCovars {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'modelId': json['model_id'],
        'covarName': json['covar_name'],
        'covarType': json['covar_type'],
        'covarOrder': json['covar_order'],
        'covarDefinition': json['covar_definition'],
        'covarValue': json['covar_value'],
        'betaValue': json['beta_value'],
    };
}

export function ModelCovarsToJSON(value?: ModelCovars | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'model_id': value.modelId,
        'covar_name': value.covarName,
        'covar_type': value.covarType,
        'covar_order': value.covarOrder,
        'covar_definition': value.covarDefinition,
        'covar_value': value.covarValue,
        'beta_value': value.betaValue,
    };
}

