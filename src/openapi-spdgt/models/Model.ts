/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AerialSurvey } from './AerialSurvey';
import {
    AerialSurveyFromJSON,
    AerialSurveyFromJSONTyped,
    AerialSurveyToJSON,
} from './AerialSurvey';
import type { Covar } from './Covar';
import {
    CovarFromJSON,
    CovarFromJSONTyped,
    CovarToJSON,
} from './Covar';
import type { ModelAerialSurveyPivot } from './ModelAerialSurveyPivot';
import {
    ModelAerialSurveyPivotFromJSON,
    ModelAerialSurveyPivotFromJSONTyped,
    ModelAerialSurveyPivotToJSON,
} from './ModelAerialSurveyPivot';
import type { ModelSurveyTypePivot } from './ModelSurveyTypePivot';
import {
    ModelSurveyTypePivotFromJSON,
    ModelSurveyTypePivotFromJSONTyped,
    ModelSurveyTypePivotToJSON,
} from './ModelSurveyTypePivot';
import type { SurveyTypeForCountApi } from './SurveyTypeForCountApi';
import {
    SurveyTypeForCountApiFromJSON,
    SurveyTypeForCountApiFromJSONTyped,
    SurveyTypeForCountApiToJSON,
} from './SurveyTypeForCountApi';

/**
 * Model resource object
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {number}
     * @memberof Model
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    approach: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    procSuffix: string | null;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    definition: string | null;
    /**
     * Model's metadata.
     * @type {object}
     * @memberof Model
     */
    metadata: object;
    /**
     * 
     * @type {Date}
     * @memberof Model
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Model
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {ModelSurveyTypePivot}
     * @memberof Model
     */
    surveyTypePivot?: ModelSurveyTypePivot;
    /**
     * 
     * @type {ModelAerialSurveyPivot}
     * @memberof Model
     */
    aerialSurveyPivot?: ModelAerialSurveyPivot;
    /**
     * 
     * @type {Array<string>}
     * @memberof Model
     */
    availableActivities?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Model
     */
    availableVegetation?: Array<string>;
    /**
     * 
     * @type {Array<Covar>}
     * @memberof Model
     */
    covars?: Array<Covar>;
    /**
     * 
     * @type {Array<SurveyTypeForCountApi>}
     * @memberof Model
     */
    surveyTypes?: Array<SurveyTypeForCountApi>;
    /**
     * 
     * @type {Array<AerialSurvey>}
     * @memberof Model
     */
    aerialSurveys?: Array<AerialSurvey>;
}

/**
 * Check if a given object implements the Model interface.
 */
export function instanceOfModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "approach" in value;
    isInstance = isInstance && "procSuffix" in value;
    isInstance = isInstance && "definition" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function ModelFromJSON(json: any): Model {
    return ModelFromJSONTyped(json, false);
}

export function ModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Model {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'name': json['name'],
        'approach': json['approach'],
        'procSuffix': json['proc_suffix'],
        'definition': json['definition'],
        'metadata': json['metadata'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'surveyTypePivot': !exists(json, 'surveyTypePivot') ? undefined : ModelSurveyTypePivotFromJSON(json['surveyTypePivot']),
        'aerialSurveyPivot': !exists(json, 'aerialSurveyPivot') ? undefined : ModelAerialSurveyPivotFromJSON(json['aerialSurveyPivot']),
        'availableActivities': !exists(json, 'available_activities') ? undefined : json['available_activities'],
        'availableVegetation': !exists(json, 'available_vegetation') ? undefined : json['available_vegetation'],
        'covars': !exists(json, 'covars') ? undefined : ((json['covars'] as Array<any>).map(CovarFromJSON)),
        'surveyTypes': !exists(json, 'surveyTypes') ? undefined : ((json['surveyTypes'] as Array<any>).map(SurveyTypeForCountApiFromJSON)),
        'aerialSurveys': !exists(json, 'aerialSurveys') ? undefined : ((json['aerialSurveys'] as Array<any>).map(AerialSurveyFromJSON)),
    };
}

export function ModelToJSON(value?: Model | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'name': value.name,
        'approach': value.approach,
        'proc_suffix': value.procSuffix,
        'definition': value.definition,
        'metadata': value.metadata,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'surveyTypePivot': ModelSurveyTypePivotToJSON(value.surveyTypePivot),
        'aerialSurveyPivot': ModelAerialSurveyPivotToJSON(value.aerialSurveyPivot),
        'available_activities': value.availableActivities,
        'available_vegetation': value.availableVegetation,
        'covars': value.covars === undefined ? undefined : ((value.covars as Array<any>).map(CovarToJSON)),
        'surveyTypes': value.surveyTypes === undefined ? undefined : ((value.surveyTypes as Array<any>).map(SurveyTypeForCountApiToJSON)),
        'aerialSurveys': value.aerialSurveys === undefined ? undefined : ((value.aerialSurveys as Array<any>).map(AerialSurveyToJSON)),
    };
}

