/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SurveyTypeForCountApi } from './SurveyTypeForCountApi';
import {
    SurveyTypeForCountApiFromJSON,
    SurveyTypeForCountApiFromJSONTyped,
    SurveyTypeForCountApiToJSON,
} from './SurveyTypeForCountApi';

/**
 * Count category resource object
 * @export
 * @interface CountCategory
 */
export interface CountCategory {
    /**
     * 
     * @type {number}
     * @memberof CountCategory
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof CountCategory
     */
    surveyTypeId: number;
    /**
     * 
     * @type {string}
     * @memberof CountCategory
     */
    abbreviation: string | null;
    /**
     * 
     * @type {string}
     * @memberof CountCategory
     */
    name: string | null;
    /**
     * 
     * @type {string}
     * @memberof CountCategory
     */
    ageClass: string | null;
    /**
     * 
     * @type {string}
     * @memberof CountCategory
     */
    sex: string | null;
    /**
     * 
     * @type {Date}
     * @memberof CountCategory
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CountCategory
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {SurveyTypeForCountApi}
     * @memberof CountCategory
     */
    surveyType?: SurveyTypeForCountApi;
}

/**
 * Check if a given object implements the CountCategory interface.
 */
export function instanceOfCountCategory(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "surveyTypeId" in value;
    isInstance = isInstance && "abbreviation" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ageClass" in value;
    isInstance = isInstance && "sex" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function CountCategoryFromJSON(json: any): CountCategory {
    return CountCategoryFromJSONTyped(json, false);
}

export function CountCategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): CountCategory {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'surveyTypeId': json['survey_type_id'],
        'abbreviation': json['abbreviation'],
        'name': json['name'],
        'ageClass': json['age_class'],
        'sex': json['sex'],
        'createdAt': (json['created_at'] === null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] === null ? null : new Date(json['updated_at'])),
        'surveyType': !exists(json, 'surveyType') ? undefined : SurveyTypeForCountApiFromJSON(json['surveyType']),
    };
}

export function CountCategoryToJSON(value?: CountCategory | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'survey_type_id': value.surveyTypeId,
        'abbreviation': value.abbreviation,
        'name': value.name,
        'age_class': value.ageClass,
        'sex': value.sex,
        'created_at': (value.createdAt === null ? null : value.createdAt.toISOString()),
        'updated_at': (value.updatedAt === null ? null : value.updatedAt.toISOString()),
        'surveyType': SurveyTypeForCountApiToJSON(value.surveyType),
    };
}

