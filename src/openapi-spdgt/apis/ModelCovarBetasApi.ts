/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexCovarBetasResponse,
  ShowCovarBetaResponse,
  StoreCovarBetaRequest,
  StoreCovarBetaResponse,
  StoreMultipleCovarBetas200Response,
  StoreMultipleCovarBetasRequest,
  UpdateCovarBetaRequest,
  UpdateCovarBetaResponse,
  UpdateMultipleCovarBetas200Response,
  UpdateMultipleCovarBetasRequest,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexCovarBetasResponseFromJSON,
    IndexCovarBetasResponseToJSON,
    ShowCovarBetaResponseFromJSON,
    ShowCovarBetaResponseToJSON,
    StoreCovarBetaRequestFromJSON,
    StoreCovarBetaRequestToJSON,
    StoreCovarBetaResponseFromJSON,
    StoreCovarBetaResponseToJSON,
    StoreMultipleCovarBetas200ResponseFromJSON,
    StoreMultipleCovarBetas200ResponseToJSON,
    StoreMultipleCovarBetasRequestFromJSON,
    StoreMultipleCovarBetasRequestToJSON,
    UpdateCovarBetaRequestFromJSON,
    UpdateCovarBetaRequestToJSON,
    UpdateCovarBetaResponseFromJSON,
    UpdateCovarBetaResponseToJSON,
    UpdateMultipleCovarBetas200ResponseFromJSON,
    UpdateMultipleCovarBetas200ResponseToJSON,
    UpdateMultipleCovarBetasRequestFromJSON,
    UpdateMultipleCovarBetasRequestToJSON,
} from '../models';

export interface DestroyCovarBetaRequest {
    id: number;
}

export interface ExportCovarBetasRequest {
    format: ExportCovarBetasFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterCovarId?: string;
    filterModelId?: string;
    filterSurveyTypeId?: string;
    filterCovarValue?: string;
    filterBetaValue?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexCovarBetasRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterCovarId?: string;
    filterModelId?: string;
    filterSurveyTypeId?: string;
    filterCovarValue?: string;
    filterBetaValue?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowCovarBetaRequest {
    id: number;
    includes?: string;
}

export interface StoreCovarBetaOperationRequest {
    storeCovarBetaRequest: StoreCovarBetaRequest;
}

export interface StoreMultipleCovarBetasOperationRequest {
    storeMultipleCovarBetasRequest: StoreMultipleCovarBetasRequest;
}

export interface UpdateCovarBetaOperationRequest {
    id: number;
    updateCovarBetaRequest: UpdateCovarBetaRequest;
}

export interface UpdateMultipleCovarBetasOperationRequest {
    updateMultipleCovarBetasRequest: UpdateMultipleCovarBetasRequest;
}

/**
 * 
 */
export class ModelCovarBetasApi extends runtime.BaseAPI {

    /**
     * Delete covar beta.
     */
    async destroyCovarBetaRaw(requestParameters: DestroyCovarBetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyCovarBeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/betas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete covar beta.
     */
    async destroyCovarBeta(requestParameters: DestroyCovarBetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyCovarBetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export covar betas in a selected format (csv, json, parquet).
     */
    async exportCovarBetasRaw(requestParameters: ExportCovarBetasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportCovarBetas.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterCovarId !== undefined) {
            queryParameters['filter[covar_id]'] = requestParameters.filterCovarId;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterCovarValue !== undefined) {
            queryParameters['filter[covar_value]'] = requestParameters.filterCovarValue;
        }

        if (requestParameters.filterBetaValue !== undefined) {
            queryParameters['filter[beta_value]'] = requestParameters.filterBetaValue;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/betas/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export covar betas in a selected format (csv, json, parquet).
     */
    async exportCovarBetas(requestParameters: ExportCovarBetasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportCovarBetasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index covar betas.
     */
    async indexCovarBetasRaw(requestParameters: IndexCovarBetasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexCovarBetasResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterCovarId !== undefined) {
            queryParameters['filter[covar_id]'] = requestParameters.filterCovarId;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterCovarValue !== undefined) {
            queryParameters['filter[covar_value]'] = requestParameters.filterCovarValue;
        }

        if (requestParameters.filterBetaValue !== undefined) {
            queryParameters['filter[beta_value]'] = requestParameters.filterBetaValue;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/betas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCovarBetasResponseFromJSON(jsonValue));
    }

    /**
     * Index covar betas.
     */
    async indexCovarBetas(requestParameters: IndexCovarBetasRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexCovarBetasResponse> {
        const response = await this.indexCovarBetasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show covar beta by id.
     */
    async showCovarBetaRaw(requestParameters: ShowCovarBetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowCovarBetaResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showCovarBeta.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/betas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowCovarBetaResponseFromJSON(jsonValue));
    }

    /**
     * Show covar beta by id.
     */
    async showCovarBeta(requestParameters: ShowCovarBetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowCovarBetaResponse> {
        const response = await this.showCovarBetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store covar beta.
     */
    async storeCovarBetaRaw(requestParameters: StoreCovarBetaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreCovarBetaResponse>> {
        if (requestParameters.storeCovarBetaRequest === null || requestParameters.storeCovarBetaRequest === undefined) {
            throw new runtime.RequiredError('storeCovarBetaRequest','Required parameter requestParameters.storeCovarBetaRequest was null or undefined when calling storeCovarBeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/betas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreCovarBetaRequestToJSON(requestParameters.storeCovarBetaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreCovarBetaResponseFromJSON(jsonValue));
    }

    /**
     * Store covar beta.
     */
    async storeCovarBeta(requestParameters: StoreCovarBetaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreCovarBetaResponse> {
        const response = await this.storeCovarBetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple covar betas.
     */
    async storeMultipleCovarBetasRaw(requestParameters: StoreMultipleCovarBetasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleCovarBetas200Response>> {
        if (requestParameters.storeMultipleCovarBetasRequest === null || requestParameters.storeMultipleCovarBetasRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleCovarBetasRequest','Required parameter requestParameters.storeMultipleCovarBetasRequest was null or undefined when calling storeMultipleCovarBetas.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/betas/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleCovarBetasRequestToJSON(requestParameters.storeMultipleCovarBetasRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleCovarBetas200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple covar betas.
     */
    async storeMultipleCovarBetas(requestParameters: StoreMultipleCovarBetasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleCovarBetas200Response> {
        const response = await this.storeMultipleCovarBetasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update covar beta.
     */
    async updateCovarBetaRaw(requestParameters: UpdateCovarBetaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCovarBetaResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCovarBeta.');
        }

        if (requestParameters.updateCovarBetaRequest === null || requestParameters.updateCovarBetaRequest === undefined) {
            throw new runtime.RequiredError('updateCovarBetaRequest','Required parameter requestParameters.updateCovarBetaRequest was null or undefined when calling updateCovarBeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/betas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCovarBetaRequestToJSON(requestParameters.updateCovarBetaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCovarBetaResponseFromJSON(jsonValue));
    }

    /**
     * Update covar beta.
     */
    async updateCovarBeta(requestParameters: UpdateCovarBetaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCovarBetaResponse> {
        const response = await this.updateCovarBetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple covar betas.
     */
    async updateMultipleCovarBetasRaw(requestParameters: UpdateMultipleCovarBetasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleCovarBetas200Response>> {
        if (requestParameters.updateMultipleCovarBetasRequest === null || requestParameters.updateMultipleCovarBetasRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleCovarBetasRequest','Required parameter requestParameters.updateMultipleCovarBetasRequest was null or undefined when calling updateMultipleCovarBetas.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/betas/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleCovarBetasRequestToJSON(requestParameters.updateMultipleCovarBetasRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleCovarBetas200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple covar betas.
     */
    async updateMultipleCovarBetas(requestParameters: UpdateMultipleCovarBetasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleCovarBetas200Response> {
        const response = await this.updateMultipleCovarBetasRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportCovarBetasFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportCovarBetasFormatEnum = typeof ExportCovarBetasFormatEnum[keyof typeof ExportCovarBetasFormatEnum];
