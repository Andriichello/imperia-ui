/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExportIndexResponse,
  IndexModelCovarsResponse,
} from '../models';
import {
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexModelCovarsResponseFromJSON,
    IndexModelCovarsResponseToJSON,
} from '../models';

export interface ExportModelCovarsRequest {
    format: ExportModelCovarsFormatEnum;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterModelId?: string;
    filterSurveyTypeId?: string;
    filterCovarName?: string;
    filterCovarType?: string;
    filterCovarOrder?: string;
    filterCovarDefinition?: string;
    filterCovarValue?: string;
    filterBetaValue?: string;
}

export interface IndexModelCovarsRequest {
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterModelId?: string;
    filterSurveyTypeId?: string;
    filterCovarName?: string;
    filterCovarType?: string;
    filterCovarOrder?: string;
    filterCovarDefinition?: string;
    filterCovarValue?: string;
    filterBetaValue?: string;
}

/**
 * 
 */
export class ModelModelCovarsApi extends runtime.BaseAPI {

    /**
     * phpcs:disable
     * Export model covars in a selected format (csv, json, parquet).
     */
    async exportModelCovarsRaw(requestParameters: ExportModelCovarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportModelCovars.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterCovarName !== undefined) {
            queryParameters['filter[covar_name]'] = requestParameters.filterCovarName;
        }

        if (requestParameters.filterCovarType !== undefined) {
            queryParameters['filter[covar_type]'] = requestParameters.filterCovarType;
        }

        if (requestParameters.filterCovarOrder !== undefined) {
            queryParameters['filter[covar_order]'] = requestParameters.filterCovarOrder;
        }

        if (requestParameters.filterCovarDefinition !== undefined) {
            queryParameters['filter[covar_definition]'] = requestParameters.filterCovarDefinition;
        }

        if (requestParameters.filterCovarValue !== undefined) {
            queryParameters['filter[covar_value]'] = requestParameters.filterCovarValue;
        }

        if (requestParameters.filterBetaValue !== undefined) {
            queryParameters['filter[beta_value]'] = requestParameters.filterBetaValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/model-covars/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * phpcs:disable
     * Export model covars in a selected format (csv, json, parquet).
     */
    async exportModelCovars(requestParameters: ExportModelCovarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportModelCovarsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index model covars.
     */
    async indexModelCovarsRaw(requestParameters: IndexModelCovarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexModelCovarsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterCovarName !== undefined) {
            queryParameters['filter[covar_name]'] = requestParameters.filterCovarName;
        }

        if (requestParameters.filterCovarType !== undefined) {
            queryParameters['filter[covar_type]'] = requestParameters.filterCovarType;
        }

        if (requestParameters.filterCovarOrder !== undefined) {
            queryParameters['filter[covar_order]'] = requestParameters.filterCovarOrder;
        }

        if (requestParameters.filterCovarDefinition !== undefined) {
            queryParameters['filter[covar_definition]'] = requestParameters.filterCovarDefinition;
        }

        if (requestParameters.filterCovarValue !== undefined) {
            queryParameters['filter[covar_value]'] = requestParameters.filterCovarValue;
        }

        if (requestParameters.filterBetaValue !== undefined) {
            queryParameters['filter[beta_value]'] = requestParameters.filterBetaValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/model-covars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexModelCovarsResponseFromJSON(jsonValue));
    }

    /**
     * Index model covars.
     */
    async indexModelCovars(requestParameters: IndexModelCovarsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexModelCovarsResponse> {
        const response = await this.indexModelCovarsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportModelCovarsFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportModelCovarsFormatEnum = typeof ExportModelCovarsFormatEnum[keyof typeof ExportModelCovarsFormatEnum];
