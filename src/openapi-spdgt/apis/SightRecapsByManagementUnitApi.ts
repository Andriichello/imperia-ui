/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExportIndexResponse,
  IndexAerialSurveyDesignManagementUnitRecapsResponse,
} from '../models';
import {
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAerialSurveyDesignManagementUnitRecapsResponseFromJSON,
    IndexAerialSurveyDesignManagementUnitRecapsResponseToJSON,
} from '../models';

export interface ExportAerialSurveyDesignManagementUnitRecapsRequest {
    format: ExportAerialSurveyDesignManagementUnitRecapsFormatEnum;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterBioYear?: string;
    filterSurveyTypeId?: string;
    filterSurveyType?: string;
    filterSpeciesId?: string;
    filterSpecies?: string;
    filterAnalysisUnitId?: string;
    filterAnalysisUnit?: string;
    filterManagementUnitId?: string;
    filterManagementUnit?: string;
}

export interface IndexAerialSurveyDesignManagementUnitRecapsRequest {
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterBioYear?: string;
    filterSurveyTypeId?: string;
    filterSurveyType?: string;
    filterSpeciesId?: string;
    filterSpecies?: string;
    filterAnalysisUnitId?: string;
    filterAnalysisUnit?: string;
    filterManagementUnitId?: string;
    filterManagementUnit?: string;
}

/**
 * 
 */
export class SightRecapsByManagementUnitApi extends runtime.BaseAPI {

    /**
     * phpcs:disable
     * Export aerial survey management unit design recaps in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyDesignManagementUnitRecapsRaw(requestParameters: ExportAerialSurveyDesignManagementUnitRecapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAerialSurveyDesignManagementUnitRecaps.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterSurveyType !== undefined) {
            queryParameters['filter[survey_type]'] = requestParameters.filterSurveyType;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterSpecies !== undefined) {
            queryParameters['filter[species]'] = requestParameters.filterSpecies;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterAnalysisUnit !== undefined) {
            queryParameters['filter[analysis_unit]'] = requestParameters.filterAnalysisUnit;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterManagementUnit !== undefined) {
            queryParameters['filter[management_unit]'] = requestParameters.filterManagementUnit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/management-unit-recaps/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * phpcs:disable
     * Export aerial survey management unit design recaps in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyDesignManagementUnitRecaps(requestParameters: ExportAerialSurveyDesignManagementUnitRecapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAerialSurveyDesignManagementUnitRecapsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index aerial survey management unit design recaps.
     */
    async indexAerialSurveyDesignManagementUnitRecapsRaw(requestParameters: IndexAerialSurveyDesignManagementUnitRecapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAerialSurveyDesignManagementUnitRecapsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterSurveyType !== undefined) {
            queryParameters['filter[survey_type]'] = requestParameters.filterSurveyType;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterSpecies !== undefined) {
            queryParameters['filter[species]'] = requestParameters.filterSpecies;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterAnalysisUnit !== undefined) {
            queryParameters['filter[analysis_unit]'] = requestParameters.filterAnalysisUnit;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterManagementUnit !== undefined) {
            queryParameters['filter[management_unit]'] = requestParameters.filterManagementUnit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/management-unit-recaps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAerialSurveyDesignManagementUnitRecapsResponseFromJSON(jsonValue));
    }

    /**
     * Index aerial survey management unit design recaps.
     */
    async indexAerialSurveyDesignManagementUnitRecaps(requestParameters: IndexAerialSurveyDesignManagementUnitRecapsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAerialSurveyDesignManagementUnitRecapsResponse> {
        const response = await this.indexAerialSurveyDesignManagementUnitRecapsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAerialSurveyDesignManagementUnitRecapsFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAerialSurveyDesignManagementUnitRecapsFormatEnum = typeof ExportAerialSurveyDesignManagementUnitRecapsFormatEnum[keyof typeof ExportAerialSurveyDesignManagementUnitRecapsFormatEnum];
