/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexRegionsResponse,
  ShowRegionResponse,
  StoreMultipleRegions200Response,
  StoreMultipleRegionsRequest,
  StoreRegionRequest,
  StoreRegionResponse,
  UpdateMultipleRegions200Response,
  UpdateMultipleRegionsRequest,
  UpdateRegionRequest,
  UpdateRegionResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexRegionsResponseFromJSON,
    IndexRegionsResponseToJSON,
    ShowRegionResponseFromJSON,
    ShowRegionResponseToJSON,
    StoreMultipleRegions200ResponseFromJSON,
    StoreMultipleRegions200ResponseToJSON,
    StoreMultipleRegionsRequestFromJSON,
    StoreMultipleRegionsRequestToJSON,
    StoreRegionRequestFromJSON,
    StoreRegionRequestToJSON,
    StoreRegionResponseFromJSON,
    StoreRegionResponseToJSON,
    UpdateMultipleRegions200ResponseFromJSON,
    UpdateMultipleRegions200ResponseToJSON,
    UpdateMultipleRegionsRequestFromJSON,
    UpdateMultipleRegionsRequestToJSON,
    UpdateRegionRequestFromJSON,
    UpdateRegionRequestToJSON,
    UpdateRegionResponseFromJSON,
    UpdateRegionResponseToJSON,
} from '../models';

export interface DestroyRegionRequest {
    id: number;
}

export interface ExportRegionsRequest {
    format: ExportRegionsFormatEnum;
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    srid?: number;
    filterId?: string;
    filterProjectId?: string;
    filterName?: string;
    filterAbbreviation?: string;
    filterNumber?: string;
    filterSortOrder?: string;
}

export interface IndexRegionsRequest {
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    srid?: number;
    filterId?: string;
    filterProjectId?: string;
    filterName?: string;
    filterAbbreviation?: string;
    filterNumber?: string;
    filterSortOrder?: string;
}

export interface ShowRegionRequest {
    id: number;
    appends?: string;
    includes?: string;
    srid?: number;
}

export interface StoreMultipleRegionsOperationRequest {
    storeMultipleRegionsRequest: StoreMultipleRegionsRequest;
}

export interface StoreRegionOperationRequest {
    storeRegionRequest: StoreRegionRequest;
}

export interface UpdateMultipleRegionsOperationRequest {
    updateMultipleRegionsRequest: UpdateMultipleRegionsRequest;
}

export interface UpdateRegionOperationRequest {
    id: number;
    updateRegionRequest: UpdateRegionRequest;
}

/**
 * 
 */
export class LocationRegionsApi extends runtime.BaseAPI {

    /**
     * Delete region.
     */
    async destroyRegionRaw(requestParameters: DestroyRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyRegion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/regions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete region.
     */
    async destroyRegion(requestParameters: DestroyRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyRegionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export regions in a selected format (csv, json, parquet).
     */
    async exportRegionsRaw(requestParameters: ExportRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportRegions.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterAbbreviation !== undefined) {
            queryParameters['filter[abbreviation]'] = requestParameters.filterAbbreviation;
        }

        if (requestParameters.filterNumber !== undefined) {
            queryParameters['filter[number]'] = requestParameters.filterNumber;
        }

        if (requestParameters.filterSortOrder !== undefined) {
            queryParameters['filter[sort_order]'] = requestParameters.filterSortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/regions/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export regions in a selected format (csv, json, parquet).
     */
    async exportRegions(requestParameters: ExportRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index regions.
     */
    async indexRegionsRaw(requestParameters: IndexRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexRegionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterAbbreviation !== undefined) {
            queryParameters['filter[abbreviation]'] = requestParameters.filterAbbreviation;
        }

        if (requestParameters.filterNumber !== undefined) {
            queryParameters['filter[number]'] = requestParameters.filterNumber;
        }

        if (requestParameters.filterSortOrder !== undefined) {
            queryParameters['filter[sort_order]'] = requestParameters.filterSortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/regions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexRegionsResponseFromJSON(jsonValue));
    }

    /**
     * Index regions.
     */
    async indexRegions(requestParameters: IndexRegionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexRegionsResponse> {
        const response = await this.indexRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show region by id.
     */
    async showRegionRaw(requestParameters: ShowRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowRegionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showRegion.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/regions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowRegionResponseFromJSON(jsonValue));
    }

    /**
     * Show region by id.
     */
    async showRegion(requestParameters: ShowRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowRegionResponse> {
        const response = await this.showRegionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple regions.
     */
    async storeMultipleRegionsRaw(requestParameters: StoreMultipleRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleRegions200Response>> {
        if (requestParameters.storeMultipleRegionsRequest === null || requestParameters.storeMultipleRegionsRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleRegionsRequest','Required parameter requestParameters.storeMultipleRegionsRequest was null or undefined when calling storeMultipleRegions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/regions/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleRegionsRequestToJSON(requestParameters.storeMultipleRegionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleRegions200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple regions.
     */
    async storeMultipleRegions(requestParameters: StoreMultipleRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleRegions200Response> {
        const response = await this.storeMultipleRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store region.
     */
    async storeRegionRaw(requestParameters: StoreRegionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreRegionResponse>> {
        if (requestParameters.storeRegionRequest === null || requestParameters.storeRegionRequest === undefined) {
            throw new runtime.RequiredError('storeRegionRequest','Required parameter requestParameters.storeRegionRequest was null or undefined when calling storeRegion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/regions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreRegionRequestToJSON(requestParameters.storeRegionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreRegionResponseFromJSON(jsonValue));
    }

    /**
     * Store region.
     */
    async storeRegion(requestParameters: StoreRegionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreRegionResponse> {
        const response = await this.storeRegionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple regions.
     */
    async updateMultipleRegionsRaw(requestParameters: UpdateMultipleRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleRegions200Response>> {
        if (requestParameters.updateMultipleRegionsRequest === null || requestParameters.updateMultipleRegionsRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleRegionsRequest','Required parameter requestParameters.updateMultipleRegionsRequest was null or undefined when calling updateMultipleRegions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/regions/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleRegionsRequestToJSON(requestParameters.updateMultipleRegionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleRegions200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple regions.
     */
    async updateMultipleRegions(requestParameters: UpdateMultipleRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleRegions200Response> {
        const response = await this.updateMultipleRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update region.
     */
    async updateRegionRaw(requestParameters: UpdateRegionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRegionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRegion.');
        }

        if (requestParameters.updateRegionRequest === null || requestParameters.updateRegionRequest === undefined) {
            throw new runtime.RequiredError('updateRegionRequest','Required parameter requestParameters.updateRegionRequest was null or undefined when calling updateRegion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/regions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRegionRequestToJSON(requestParameters.updateRegionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRegionResponseFromJSON(jsonValue));
    }

    /**
     * Update region.
     */
    async updateRegion(requestParameters: UpdateRegionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRegionResponse> {
        const response = await this.updateRegionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportRegionsFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportRegionsFormatEnum = typeof ExportRegionsFormatEnum[keyof typeof ExportRegionsFormatEnum];
