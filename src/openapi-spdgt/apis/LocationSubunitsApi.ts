/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexSubunitsResponse,
  ShowSubunitResponse,
  StoreMultipleSubunits200Response,
  StoreMultipleSubunitsRequest,
  StoreSubunitRequest,
  StoreSubunitResponse,
  UpdateMultipleSubunitsRequest,
  UpdateMultipleSubunitsResponse,
  UpdateSubunitRequest,
  UpdateSubunitResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexSubunitsResponseFromJSON,
    IndexSubunitsResponseToJSON,
    ShowSubunitResponseFromJSON,
    ShowSubunitResponseToJSON,
    StoreMultipleSubunits200ResponseFromJSON,
    StoreMultipleSubunits200ResponseToJSON,
    StoreMultipleSubunitsRequestFromJSON,
    StoreMultipleSubunitsRequestToJSON,
    StoreSubunitRequestFromJSON,
    StoreSubunitRequestToJSON,
    StoreSubunitResponseFromJSON,
    StoreSubunitResponseToJSON,
    UpdateMultipleSubunitsRequestFromJSON,
    UpdateMultipleSubunitsRequestToJSON,
    UpdateMultipleSubunitsResponseFromJSON,
    UpdateMultipleSubunitsResponseToJSON,
    UpdateSubunitRequestFromJSON,
    UpdateSubunitRequestToJSON,
    UpdateSubunitResponseFromJSON,
    UpdateSubunitResponseToJSON,
} from '../models';

export interface DestroySubunitRequest {
    id: number;
}

export interface ExportSubunitsRequest {
    format: ExportSubunitsFormatEnum;
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    srid?: number;
    filterId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterName?: string;
    filterSortOrder?: string;
}

export interface ExportSubunitsGeoRequest {
    analysisUnitId: number;
    as: ExportSubunitsGeoAsEnum;
    _function?: ExportSubunitsGeoFunctionEnum;
    singleTrack?: boolean;
    srid?: number;
    filterId?: string;
    filterManagementUnitId?: string;
    filterName?: string;
}

export interface IndexSubunitsRequest {
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    srid?: number;
    filterId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterName?: string;
    filterSortOrder?: string;
}

export interface ShowSubunitRequest {
    id: number;
    appends?: string;
    includes?: string;
    srid?: number;
}

export interface StoreMultipleSubunitsOperationRequest {
    storeMultipleSubunitsRequest: StoreMultipleSubunitsRequest;
}

export interface StoreSubunitOperationRequest {
    storeSubunitRequest: StoreSubunitRequest;
}

export interface UpdateMultipleSubunitsOperationRequest {
    updateMultipleSubunitsRequest: UpdateMultipleSubunitsRequest;
}

export interface UpdateSubunitOperationRequest {
    id: number;
    updateSubunitRequest: UpdateSubunitRequest;
}

/**
 * 
 */
export class LocationSubunitsApi extends runtime.BaseAPI {

    /**
     * Delete subunit.
     */
    async destroySubunitRaw(requestParameters: DestroySubunitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroySubunit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subunits/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete subunit.
     */
    async destroySubunit(requestParameters: DestroySubunitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroySubunitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export subunits in a selected format (csv, json, parquet).
     */
    async exportSubunitsRaw(requestParameters: ExportSubunitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportSubunits.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterSortOrder !== undefined) {
            queryParameters['filter[sort_order]'] = requestParameters.filterSortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subunits/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export subunits in a selected format (csv, json, parquet).
     */
    async exportSubunits(requestParameters: ExportSubunitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportSubunitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export Geo information for subunits.
     */
    async exportSubunitsGeoRaw(requestParameters: ExportSubunitsGeoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.analysisUnitId === null || requestParameters.analysisUnitId === undefined) {
            throw new runtime.RequiredError('analysisUnitId','Required parameter requestParameters.analysisUnitId was null or undefined when calling exportSubunitsGeo.');
        }

        if (requestParameters.as === null || requestParameters.as === undefined) {
            throw new runtime.RequiredError('as','Required parameter requestParameters.as was null or undefined when calling exportSubunitsGeo.');
        }

        const queryParameters: any = {};

        if (requestParameters.analysisUnitId !== undefined) {
            queryParameters['analysis_unit_id'] = requestParameters.analysisUnitId;
        }

        if (requestParameters.as !== undefined) {
            queryParameters['as'] = requestParameters.as;
        }

        if (requestParameters._function !== undefined) {
            queryParameters['function'] = requestParameters._function;
        }

        if (requestParameters.singleTrack !== undefined) {
            queryParameters['single_track'] = requestParameters.singleTrack;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subunits/geo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Geo information for subunits.
     */
    async exportSubunitsGeo(requestParameters: ExportSubunitsGeoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.exportSubunitsGeoRaw(requestParameters, initOverrides);
    }

    /**
     * Index subunits.
     */
    async indexSubunitsRaw(requestParameters: IndexSubunitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexSubunitsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterSortOrder !== undefined) {
            queryParameters['filter[sort_order]'] = requestParameters.filterSortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subunits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexSubunitsResponseFromJSON(jsonValue));
    }

    /**
     * Index subunits.
     */
    async indexSubunits(requestParameters: IndexSubunitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexSubunitsResponse> {
        const response = await this.indexSubunitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show subunit by id.
     */
    async showSubunitRaw(requestParameters: ShowSubunitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowSubunitResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showSubunit.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subunits/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowSubunitResponseFromJSON(jsonValue));
    }

    /**
     * Show subunit by id.
     */
    async showSubunit(requestParameters: ShowSubunitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowSubunitResponse> {
        const response = await this.showSubunitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple subunits.
     */
    async storeMultipleSubunitsRaw(requestParameters: StoreMultipleSubunitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleSubunits200Response>> {
        if (requestParameters.storeMultipleSubunitsRequest === null || requestParameters.storeMultipleSubunitsRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleSubunitsRequest','Required parameter requestParameters.storeMultipleSubunitsRequest was null or undefined when calling storeMultipleSubunits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subunits/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleSubunitsRequestToJSON(requestParameters.storeMultipleSubunitsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleSubunits200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple subunits.
     */
    async storeMultipleSubunits(requestParameters: StoreMultipleSubunitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleSubunits200Response> {
        const response = await this.storeMultipleSubunitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store subunit.
     */
    async storeSubunitRaw(requestParameters: StoreSubunitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreSubunitResponse>> {
        if (requestParameters.storeSubunitRequest === null || requestParameters.storeSubunitRequest === undefined) {
            throw new runtime.RequiredError('storeSubunitRequest','Required parameter requestParameters.storeSubunitRequest was null or undefined when calling storeSubunit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subunits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreSubunitRequestToJSON(requestParameters.storeSubunitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreSubunitResponseFromJSON(jsonValue));
    }

    /**
     * Store subunit.
     */
    async storeSubunit(requestParameters: StoreSubunitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreSubunitResponse> {
        const response = await this.storeSubunitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple subunits.
     */
    async updateMultipleSubunitsRaw(requestParameters: UpdateMultipleSubunitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleSubunitsResponse>> {
        if (requestParameters.updateMultipleSubunitsRequest === null || requestParameters.updateMultipleSubunitsRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleSubunitsRequest','Required parameter requestParameters.updateMultipleSubunitsRequest was null or undefined when calling updateMultipleSubunits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subunits/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleSubunitsRequestToJSON(requestParameters.updateMultipleSubunitsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleSubunitsResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple subunits.
     */
    async updateMultipleSubunits(requestParameters: UpdateMultipleSubunitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleSubunitsResponse> {
        const response = await this.updateMultipleSubunitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update subunit.
     */
    async updateSubunitRaw(requestParameters: UpdateSubunitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSubunitResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSubunit.');
        }

        if (requestParameters.updateSubunitRequest === null || requestParameters.updateSubunitRequest === undefined) {
            throw new runtime.RequiredError('updateSubunitRequest','Required parameter requestParameters.updateSubunitRequest was null or undefined when calling updateSubunit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subunits/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSubunitRequestToJSON(requestParameters.updateSubunitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSubunitResponseFromJSON(jsonValue));
    }

    /**
     * Update subunit.
     */
    async updateSubunit(requestParameters: UpdateSubunitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSubunitResponse> {
        const response = await this.updateSubunitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportSubunitsFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportSubunitsFormatEnum = typeof ExportSubunitsFormatEnum[keyof typeof ExportSubunitsFormatEnum];
/**
 * @export
 */
export const ExportSubunitsGeoAsEnum = {
    Kml: 'KML',
    Gpx: 'GPX',
    GeoJson: 'GeoJSON'
} as const;
export type ExportSubunitsGeoAsEnum = typeof ExportSubunitsGeoAsEnum[keyof typeof ExportSubunitsGeoAsEnum];
/**
 * @export
 */
export const ExportSubunitsGeoFunctionEnum = {
    Centroid: 'Centroid',
    PointOnSurface: 'PointOnSurface'
} as const;
export type ExportSubunitsGeoFunctionEnum = typeof ExportSubunitsGeoFunctionEnum[keyof typeof ExportSubunitsGeoFunctionEnum];
