/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexAerialSurveyEntriesResponse,
  ShowAerialSurveyEntryResponse,
  StoreAerialSurveyEntryRequest,
  StoreAerialSurveyEntryResponse,
  StoreMultipleAerialSurveyEntries200Response,
  StoreMultipleAerialSurveyEntriesRequest,
  SyncAerialSurveyEntriesRequest,
  SyncAerialSurveyEntriesResponse,
  UpdateAerialSurveyEntryRequest,
  UpdateAerialSurveyEntryResponse,
  UpdateMultipleAerialSurveyEntries200Response,
  UpdateMultipleAerialSurveyEntriesRequest,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAerialSurveyEntriesResponseFromJSON,
    IndexAerialSurveyEntriesResponseToJSON,
    ShowAerialSurveyEntryResponseFromJSON,
    ShowAerialSurveyEntryResponseToJSON,
    StoreAerialSurveyEntryRequestFromJSON,
    StoreAerialSurveyEntryRequestToJSON,
    StoreAerialSurveyEntryResponseFromJSON,
    StoreAerialSurveyEntryResponseToJSON,
    StoreMultipleAerialSurveyEntries200ResponseFromJSON,
    StoreMultipleAerialSurveyEntries200ResponseToJSON,
    StoreMultipleAerialSurveyEntriesRequestFromJSON,
    StoreMultipleAerialSurveyEntriesRequestToJSON,
    SyncAerialSurveyEntriesRequestFromJSON,
    SyncAerialSurveyEntriesRequestToJSON,
    SyncAerialSurveyEntriesResponseFromJSON,
    SyncAerialSurveyEntriesResponseToJSON,
    UpdateAerialSurveyEntryRequestFromJSON,
    UpdateAerialSurveyEntryRequestToJSON,
    UpdateAerialSurveyEntryResponseFromJSON,
    UpdateAerialSurveyEntryResponseToJSON,
    UpdateMultipleAerialSurveyEntries200ResponseFromJSON,
    UpdateMultipleAerialSurveyEntries200ResponseToJSON,
    UpdateMultipleAerialSurveyEntriesRequestFromJSON,
    UpdateMultipleAerialSurveyEntriesRequestToJSON,
} from '../models';

export interface DestroyAerialSurveyEntryRequest {
    id: number;
}

export interface ExportAerialSurveyEntriesRequest {
    format: ExportAerialSurveyEntriesFormatEnum;
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    srid?: number;
    filterId?: string;
    filterAerialSurveyId?: string;
    filterSubunitId?: string;
    filterManagementUnitId?: string;
    filterSpeciesId?: string;
    filterBioYear?: string;
    filterIsTargetSpecies?: string;
    filterTotal?: string;
    filterMales?: string;
    filterFemales?: string;
    filterYoungs?: string;
    filterUnclass?: string;
    filterActivity?: string;
    filterScreenType?: string;
    filterVegetationType?: string;
    filterSnowPercentage?: string;
    filterScreenPercentage?: string;
    filterWaypoint?: string;
    filterLatitude?: string;
    filterLongitude?: string;
    filterMetadata?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexAerialSurveyEntriesRequest {
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    srid?: number;
    filterId?: string;
    filterAerialSurveyId?: string;
    filterSubunitId?: string;
    filterManagementUnitId?: string;
    filterSpeciesId?: string;
    filterBioYear?: string;
    filterIsTargetSpecies?: string;
    filterTotal?: string;
    filterMales?: string;
    filterFemales?: string;
    filterYoungs?: string;
    filterUnclass?: string;
    filterActivity?: string;
    filterScreenType?: string;
    filterVegetationType?: string;
    filterSnowPercentage?: string;
    filterScreenPercentage?: string;
    filterWaypoint?: string;
    filterLatitude?: string;
    filterLongitude?: string;
    filterMetadata?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface SaveAerialSurveyEntriesRequest {
    syncAerialSurveyEntriesRequest: SyncAerialSurveyEntriesRequest;
}

export interface ShowAerialSurveyEntryRequest {
    id: number;
    appends?: string;
    includes?: string;
    srid?: number;
}

export interface StoreAerialSurveyEntryOperationRequest {
    storeAerialSurveyEntryRequest: StoreAerialSurveyEntryRequest;
}

export interface StoreMultipleAerialSurveyEntriesOperationRequest {
    storeMultipleAerialSurveyEntriesRequest: StoreMultipleAerialSurveyEntriesRequest;
}

export interface UpdateAerialSurveyEntryOperationRequest {
    id: number;
    updateAerialSurveyEntryRequest: UpdateAerialSurveyEntryRequest;
}

export interface UpdateMultipleAerialSurveyEntriesOperationRequest {
    updateMultipleAerialSurveyEntriesRequest: UpdateMultipleAerialSurveyEntriesRequest;
}

/**
 * 
 */
export class SightAerialSurveyEntriesApi extends runtime.BaseAPI {

    /**
     * Delete aerial survey entry.
     */
    async destroyAerialSurveyEntryRaw(requestParameters: DestroyAerialSurveyEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyAerialSurveyEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete aerial survey entry.
     */
    async destroyAerialSurveyEntry(requestParameters: DestroyAerialSurveyEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyAerialSurveyEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export aerial survey entries in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyEntriesRaw(requestParameters: ExportAerialSurveyEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAerialSurveyEntries.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterAerialSurveyId !== undefined) {
            queryParameters['filter[aerial_survey_id]'] = requestParameters.filterAerialSurveyId;
        }

        if (requestParameters.filterSubunitId !== undefined) {
            queryParameters['filter[subunit_id]'] = requestParameters.filterSubunitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterIsTargetSpecies !== undefined) {
            queryParameters['filter[is_target_species]'] = requestParameters.filterIsTargetSpecies;
        }

        if (requestParameters.filterTotal !== undefined) {
            queryParameters['filter[total]'] = requestParameters.filterTotal;
        }

        if (requestParameters.filterMales !== undefined) {
            queryParameters['filter[males]'] = requestParameters.filterMales;
        }

        if (requestParameters.filterFemales !== undefined) {
            queryParameters['filter[females]'] = requestParameters.filterFemales;
        }

        if (requestParameters.filterYoungs !== undefined) {
            queryParameters['filter[youngs]'] = requestParameters.filterYoungs;
        }

        if (requestParameters.filterUnclass !== undefined) {
            queryParameters['filter[unclass]'] = requestParameters.filterUnclass;
        }

        if (requestParameters.filterActivity !== undefined) {
            queryParameters['filter[activity]'] = requestParameters.filterActivity;
        }

        if (requestParameters.filterScreenType !== undefined) {
            queryParameters['filter[screen_type]'] = requestParameters.filterScreenType;
        }

        if (requestParameters.filterVegetationType !== undefined) {
            queryParameters['filter[vegetation_type]'] = requestParameters.filterVegetationType;
        }

        if (requestParameters.filterSnowPercentage !== undefined) {
            queryParameters['filter[snow_percentage]'] = requestParameters.filterSnowPercentage;
        }

        if (requestParameters.filterScreenPercentage !== undefined) {
            queryParameters['filter[screen_percentage]'] = requestParameters.filterScreenPercentage;
        }

        if (requestParameters.filterWaypoint !== undefined) {
            queryParameters['filter[waypoint]'] = requestParameters.filterWaypoint;
        }

        if (requestParameters.filterLatitude !== undefined) {
            queryParameters['filter[latitude]'] = requestParameters.filterLatitude;
        }

        if (requestParameters.filterLongitude !== undefined) {
            queryParameters['filter[longitude]'] = requestParameters.filterLongitude;
        }

        if (requestParameters.filterMetadata !== undefined) {
            queryParameters['filter[metadata]'] = requestParameters.filterMetadata;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/entries/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export aerial survey entries in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyEntries(requestParameters: ExportAerialSurveyEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAerialSurveyEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index aerial survey entries.
     */
    async indexAerialSurveyEntriesRaw(requestParameters: IndexAerialSurveyEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAerialSurveyEntriesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterAerialSurveyId !== undefined) {
            queryParameters['filter[aerial_survey_id]'] = requestParameters.filterAerialSurveyId;
        }

        if (requestParameters.filterSubunitId !== undefined) {
            queryParameters['filter[subunit_id]'] = requestParameters.filterSubunitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterIsTargetSpecies !== undefined) {
            queryParameters['filter[is_target_species]'] = requestParameters.filterIsTargetSpecies;
        }

        if (requestParameters.filterTotal !== undefined) {
            queryParameters['filter[total]'] = requestParameters.filterTotal;
        }

        if (requestParameters.filterMales !== undefined) {
            queryParameters['filter[males]'] = requestParameters.filterMales;
        }

        if (requestParameters.filterFemales !== undefined) {
            queryParameters['filter[females]'] = requestParameters.filterFemales;
        }

        if (requestParameters.filterYoungs !== undefined) {
            queryParameters['filter[youngs]'] = requestParameters.filterYoungs;
        }

        if (requestParameters.filterUnclass !== undefined) {
            queryParameters['filter[unclass]'] = requestParameters.filterUnclass;
        }

        if (requestParameters.filterActivity !== undefined) {
            queryParameters['filter[activity]'] = requestParameters.filterActivity;
        }

        if (requestParameters.filterScreenType !== undefined) {
            queryParameters['filter[screen_type]'] = requestParameters.filterScreenType;
        }

        if (requestParameters.filterVegetationType !== undefined) {
            queryParameters['filter[vegetation_type]'] = requestParameters.filterVegetationType;
        }

        if (requestParameters.filterSnowPercentage !== undefined) {
            queryParameters['filter[snow_percentage]'] = requestParameters.filterSnowPercentage;
        }

        if (requestParameters.filterScreenPercentage !== undefined) {
            queryParameters['filter[screen_percentage]'] = requestParameters.filterScreenPercentage;
        }

        if (requestParameters.filterWaypoint !== undefined) {
            queryParameters['filter[waypoint]'] = requestParameters.filterWaypoint;
        }

        if (requestParameters.filterLatitude !== undefined) {
            queryParameters['filter[latitude]'] = requestParameters.filterLatitude;
        }

        if (requestParameters.filterLongitude !== undefined) {
            queryParameters['filter[longitude]'] = requestParameters.filterLongitude;
        }

        if (requestParameters.filterMetadata !== undefined) {
            queryParameters['filter[metadata]'] = requestParameters.filterMetadata;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/entries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAerialSurveyEntriesResponseFromJSON(jsonValue));
    }

    /**
     * Index aerial survey entries.
     */
    async indexAerialSurveyEntries(requestParameters: IndexAerialSurveyEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAerialSurveyEntriesResponse> {
        const response = await this.indexAerialSurveyEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync entries for given aerial survey. What you submit will             be stored in the database other (existing) records will be deleted.
     */
    async saveAerialSurveyEntriesRaw(requestParameters: SaveAerialSurveyEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SyncAerialSurveyEntriesResponse>> {
        if (requestParameters.syncAerialSurveyEntriesRequest === null || requestParameters.syncAerialSurveyEntriesRequest === undefined) {
            throw new runtime.RequiredError('syncAerialSurveyEntriesRequest','Required parameter requestParameters.syncAerialSurveyEntriesRequest was null or undefined when calling saveAerialSurveyEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/entries/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyncAerialSurveyEntriesRequestToJSON(requestParameters.syncAerialSurveyEntriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SyncAerialSurveyEntriesResponseFromJSON(jsonValue));
    }

    /**
     * Sync entries for given aerial survey. What you submit will             be stored in the database other (existing) records will be deleted.
     */
    async saveAerialSurveyEntries(requestParameters: SaveAerialSurveyEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SyncAerialSurveyEntriesResponse> {
        const response = await this.saveAerialSurveyEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show aerial survey entry by id.
     */
    async showAerialSurveyEntryRaw(requestParameters: ShowAerialSurveyEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowAerialSurveyEntryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showAerialSurveyEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowAerialSurveyEntryResponseFromJSON(jsonValue));
    }

    /**
     * Show aerial survey entry by id.
     */
    async showAerialSurveyEntry(requestParameters: ShowAerialSurveyEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowAerialSurveyEntryResponse> {
        const response = await this.showAerialSurveyEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store aerial survey entry.
     */
    async storeAerialSurveyEntryRaw(requestParameters: StoreAerialSurveyEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreAerialSurveyEntryResponse>> {
        if (requestParameters.storeAerialSurveyEntryRequest === null || requestParameters.storeAerialSurveyEntryRequest === undefined) {
            throw new runtime.RequiredError('storeAerialSurveyEntryRequest','Required parameter requestParameters.storeAerialSurveyEntryRequest was null or undefined when calling storeAerialSurveyEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreAerialSurveyEntryRequestToJSON(requestParameters.storeAerialSurveyEntryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreAerialSurveyEntryResponseFromJSON(jsonValue));
    }

    /**
     * Store aerial survey entry.
     */
    async storeAerialSurveyEntry(requestParameters: StoreAerialSurveyEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreAerialSurveyEntryResponse> {
        const response = await this.storeAerialSurveyEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store aerial survey entries.
     */
    async storeMultipleAerialSurveyEntriesRaw(requestParameters: StoreMultipleAerialSurveyEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleAerialSurveyEntries200Response>> {
        if (requestParameters.storeMultipleAerialSurveyEntriesRequest === null || requestParameters.storeMultipleAerialSurveyEntriesRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleAerialSurveyEntriesRequest','Required parameter requestParameters.storeMultipleAerialSurveyEntriesRequest was null or undefined when calling storeMultipleAerialSurveyEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/entries/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleAerialSurveyEntriesRequestToJSON(requestParameters.storeMultipleAerialSurveyEntriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleAerialSurveyEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Store aerial survey entries.
     */
    async storeMultipleAerialSurveyEntries(requestParameters: StoreMultipleAerialSurveyEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleAerialSurveyEntries200Response> {
        const response = await this.storeMultipleAerialSurveyEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update aerial survey entry.
     */
    async updateAerialSurveyEntryRaw(requestParameters: UpdateAerialSurveyEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAerialSurveyEntryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAerialSurveyEntry.');
        }

        if (requestParameters.updateAerialSurveyEntryRequest === null || requestParameters.updateAerialSurveyEntryRequest === undefined) {
            throw new runtime.RequiredError('updateAerialSurveyEntryRequest','Required parameter requestParameters.updateAerialSurveyEntryRequest was null or undefined when calling updateAerialSurveyEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAerialSurveyEntryRequestToJSON(requestParameters.updateAerialSurveyEntryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAerialSurveyEntryResponseFromJSON(jsonValue));
    }

    /**
     * Update aerial survey entry.
     */
    async updateAerialSurveyEntry(requestParameters: UpdateAerialSurveyEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAerialSurveyEntryResponse> {
        const response = await this.updateAerialSurveyEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update aerial survey entries.
     */
    async updateMultipleAerialSurveyEntriesRaw(requestParameters: UpdateMultipleAerialSurveyEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleAerialSurveyEntries200Response>> {
        if (requestParameters.updateMultipleAerialSurveyEntriesRequest === null || requestParameters.updateMultipleAerialSurveyEntriesRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleAerialSurveyEntriesRequest','Required parameter requestParameters.updateMultipleAerialSurveyEntriesRequest was null or undefined when calling updateMultipleAerialSurveyEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/entries/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleAerialSurveyEntriesRequestToJSON(requestParameters.updateMultipleAerialSurveyEntriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleAerialSurveyEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Update aerial survey entries.
     */
    async updateMultipleAerialSurveyEntries(requestParameters: UpdateMultipleAerialSurveyEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleAerialSurveyEntries200Response> {
        const response = await this.updateMultipleAerialSurveyEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAerialSurveyEntriesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAerialSurveyEntriesFormatEnum = typeof ExportAerialSurveyEntriesFormatEnum[keyof typeof ExportAerialSurveyEntriesFormatEnum];
