/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExportIndexResponse,
  IndexAerialSurveyDataSummariesResponse,
} from '../models';
import {
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAerialSurveyDataSummariesResponseFromJSON,
    IndexAerialSurveyDataSummariesResponseToJSON,
} from '../models';

export interface ExportAerialSurveyDataSummariesRequest {
    format: ExportAerialSurveyDataSummariesFormatEnum;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterBioYear?: string;
    filterSurveyTypeId?: string;
    filterSurveyType?: string;
    filterSpeciesId?: string;
    filterSpecies?: string;
    filterAnalysisUnitId?: string;
    filterAnalysisUnit?: string;
    filterAllManagementUnits?: string;
    filterSampledManagementUnits?: string;
    filterManagementUnitIds?: string;
    filterSurveyIds?: string;
    filterSurveyDates?: string;
    filterStartDate?: string;
    filterEndDate?: string;
    filterDuration?: string;
    filterObservations?: string;
    filterOtherObservations?: string;
    filterAllObservations?: string;
    filterZeroTotals?: string;
    filterOtherZeroTotals?: string;
    filterAllZeroTotals?: string;
    filterAnimals?: string;
    filterOtherAnimals?: string;
    filterAllAnimals?: string;
    filterAllSubunits?: string;
    filterSampledSubunits?: string;
    filterOtherSampledSubunits?: string;
    filterAllSampledSubunits?: string;
    filterStratifiedSubunits?: string;
    filterSelectedSubunits?: string;
    filterSurveyedSubunits?: string;
}

export interface IndexAerialSurveyDataSummariesRequest {
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterBioYear?: string;
    filterSurveyTypeId?: string;
    filterSurveyType?: string;
    filterSpeciesId?: string;
    filterSpecies?: string;
    filterAnalysisUnitId?: string;
    filterAnalysisUnit?: string;
    filterAllManagementUnits?: string;
    filterSampledManagementUnits?: string;
    filterManagementUnitIds?: string;
    filterSurveyIds?: string;
    filterSurveyDates?: string;
    filterStartDate?: string;
    filterEndDate?: string;
    filterDuration?: string;
    filterObservations?: string;
    filterOtherObservations?: string;
    filterAllObservations?: string;
    filterZeroTotals?: string;
    filterOtherZeroTotals?: string;
    filterAllZeroTotals?: string;
    filterAnimals?: string;
    filterOtherAnimals?: string;
    filterAllAnimals?: string;
    filterAllSubunits?: string;
    filterSampledSubunits?: string;
    filterOtherSampledSubunits?: string;
    filterAllSampledSubunits?: string;
    filterStratifiedSubunits?: string;
    filterSelectedSubunits?: string;
    filterSurveyedSubunits?: string;
}

/**
 * 
 */
export class SightSummariesDataApi extends runtime.BaseAPI {

    /**
     * phpcs:disable
     * Export aerial survey data summaries in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyDataSummariesRaw(requestParameters: ExportAerialSurveyDataSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAerialSurveyDataSummaries.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterSurveyType !== undefined) {
            queryParameters['filter[survey_type]'] = requestParameters.filterSurveyType;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterSpecies !== undefined) {
            queryParameters['filter[species]'] = requestParameters.filterSpecies;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterAnalysisUnit !== undefined) {
            queryParameters['filter[analysis_unit]'] = requestParameters.filterAnalysisUnit;
        }

        if (requestParameters.filterAllManagementUnits !== undefined) {
            queryParameters['filter[all_management_units]'] = requestParameters.filterAllManagementUnits;
        }

        if (requestParameters.filterSampledManagementUnits !== undefined) {
            queryParameters['filter[sampled_management_units]'] = requestParameters.filterSampledManagementUnits;
        }

        if (requestParameters.filterManagementUnitIds !== undefined) {
            queryParameters['filter[management_unit_ids]'] = requestParameters.filterManagementUnitIds;
        }

        if (requestParameters.filterSurveyIds !== undefined) {
            queryParameters['filter[survey_ids]'] = requestParameters.filterSurveyIds;
        }

        if (requestParameters.filterSurveyDates !== undefined) {
            queryParameters['filter[survey_dates]'] = requestParameters.filterSurveyDates;
        }

        if (requestParameters.filterStartDate !== undefined) {
            queryParameters['filter[start_date]'] = requestParameters.filterStartDate;
        }

        if (requestParameters.filterEndDate !== undefined) {
            queryParameters['filter[end_date]'] = requestParameters.filterEndDate;
        }

        if (requestParameters.filterDuration !== undefined) {
            queryParameters['filter[duration]'] = requestParameters.filterDuration;
        }

        if (requestParameters.filterObservations !== undefined) {
            queryParameters['filter[observations]'] = requestParameters.filterObservations;
        }

        if (requestParameters.filterOtherObservations !== undefined) {
            queryParameters['filter[other_observations]'] = requestParameters.filterOtherObservations;
        }

        if (requestParameters.filterAllObservations !== undefined) {
            queryParameters['filter[all_observations]'] = requestParameters.filterAllObservations;
        }

        if (requestParameters.filterZeroTotals !== undefined) {
            queryParameters['filter[zero_totals]'] = requestParameters.filterZeroTotals;
        }

        if (requestParameters.filterOtherZeroTotals !== undefined) {
            queryParameters['filter[other_zero_totals]'] = requestParameters.filterOtherZeroTotals;
        }

        if (requestParameters.filterAllZeroTotals !== undefined) {
            queryParameters['filter[all_zero_totals]'] = requestParameters.filterAllZeroTotals;
        }

        if (requestParameters.filterAnimals !== undefined) {
            queryParameters['filter[animals]'] = requestParameters.filterAnimals;
        }

        if (requestParameters.filterOtherAnimals !== undefined) {
            queryParameters['filter[other_animals]'] = requestParameters.filterOtherAnimals;
        }

        if (requestParameters.filterAllAnimals !== undefined) {
            queryParameters['filter[all_animals]'] = requestParameters.filterAllAnimals;
        }

        if (requestParameters.filterAllSubunits !== undefined) {
            queryParameters['filter[all_subunits]'] = requestParameters.filterAllSubunits;
        }

        if (requestParameters.filterSampledSubunits !== undefined) {
            queryParameters['filter[sampled_subunits]'] = requestParameters.filterSampledSubunits;
        }

        if (requestParameters.filterOtherSampledSubunits !== undefined) {
            queryParameters['filter[other_sampled_subunits]'] = requestParameters.filterOtherSampledSubunits;
        }

        if (requestParameters.filterAllSampledSubunits !== undefined) {
            queryParameters['filter[all_sampled_subunits]'] = requestParameters.filterAllSampledSubunits;
        }

        if (requestParameters.filterStratifiedSubunits !== undefined) {
            queryParameters['filter[stratified_subunits]'] = requestParameters.filterStratifiedSubunits;
        }

        if (requestParameters.filterSelectedSubunits !== undefined) {
            queryParameters['filter[selected_subunits]'] = requestParameters.filterSelectedSubunits;
        }

        if (requestParameters.filterSurveyedSubunits !== undefined) {
            queryParameters['filter[surveyed_subunits]'] = requestParameters.filterSurveyedSubunits;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/data/summaries/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * phpcs:disable
     * Export aerial survey data summaries in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyDataSummaries(requestParameters: ExportAerialSurveyDataSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAerialSurveyDataSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index aerial survey data summaries.
     */
    async indexAerialSurveyDataSummariesRaw(requestParameters: IndexAerialSurveyDataSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAerialSurveyDataSummariesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterSurveyType !== undefined) {
            queryParameters['filter[survey_type]'] = requestParameters.filterSurveyType;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterSpecies !== undefined) {
            queryParameters['filter[species]'] = requestParameters.filterSpecies;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterAnalysisUnit !== undefined) {
            queryParameters['filter[analysis_unit]'] = requestParameters.filterAnalysisUnit;
        }

        if (requestParameters.filterAllManagementUnits !== undefined) {
            queryParameters['filter[all_management_units]'] = requestParameters.filterAllManagementUnits;
        }

        if (requestParameters.filterSampledManagementUnits !== undefined) {
            queryParameters['filter[sampled_management_units]'] = requestParameters.filterSampledManagementUnits;
        }

        if (requestParameters.filterManagementUnitIds !== undefined) {
            queryParameters['filter[management_unit_ids]'] = requestParameters.filterManagementUnitIds;
        }

        if (requestParameters.filterSurveyIds !== undefined) {
            queryParameters['filter[survey_ids]'] = requestParameters.filterSurveyIds;
        }

        if (requestParameters.filterSurveyDates !== undefined) {
            queryParameters['filter[survey_dates]'] = requestParameters.filterSurveyDates;
        }

        if (requestParameters.filterStartDate !== undefined) {
            queryParameters['filter[start_date]'] = requestParameters.filterStartDate;
        }

        if (requestParameters.filterEndDate !== undefined) {
            queryParameters['filter[end_date]'] = requestParameters.filterEndDate;
        }

        if (requestParameters.filterDuration !== undefined) {
            queryParameters['filter[duration]'] = requestParameters.filterDuration;
        }

        if (requestParameters.filterObservations !== undefined) {
            queryParameters['filter[observations]'] = requestParameters.filterObservations;
        }

        if (requestParameters.filterOtherObservations !== undefined) {
            queryParameters['filter[other_observations]'] = requestParameters.filterOtherObservations;
        }

        if (requestParameters.filterAllObservations !== undefined) {
            queryParameters['filter[all_observations]'] = requestParameters.filterAllObservations;
        }

        if (requestParameters.filterZeroTotals !== undefined) {
            queryParameters['filter[zero_totals]'] = requestParameters.filterZeroTotals;
        }

        if (requestParameters.filterOtherZeroTotals !== undefined) {
            queryParameters['filter[other_zero_totals]'] = requestParameters.filterOtherZeroTotals;
        }

        if (requestParameters.filterAllZeroTotals !== undefined) {
            queryParameters['filter[all_zero_totals]'] = requestParameters.filterAllZeroTotals;
        }

        if (requestParameters.filterAnimals !== undefined) {
            queryParameters['filter[animals]'] = requestParameters.filterAnimals;
        }

        if (requestParameters.filterOtherAnimals !== undefined) {
            queryParameters['filter[other_animals]'] = requestParameters.filterOtherAnimals;
        }

        if (requestParameters.filterAllAnimals !== undefined) {
            queryParameters['filter[all_animals]'] = requestParameters.filterAllAnimals;
        }

        if (requestParameters.filterAllSubunits !== undefined) {
            queryParameters['filter[all_subunits]'] = requestParameters.filterAllSubunits;
        }

        if (requestParameters.filterSampledSubunits !== undefined) {
            queryParameters['filter[sampled_subunits]'] = requestParameters.filterSampledSubunits;
        }

        if (requestParameters.filterOtherSampledSubunits !== undefined) {
            queryParameters['filter[other_sampled_subunits]'] = requestParameters.filterOtherSampledSubunits;
        }

        if (requestParameters.filterAllSampledSubunits !== undefined) {
            queryParameters['filter[all_sampled_subunits]'] = requestParameters.filterAllSampledSubunits;
        }

        if (requestParameters.filterStratifiedSubunits !== undefined) {
            queryParameters['filter[stratified_subunits]'] = requestParameters.filterStratifiedSubunits;
        }

        if (requestParameters.filterSelectedSubunits !== undefined) {
            queryParameters['filter[selected_subunits]'] = requestParameters.filterSelectedSubunits;
        }

        if (requestParameters.filterSurveyedSubunits !== undefined) {
            queryParameters['filter[surveyed_subunits]'] = requestParameters.filterSurveyedSubunits;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/data/summaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAerialSurveyDataSummariesResponseFromJSON(jsonValue));
    }

    /**
     * Index aerial survey data summaries.
     */
    async indexAerialSurveyDataSummaries(requestParameters: IndexAerialSurveyDataSummariesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAerialSurveyDataSummariesResponse> {
        const response = await this.indexAerialSurveyDataSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAerialSurveyDataSummariesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAerialSurveyDataSummariesFormatEnum = typeof ExportAerialSurveyDataSummariesFormatEnum[keyof typeof ExportAerialSurveyDataSummariesFormatEnum];
