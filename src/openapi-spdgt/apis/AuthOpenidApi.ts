/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OpenIDAccessTokenRequest,
  OpenIDAccessTokenResponse,
  OpenIDLoginRequest,
  OpenIDLoginResponse,
  OpenIDSignInUrlResponse,
} from '../models';
import {
    OpenIDAccessTokenRequestFromJSON,
    OpenIDAccessTokenRequestToJSON,
    OpenIDAccessTokenResponseFromJSON,
    OpenIDAccessTokenResponseToJSON,
    OpenIDLoginRequestFromJSON,
    OpenIDLoginRequestToJSON,
    OpenIDLoginResponseFromJSON,
    OpenIDLoginResponseToJSON,
    OpenIDSignInUrlResponseFromJSON,
    OpenIDSignInUrlResponseToJSON,
} from '../models';

export interface LoginWithOpenIDRequest {
    openIDLoginRequest: OpenIDLoginRequest;
}

export interface OpenIDGetSignInUrlRequest {
    clientId: string;
}

export interface OpenIDObtainAccessTokenRequest {
    openIDAccessTokenRequest: OpenIDAccessTokenRequest;
}

/**
 * 
 */
export class AuthOpenidApi extends runtime.BaseAPI {

    /**
     * Login with OpenID using email & password.
     */
    async loginWithOpenIDRaw(requestParameters: LoginWithOpenIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenIDLoginResponse>> {
        if (requestParameters.openIDLoginRequest === null || requestParameters.openIDLoginRequest === undefined) {
            throw new runtime.RequiredError('openIDLoginRequest','Required parameter requestParameters.openIDLoginRequest was null or undefined when calling loginWithOpenID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/openid/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenIDLoginRequestToJSON(requestParameters.openIDLoginRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenIDLoginResponseFromJSON(jsonValue));
    }

    /**
     * Login with OpenID using email & password.
     */
    async loginWithOpenID(requestParameters: LoginWithOpenIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenIDLoginResponse> {
        const response = await this.loginWithOpenIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get OpenID sign in URL.
     */
    async openIDGetSignInUrlRaw(requestParameters: OpenIDGetSignInUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenIDSignInUrlResponse>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling openIDGetSignInUrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/openid/url`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenIDSignInUrlResponseFromJSON(jsonValue));
    }

    /**
     * Get OpenID sign in URL.
     */
    async openIDGetSignInUrl(requestParameters: OpenIDGetSignInUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenIDSignInUrlResponse> {
        const response = await this.openIDGetSignInUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtain OpenID access token.
     */
    async openIDObtainAccessTokenRaw(requestParameters: OpenIDObtainAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenIDAccessTokenResponse>> {
        if (requestParameters.openIDAccessTokenRequest === null || requestParameters.openIDAccessTokenRequest === undefined) {
            throw new runtime.RequiredError('openIDAccessTokenRequest','Required parameter requestParameters.openIDAccessTokenRequest was null or undefined when calling openIDObtainAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/openid/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenIDAccessTokenRequestToJSON(requestParameters.openIDAccessTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenIDAccessTokenResponseFromJSON(jsonValue));
    }

    /**
     * Obtain OpenID access token.
     */
    async openIDObtainAccessToken(requestParameters: OpenIDObtainAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenIDAccessTokenResponse> {
        const response = await this.openIDObtainAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
