/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexAircraftResponse,
  ShowAircraftResponse,
  StoreAircraftRequest,
  StoreAircraftResponse,
  StoreMultipleAircraft200Response,
  StoreMultipleAircraftRequest,
  UpdateAircraftRequest,
  UpdateAircraftResponse,
  UpdateMultipleAircraft200Response,
  UpdateMultipleAircraftRequest,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAircraftResponseFromJSON,
    IndexAircraftResponseToJSON,
    ShowAircraftResponseFromJSON,
    ShowAircraftResponseToJSON,
    StoreAircraftRequestFromJSON,
    StoreAircraftRequestToJSON,
    StoreAircraftResponseFromJSON,
    StoreAircraftResponseToJSON,
    StoreMultipleAircraft200ResponseFromJSON,
    StoreMultipleAircraft200ResponseToJSON,
    StoreMultipleAircraftRequestFromJSON,
    StoreMultipleAircraftRequestToJSON,
    UpdateAircraftRequestFromJSON,
    UpdateAircraftRequestToJSON,
    UpdateAircraftResponseFromJSON,
    UpdateAircraftResponseToJSON,
    UpdateMultipleAircraft200ResponseFromJSON,
    UpdateMultipleAircraft200ResponseToJSON,
    UpdateMultipleAircraftRequestFromJSON,
    UpdateMultipleAircraftRequestToJSON,
} from '../models';

export interface DestroyAircraftRequest {
    id: number;
}

export interface ExportAircraftRequest {
    format: ExportAircraftFormatEnum;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterName?: string;
}

export interface IndexAircraftRequest {
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterName?: string;
}

export interface ShowAircraftRequest {
    id: number;
}

export interface StoreAircraftOperationRequest {
    storeAircraftRequest: StoreAircraftRequest;
}

export interface StoreMultipleAircraftOperationRequest {
    storeMultipleAircraftRequest: StoreMultipleAircraftRequest;
}

export interface UpdateAircraftOperationRequest {
    id: number;
    updateAircraftRequest: UpdateAircraftRequest;
}

export interface UpdateMultipleAircraftOperationRequest {
    updateMultipleAircraftRequest: UpdateMultipleAircraftRequest;
}

/**
 * 
 */
export class EnumAircraftApi extends runtime.BaseAPI {

    /**
     * Delete aircraft.
     */
    async destroyAircraftRaw(requestParameters: DestroyAircraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyAircraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aircraft/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete aircraft.
     */
    async destroyAircraft(requestParameters: DestroyAircraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyAircraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export aircraft in a selected format (csv, json, parquet).
     */
    async exportAircraftRaw(requestParameters: ExportAircraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAircraft.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aircraft/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export aircraft in a selected format (csv, json, parquet).
     */
    async exportAircraft(requestParameters: ExportAircraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAircraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index aircraft.
     */
    async indexAircraftRaw(requestParameters: IndexAircraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAircraftResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aircraft`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAircraftResponseFromJSON(jsonValue));
    }

    /**
     * Index aircraft.
     */
    async indexAircraft(requestParameters: IndexAircraftRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAircraftResponse> {
        const response = await this.indexAircraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show aircraft by id.
     */
    async showAircraftRaw(requestParameters: ShowAircraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowAircraftResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showAircraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aircraft/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowAircraftResponseFromJSON(jsonValue));
    }

    /**
     * Show aircraft by id.
     */
    async showAircraft(requestParameters: ShowAircraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowAircraftResponse> {
        const response = await this.showAircraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store aircraft.
     */
    async storeAircraftRaw(requestParameters: StoreAircraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreAircraftResponse>> {
        if (requestParameters.storeAircraftRequest === null || requestParameters.storeAircraftRequest === undefined) {
            throw new runtime.RequiredError('storeAircraftRequest','Required parameter requestParameters.storeAircraftRequest was null or undefined when calling storeAircraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aircraft`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreAircraftRequestToJSON(requestParameters.storeAircraftRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreAircraftResponseFromJSON(jsonValue));
    }

    /**
     * Store aircraft.
     */
    async storeAircraft(requestParameters: StoreAircraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreAircraftResponse> {
        const response = await this.storeAircraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple aircraft.
     */
    async storeMultipleAircraftRaw(requestParameters: StoreMultipleAircraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleAircraft200Response>> {
        if (requestParameters.storeMultipleAircraftRequest === null || requestParameters.storeMultipleAircraftRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleAircraftRequest','Required parameter requestParameters.storeMultipleAircraftRequest was null or undefined when calling storeMultipleAircraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aircraft/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleAircraftRequestToJSON(requestParameters.storeMultipleAircraftRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleAircraft200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple aircraft.
     */
    async storeMultipleAircraft(requestParameters: StoreMultipleAircraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleAircraft200Response> {
        const response = await this.storeMultipleAircraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update aircraft.
     */
    async updateAircraftRaw(requestParameters: UpdateAircraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAircraftResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAircraft.');
        }

        if (requestParameters.updateAircraftRequest === null || requestParameters.updateAircraftRequest === undefined) {
            throw new runtime.RequiredError('updateAircraftRequest','Required parameter requestParameters.updateAircraftRequest was null or undefined when calling updateAircraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aircraft/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAircraftRequestToJSON(requestParameters.updateAircraftRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAircraftResponseFromJSON(jsonValue));
    }

    /**
     * Update aircraft.
     */
    async updateAircraft(requestParameters: UpdateAircraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAircraftResponse> {
        const response = await this.updateAircraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple aircraft.
     */
    async updateMultipleAircraftRaw(requestParameters: UpdateMultipleAircraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleAircraft200Response>> {
        if (requestParameters.updateMultipleAircraftRequest === null || requestParameters.updateMultipleAircraftRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleAircraftRequest','Required parameter requestParameters.updateMultipleAircraftRequest was null or undefined when calling updateMultipleAircraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aircraft/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleAircraftRequestToJSON(requestParameters.updateMultipleAircraftRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleAircraft200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple aircraft.
     */
    async updateMultipleAircraft(requestParameters: UpdateMultipleAircraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleAircraft200Response> {
        const response = await this.updateMultipleAircraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAircraftFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAircraftFormatEnum = typeof ExportAircraftFormatEnum[keyof typeof ExportAircraftFormatEnum];
