/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexCountCategoriesResponse,
  ShowCountCategoryResponse,
  StoreCountCategoryRequest,
  StoreCountCategoryResponse,
  StoreMultipleCountCategories200Response,
  StoreMultipleCountCategoriesRequest,
  UpdateCountCategoryRequest,
  UpdateCountCategoryResponse,
  UpdateMultipleCountCategories200Response,
  UpdateMultipleCountCategoriesRequest,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexCountCategoriesResponseFromJSON,
    IndexCountCategoriesResponseToJSON,
    ShowCountCategoryResponseFromJSON,
    ShowCountCategoryResponseToJSON,
    StoreCountCategoryRequestFromJSON,
    StoreCountCategoryRequestToJSON,
    StoreCountCategoryResponseFromJSON,
    StoreCountCategoryResponseToJSON,
    StoreMultipleCountCategories200ResponseFromJSON,
    StoreMultipleCountCategories200ResponseToJSON,
    StoreMultipleCountCategoriesRequestFromJSON,
    StoreMultipleCountCategoriesRequestToJSON,
    UpdateCountCategoryRequestFromJSON,
    UpdateCountCategoryRequestToJSON,
    UpdateCountCategoryResponseFromJSON,
    UpdateCountCategoryResponseToJSON,
    UpdateMultipleCountCategories200ResponseFromJSON,
    UpdateMultipleCountCategories200ResponseToJSON,
    UpdateMultipleCountCategoriesRequestFromJSON,
    UpdateMultipleCountCategoriesRequestToJSON,
} from '../models';

export interface DestroyCountCategoryRequest {
    id: number;
}

export interface ExportCountCategoriesRequest {
    format: ExportCountCategoriesFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterBetaId1?: string;
    filterBetaId2?: string;
    filterModelId?: string;
    filterVcov?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexCountCategoriesRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterSurveyTypeId?: string;
    filterModelId?: string;
    filterAbbreviation?: string;
    filterName?: string;
    filterAgeClass?: string;
    filterSex?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowCountCategoryRequest {
    id: number;
    includes?: string;
}

export interface StoreCountCategoryOperationRequest {
    storeCountCategoryRequest: StoreCountCategoryRequest;
}

export interface StoreMultipleCountCategoriesOperationRequest {
    storeMultipleCountCategoriesRequest: StoreMultipleCountCategoriesRequest;
}

export interface UpdateCountCategoryOperationRequest {
    id: number;
    updateCountCategoryRequest: UpdateCountCategoryRequest;
}

export interface UpdateMultipleCountCategoriesOperationRequest {
    updateMultipleCountCategoriesRequest: UpdateMultipleCountCategoriesRequest;
}

/**
 * 
 */
export class ModelCountCategoriesApi extends runtime.BaseAPI {

    /**
     * Delete count category.
     */
    async destroyCountCategoryRaw(requestParameters: DestroyCountCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyCountCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/count-categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete count category.
     */
    async destroyCountCategory(requestParameters: DestroyCountCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyCountCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export count categories in a selected format (csv, json, parquet).
     */
    async exportCountCategoriesRaw(requestParameters: ExportCountCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportCountCategories.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterBetaId1 !== undefined) {
            queryParameters['filter[beta_id1]'] = requestParameters.filterBetaId1;
        }

        if (requestParameters.filterBetaId2 !== undefined) {
            queryParameters['filter[beta_id2]'] = requestParameters.filterBetaId2;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterVcov !== undefined) {
            queryParameters['filter[vcov]'] = requestParameters.filterVcov;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/count-categories/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export count categories in a selected format (csv, json, parquet).
     */
    async exportCountCategories(requestParameters: ExportCountCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportCountCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index count categories.
     */
    async indexCountCategoriesRaw(requestParameters: IndexCountCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexCountCategoriesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterAbbreviation !== undefined) {
            queryParameters['filter[abbreviation]'] = requestParameters.filterAbbreviation;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterAgeClass !== undefined) {
            queryParameters['filter[age_class]'] = requestParameters.filterAgeClass;
        }

        if (requestParameters.filterSex !== undefined) {
            queryParameters['filter[sex]'] = requestParameters.filterSex;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/count-categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCountCategoriesResponseFromJSON(jsonValue));
    }

    /**
     * Index count categories.
     */
    async indexCountCategories(requestParameters: IndexCountCategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexCountCategoriesResponse> {
        const response = await this.indexCountCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show count category by id.
     */
    async showCountCategoryRaw(requestParameters: ShowCountCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowCountCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showCountCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/count-categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowCountCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Show count category by id.
     */
    async showCountCategory(requestParameters: ShowCountCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowCountCategoryResponse> {
        const response = await this.showCountCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store count category.
     */
    async storeCountCategoryRaw(requestParameters: StoreCountCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreCountCategoryResponse>> {
        if (requestParameters.storeCountCategoryRequest === null || requestParameters.storeCountCategoryRequest === undefined) {
            throw new runtime.RequiredError('storeCountCategoryRequest','Required parameter requestParameters.storeCountCategoryRequest was null or undefined when calling storeCountCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/count-categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreCountCategoryRequestToJSON(requestParameters.storeCountCategoryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreCountCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Store count category.
     */
    async storeCountCategory(requestParameters: StoreCountCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreCountCategoryResponse> {
        const response = await this.storeCountCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple count categories.
     */
    async storeMultipleCountCategoriesRaw(requestParameters: StoreMultipleCountCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleCountCategories200Response>> {
        if (requestParameters.storeMultipleCountCategoriesRequest === null || requestParameters.storeMultipleCountCategoriesRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleCountCategoriesRequest','Required parameter requestParameters.storeMultipleCountCategoriesRequest was null or undefined when calling storeMultipleCountCategories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/count-categories/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleCountCategoriesRequestToJSON(requestParameters.storeMultipleCountCategoriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleCountCategories200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple count categories.
     */
    async storeMultipleCountCategories(requestParameters: StoreMultipleCountCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleCountCategories200Response> {
        const response = await this.storeMultipleCountCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update count category.
     */
    async updateCountCategoryRaw(requestParameters: UpdateCountCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCountCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCountCategory.');
        }

        if (requestParameters.updateCountCategoryRequest === null || requestParameters.updateCountCategoryRequest === undefined) {
            throw new runtime.RequiredError('updateCountCategoryRequest','Required parameter requestParameters.updateCountCategoryRequest was null or undefined when calling updateCountCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/count-categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCountCategoryRequestToJSON(requestParameters.updateCountCategoryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCountCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Update count category.
     */
    async updateCountCategory(requestParameters: UpdateCountCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCountCategoryResponse> {
        const response = await this.updateCountCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple count categories.
     */
    async updateMultipleCountCategoriesRaw(requestParameters: UpdateMultipleCountCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleCountCategories200Response>> {
        if (requestParameters.updateMultipleCountCategoriesRequest === null || requestParameters.updateMultipleCountCategoriesRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleCountCategoriesRequest','Required parameter requestParameters.updateMultipleCountCategoriesRequest was null or undefined when calling updateMultipleCountCategories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/count-categories/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleCountCategoriesRequestToJSON(requestParameters.updateMultipleCountCategoriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleCountCategories200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple count categories.
     */
    async updateMultipleCountCategories(requestParameters: UpdateMultipleCountCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleCountCategories200Response> {
        const response = await this.updateMultipleCountCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportCountCategoriesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportCountCategoriesFormatEnum = typeof ExportCountCategoriesFormatEnum[keyof typeof ExportCountCategoriesFormatEnum];
