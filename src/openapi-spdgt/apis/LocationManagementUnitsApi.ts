/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexManagementUnitsResponse,
  ShowManagementUnitResponse,
  StoreManagementUnitRequest,
  StoreManagementUnitResponse,
  StoreMultipleManagementUnits200Response,
  StoreMultipleManagementUnitsRequest,
  UpdateManagementUnitRequest,
  UpdateManagementUnitResponse,
  UpdateMultipleManagementUnits200Response,
  UpdateMultipleManagementUnitsRequest,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexManagementUnitsResponseFromJSON,
    IndexManagementUnitsResponseToJSON,
    ShowManagementUnitResponseFromJSON,
    ShowManagementUnitResponseToJSON,
    StoreManagementUnitRequestFromJSON,
    StoreManagementUnitRequestToJSON,
    StoreManagementUnitResponseFromJSON,
    StoreManagementUnitResponseToJSON,
    StoreMultipleManagementUnits200ResponseFromJSON,
    StoreMultipleManagementUnits200ResponseToJSON,
    StoreMultipleManagementUnitsRequestFromJSON,
    StoreMultipleManagementUnitsRequestToJSON,
    UpdateManagementUnitRequestFromJSON,
    UpdateManagementUnitRequestToJSON,
    UpdateManagementUnitResponseFromJSON,
    UpdateManagementUnitResponseToJSON,
    UpdateMultipleManagementUnits200ResponseFromJSON,
    UpdateMultipleManagementUnits200ResponseToJSON,
    UpdateMultipleManagementUnitsRequestFromJSON,
    UpdateMultipleManagementUnitsRequestToJSON,
} from '../models';

export interface DestroyManagementUnitRequest {
    id: number;
}

export interface ExportManagementUnitsRequest {
    format: ExportManagementUnitsFormatEnum;
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    srid?: number;
    filterId?: string;
    filterAnalysisUnitId?: string;
    filterRegionId?: string;
    filterProjectId?: string;
    filterSpeciesId?: string;
    filterName?: string;
    filterAbbreviation?: string;
    filterNumber?: string;
    filterSortOrder?: string;
}

export interface IndexManagementUnitsRequest {
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    srid?: number;
    filterId?: string;
    filterAnalysisUnitId?: string;
    filterRegionId?: string;
    filterProjectId?: string;
    filterSpeciesId?: string;
    filterName?: string;
    filterAbbreviation?: string;
    filterNumber?: string;
    filterSortOrder?: string;
}

export interface ShowManagementUnitRequest {
    id: number;
    appends?: string;
    includes?: string;
    srid?: number;
}

export interface StoreManagementUnitOperationRequest {
    storeManagementUnitRequest: StoreManagementUnitRequest;
}

export interface StoreMultipleManagementUnitsOperationRequest {
    storeMultipleManagementUnitsRequest: StoreMultipleManagementUnitsRequest;
}

export interface UpdateManagementUnitOperationRequest {
    id: number;
    updateManagementUnitRequest: UpdateManagementUnitRequest;
}

export interface UpdateMultipleManagementUnitsOperationRequest {
    updateMultipleManagementUnitsRequest: UpdateMultipleManagementUnitsRequest;
}

/**
 * 
 */
export class LocationManagementUnitsApi extends runtime.BaseAPI {

    /**
     * Delete management unit.
     */
    async destroyManagementUnitRaw(requestParameters: DestroyManagementUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyManagementUnit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/management-units/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete management unit.
     */
    async destroyManagementUnit(requestParameters: DestroyManagementUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyManagementUnitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export management units in a selected format (csv, json, parquet).
     */
    async exportManagementUnitsRaw(requestParameters: ExportManagementUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportManagementUnits.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterRegionId !== undefined) {
            queryParameters['filter[region_id]'] = requestParameters.filterRegionId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterAbbreviation !== undefined) {
            queryParameters['filter[abbreviation]'] = requestParameters.filterAbbreviation;
        }

        if (requestParameters.filterNumber !== undefined) {
            queryParameters['filter[number]'] = requestParameters.filterNumber;
        }

        if (requestParameters.filterSortOrder !== undefined) {
            queryParameters['filter[sort_order]'] = requestParameters.filterSortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/management-units/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export management units in a selected format (csv, json, parquet).
     */
    async exportManagementUnits(requestParameters: ExportManagementUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportManagementUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index management units.
     */
    async indexManagementUnitsRaw(requestParameters: IndexManagementUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexManagementUnitsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterRegionId !== undefined) {
            queryParameters['filter[region_id]'] = requestParameters.filterRegionId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterAbbreviation !== undefined) {
            queryParameters['filter[abbreviation]'] = requestParameters.filterAbbreviation;
        }

        if (requestParameters.filterNumber !== undefined) {
            queryParameters['filter[number]'] = requestParameters.filterNumber;
        }

        if (requestParameters.filterSortOrder !== undefined) {
            queryParameters['filter[sort_order]'] = requestParameters.filterSortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/management-units`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexManagementUnitsResponseFromJSON(jsonValue));
    }

    /**
     * Index management units.
     */
    async indexManagementUnits(requestParameters: IndexManagementUnitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexManagementUnitsResponse> {
        const response = await this.indexManagementUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show management unit by id.
     */
    async showManagementUnitRaw(requestParameters: ShowManagementUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowManagementUnitResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showManagementUnit.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/management-units/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowManagementUnitResponseFromJSON(jsonValue));
    }

    /**
     * Show management unit by id.
     */
    async showManagementUnit(requestParameters: ShowManagementUnitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowManagementUnitResponse> {
        const response = await this.showManagementUnitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store management unit.
     */
    async storeManagementUnitRaw(requestParameters: StoreManagementUnitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreManagementUnitResponse>> {
        if (requestParameters.storeManagementUnitRequest === null || requestParameters.storeManagementUnitRequest === undefined) {
            throw new runtime.RequiredError('storeManagementUnitRequest','Required parameter requestParameters.storeManagementUnitRequest was null or undefined when calling storeManagementUnit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/management-units`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreManagementUnitRequestToJSON(requestParameters.storeManagementUnitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreManagementUnitResponseFromJSON(jsonValue));
    }

    /**
     * Store management unit.
     */
    async storeManagementUnit(requestParameters: StoreManagementUnitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreManagementUnitResponse> {
        const response = await this.storeManagementUnitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple management units.
     */
    async storeMultipleManagementUnitsRaw(requestParameters: StoreMultipleManagementUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleManagementUnits200Response>> {
        if (requestParameters.storeMultipleManagementUnitsRequest === null || requestParameters.storeMultipleManagementUnitsRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleManagementUnitsRequest','Required parameter requestParameters.storeMultipleManagementUnitsRequest was null or undefined when calling storeMultipleManagementUnits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/management-units/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleManagementUnitsRequestToJSON(requestParameters.storeMultipleManagementUnitsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleManagementUnits200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple management units.
     */
    async storeMultipleManagementUnits(requestParameters: StoreMultipleManagementUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleManagementUnits200Response> {
        const response = await this.storeMultipleManagementUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update management unit.
     */
    async updateManagementUnitRaw(requestParameters: UpdateManagementUnitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateManagementUnitResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateManagementUnit.');
        }

        if (requestParameters.updateManagementUnitRequest === null || requestParameters.updateManagementUnitRequest === undefined) {
            throw new runtime.RequiredError('updateManagementUnitRequest','Required parameter requestParameters.updateManagementUnitRequest was null or undefined when calling updateManagementUnit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/management-units/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateManagementUnitRequestToJSON(requestParameters.updateManagementUnitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateManagementUnitResponseFromJSON(jsonValue));
    }

    /**
     * Update management unit.
     */
    async updateManagementUnit(requestParameters: UpdateManagementUnitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateManagementUnitResponse> {
        const response = await this.updateManagementUnitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple management units.
     */
    async updateMultipleManagementUnitsRaw(requestParameters: UpdateMultipleManagementUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleManagementUnits200Response>> {
        if (requestParameters.updateMultipleManagementUnitsRequest === null || requestParameters.updateMultipleManagementUnitsRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleManagementUnitsRequest','Required parameter requestParameters.updateMultipleManagementUnitsRequest was null or undefined when calling updateMultipleManagementUnits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/management-units/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleManagementUnitsRequestToJSON(requestParameters.updateMultipleManagementUnitsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleManagementUnits200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple management units.
     */
    async updateMultipleManagementUnits(requestParameters: UpdateMultipleManagementUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleManagementUnits200Response> {
        const response = await this.updateMultipleManagementUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportManagementUnitsFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportManagementUnitsFormatEnum = typeof ExportManagementUnitsFormatEnum[keyof typeof ExportManagementUnitsFormatEnum];
