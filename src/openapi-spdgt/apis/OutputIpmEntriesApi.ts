/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexIpmEntriesResponse,
  ShowIpmEntryResponse,
  StoreIpmEntryRequest,
  StoreIpmEntryResponse,
  StoreMultipleIpmEntries200Response,
  StoreMultipleIpmEntriesRequest,
  UpdateIpmEntryRequest,
  UpdateIpmEntryResponse,
  UpdateMultipleIpmEntries200Response,
  UpdateMultipleIpmEntriesRequest,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexIpmEntriesResponseFromJSON,
    IndexIpmEntriesResponseToJSON,
    ShowIpmEntryResponseFromJSON,
    ShowIpmEntryResponseToJSON,
    StoreIpmEntryRequestFromJSON,
    StoreIpmEntryRequestToJSON,
    StoreIpmEntryResponseFromJSON,
    StoreIpmEntryResponseToJSON,
    StoreMultipleIpmEntries200ResponseFromJSON,
    StoreMultipleIpmEntries200ResponseToJSON,
    StoreMultipleIpmEntriesRequestFromJSON,
    StoreMultipleIpmEntriesRequestToJSON,
    UpdateIpmEntryRequestFromJSON,
    UpdateIpmEntryRequestToJSON,
    UpdateIpmEntryResponseFromJSON,
    UpdateIpmEntryResponseToJSON,
    UpdateMultipleIpmEntries200ResponseFromJSON,
    UpdateMultipleIpmEntries200ResponseToJSON,
    UpdateMultipleIpmEntriesRequestFromJSON,
    UpdateMultipleIpmEntriesRequestToJSON,
} from '../models';

export interface DestroyOutputIpmEntryRequest {
    id: number;
}

export interface ExportOutputIpmEntriesRequest {
    format: ExportOutputIpmEntriesFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterOutputId?: string;
    filterSpeciesId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterYear?: string;
    filterMonth?: string;
    filterAge?: string;
    filterSex?: string;
    filterParameterId?: string;
    filterMean?: string;
    filterSe?: string;
    filterLcl?: string;
    filterUcl?: string;
    filterSource?: string;
    filterMethod?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexOutputIpmEntriesRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterOutputId?: string;
    filterSpeciesId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterYear?: string;
    filterMonth?: string;
    filterAge?: string;
    filterSex?: string;
    filterParameterId?: string;
    filterMean?: string;
    filterSe?: string;
    filterLcl?: string;
    filterUcl?: string;
    filterSource?: string;
    filterMethod?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowOutputIpmEntryRequest {
    id: number;
    includes?: string;
}

export interface StoreMultipleIpmEntriesOperationRequest {
    storeMultipleIpmEntriesRequest: StoreMultipleIpmEntriesRequest;
}

export interface StoreOutputIpmEntryRequest {
    storeIpmEntryRequest: StoreIpmEntryRequest;
}

export interface UpdateMultipleIpmEntriesOperationRequest {
    updateMultipleIpmEntriesRequest: UpdateMultipleIpmEntriesRequest;
}

export interface UpdateOutputIpmEntryRequest {
    id: number;
    updateIpmEntryRequest: UpdateIpmEntryRequest;
}

/**
 * 
 */
export class OutputIpmEntriesApi extends runtime.BaseAPI {

    /**
     * Delete model output IPM entry.
     */
    async destroyOutputIpmEntryRaw(requestParameters: DestroyOutputIpmEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyOutputIpmEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/ipm-entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete model output IPM entry.
     */
    async destroyOutputIpmEntry(requestParameters: DestroyOutputIpmEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyOutputIpmEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export IPM entries in a selected format (csv, json, parquet).
     */
    async exportOutputIpmEntriesRaw(requestParameters: ExportOutputIpmEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportOutputIpmEntries.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterOutputId !== undefined) {
            queryParameters['filter[output_id]'] = requestParameters.filterOutputId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterYear !== undefined) {
            queryParameters['filter[year]'] = requestParameters.filterYear;
        }

        if (requestParameters.filterMonth !== undefined) {
            queryParameters['filter[month]'] = requestParameters.filterMonth;
        }

        if (requestParameters.filterAge !== undefined) {
            queryParameters['filter[age]'] = requestParameters.filterAge;
        }

        if (requestParameters.filterSex !== undefined) {
            queryParameters['filter[sex]'] = requestParameters.filterSex;
        }

        if (requestParameters.filterParameterId !== undefined) {
            queryParameters['filter[parameter_id]'] = requestParameters.filterParameterId;
        }

        if (requestParameters.filterMean !== undefined) {
            queryParameters['filter[mean]'] = requestParameters.filterMean;
        }

        if (requestParameters.filterSe !== undefined) {
            queryParameters['filter[se]'] = requestParameters.filterSe;
        }

        if (requestParameters.filterLcl !== undefined) {
            queryParameters['filter[lcl]'] = requestParameters.filterLcl;
        }

        if (requestParameters.filterUcl !== undefined) {
            queryParameters['filter[ucl]'] = requestParameters.filterUcl;
        }

        if (requestParameters.filterSource !== undefined) {
            queryParameters['filter[source]'] = requestParameters.filterSource;
        }

        if (requestParameters.filterMethod !== undefined) {
            queryParameters['filter[method]'] = requestParameters.filterMethod;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/ipm-entries/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export IPM entries in a selected format (csv, json, parquet).
     */
    async exportOutputIpmEntries(requestParameters: ExportOutputIpmEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportOutputIpmEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index model ouput IPM entries.
     */
    async indexOutputIpmEntriesRaw(requestParameters: IndexOutputIpmEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexIpmEntriesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterOutputId !== undefined) {
            queryParameters['filter[output_id]'] = requestParameters.filterOutputId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterYear !== undefined) {
            queryParameters['filter[year]'] = requestParameters.filterYear;
        }

        if (requestParameters.filterMonth !== undefined) {
            queryParameters['filter[month]'] = requestParameters.filterMonth;
        }

        if (requestParameters.filterAge !== undefined) {
            queryParameters['filter[age]'] = requestParameters.filterAge;
        }

        if (requestParameters.filterSex !== undefined) {
            queryParameters['filter[sex]'] = requestParameters.filterSex;
        }

        if (requestParameters.filterParameterId !== undefined) {
            queryParameters['filter[parameter_id]'] = requestParameters.filterParameterId;
        }

        if (requestParameters.filterMean !== undefined) {
            queryParameters['filter[mean]'] = requestParameters.filterMean;
        }

        if (requestParameters.filterSe !== undefined) {
            queryParameters['filter[se]'] = requestParameters.filterSe;
        }

        if (requestParameters.filterLcl !== undefined) {
            queryParameters['filter[lcl]'] = requestParameters.filterLcl;
        }

        if (requestParameters.filterUcl !== undefined) {
            queryParameters['filter[ucl]'] = requestParameters.filterUcl;
        }

        if (requestParameters.filterSource !== undefined) {
            queryParameters['filter[source]'] = requestParameters.filterSource;
        }

        if (requestParameters.filterMethod !== undefined) {
            queryParameters['filter[method]'] = requestParameters.filterMethod;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/ipm-entries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexIpmEntriesResponseFromJSON(jsonValue));
    }

    /**
     * Index model ouput IPM entries.
     */
    async indexOutputIpmEntries(requestParameters: IndexOutputIpmEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexIpmEntriesResponse> {
        const response = await this.indexOutputIpmEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show model output IPM entry by id.
     */
    async showOutputIpmEntryRaw(requestParameters: ShowOutputIpmEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowIpmEntryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showOutputIpmEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/ipm-entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowIpmEntryResponseFromJSON(jsonValue));
    }

    /**
     * Show model output IPM entry by id.
     */
    async showOutputIpmEntry(requestParameters: ShowOutputIpmEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowIpmEntryResponse> {
        const response = await this.showOutputIpmEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store IPM entries.
     */
    async storeMultipleIpmEntriesRaw(requestParameters: StoreMultipleIpmEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleIpmEntries200Response>> {
        if (requestParameters.storeMultipleIpmEntriesRequest === null || requestParameters.storeMultipleIpmEntriesRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleIpmEntriesRequest','Required parameter requestParameters.storeMultipleIpmEntriesRequest was null or undefined when calling storeMultipleIpmEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/ipm-entries/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleIpmEntriesRequestToJSON(requestParameters.storeMultipleIpmEntriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleIpmEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Store IPM entries.
     */
    async storeMultipleIpmEntries(requestParameters: StoreMultipleIpmEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleIpmEntries200Response> {
        const response = await this.storeMultipleIpmEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store model output IPM entry.
     */
    async storeOutputIpmEntryRaw(requestParameters: StoreOutputIpmEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreIpmEntryResponse>> {
        if (requestParameters.storeIpmEntryRequest === null || requestParameters.storeIpmEntryRequest === undefined) {
            throw new runtime.RequiredError('storeIpmEntryRequest','Required parameter requestParameters.storeIpmEntryRequest was null or undefined when calling storeOutputIpmEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/ipm-entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreIpmEntryRequestToJSON(requestParameters.storeIpmEntryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreIpmEntryResponseFromJSON(jsonValue));
    }

    /**
     * Store model output IPM entry.
     */
    async storeOutputIpmEntry(requestParameters: StoreOutputIpmEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreIpmEntryResponse> {
        const response = await this.storeOutputIpmEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update IPM entries.
     */
    async updateMultipleIpmEntriesRaw(requestParameters: UpdateMultipleIpmEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleIpmEntries200Response>> {
        if (requestParameters.updateMultipleIpmEntriesRequest === null || requestParameters.updateMultipleIpmEntriesRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleIpmEntriesRequest','Required parameter requestParameters.updateMultipleIpmEntriesRequest was null or undefined when calling updateMultipleIpmEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/ipm-entries/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleIpmEntriesRequestToJSON(requestParameters.updateMultipleIpmEntriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleIpmEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Update IPM entries.
     */
    async updateMultipleIpmEntries(requestParameters: UpdateMultipleIpmEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleIpmEntries200Response> {
        const response = await this.updateMultipleIpmEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update model output IPM entry.
     */
    async updateOutputIpmEntryRaw(requestParameters: UpdateOutputIpmEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateIpmEntryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOutputIpmEntry.');
        }

        if (requestParameters.updateIpmEntryRequest === null || requestParameters.updateIpmEntryRequest === undefined) {
            throw new runtime.RequiredError('updateIpmEntryRequest','Required parameter requestParameters.updateIpmEntryRequest was null or undefined when calling updateOutputIpmEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/ipm-entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIpmEntryRequestToJSON(requestParameters.updateIpmEntryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateIpmEntryResponseFromJSON(jsonValue));
    }

    /**
     * Update model output IPM entry.
     */
    async updateOutputIpmEntry(requestParameters: UpdateOutputIpmEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateIpmEntryResponse> {
        const response = await this.updateOutputIpmEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportOutputIpmEntriesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportOutputIpmEntriesFormatEnum = typeof ExportOutputIpmEntriesFormatEnum[keyof typeof ExportOutputIpmEntriesFormatEnum];
