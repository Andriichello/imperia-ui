/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DesignSampleRequest,
  DesignSampleResponse,
  DestroyResponse,
  ExportIndexResponse,
  IndexAerialSurveyDesignsResponse,
  ShowAerialSurveyDesignResponse,
  StoreAerialSurveyDesignRequest,
  StoreAerialSurveyDesignResponse,
  StoreMultipleAerialSurveyDesigns200Response,
  StoreMultipleAerialSurveyDesignsRequest,
  SyncAerialSurveyDesignsRequest,
  SyncAerialSurveyDesignsResponse,
  UpdateAerialSurveyDesignRequest,
  UpdateAerialSurveyDesignResponse,
  UpdateMultipleAerialSurveyDesigns200Response,
  UpdateMultipleAerialSurveyDesignsRequest,
} from '../models';
import {
    DesignSampleRequestFromJSON,
    DesignSampleRequestToJSON,
    DesignSampleResponseFromJSON,
    DesignSampleResponseToJSON,
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAerialSurveyDesignsResponseFromJSON,
    IndexAerialSurveyDesignsResponseToJSON,
    ShowAerialSurveyDesignResponseFromJSON,
    ShowAerialSurveyDesignResponseToJSON,
    StoreAerialSurveyDesignRequestFromJSON,
    StoreAerialSurveyDesignRequestToJSON,
    StoreAerialSurveyDesignResponseFromJSON,
    StoreAerialSurveyDesignResponseToJSON,
    StoreMultipleAerialSurveyDesigns200ResponseFromJSON,
    StoreMultipleAerialSurveyDesigns200ResponseToJSON,
    StoreMultipleAerialSurveyDesignsRequestFromJSON,
    StoreMultipleAerialSurveyDesignsRequestToJSON,
    SyncAerialSurveyDesignsRequestFromJSON,
    SyncAerialSurveyDesignsRequestToJSON,
    SyncAerialSurveyDesignsResponseFromJSON,
    SyncAerialSurveyDesignsResponseToJSON,
    UpdateAerialSurveyDesignRequestFromJSON,
    UpdateAerialSurveyDesignRequestToJSON,
    UpdateAerialSurveyDesignResponseFromJSON,
    UpdateAerialSurveyDesignResponseToJSON,
    UpdateMultipleAerialSurveyDesigns200ResponseFromJSON,
    UpdateMultipleAerialSurveyDesigns200ResponseToJSON,
    UpdateMultipleAerialSurveyDesignsRequestFromJSON,
    UpdateMultipleAerialSurveyDesignsRequestToJSON,
} from '../models';

export interface DestroyAerialSurveyDesignRequest {
    id: number;
}

export interface ExportAerialSurveyDesignsRequest {
    format: ExportAerialSurveyDesignsFormatEnum;
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterSurveyTypeId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterSubunitId?: string;
    filterStratumId?: string;
    filterBioYear?: string;
    filterIsSelected?: string;
    filterIsSurveyed?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ExportAerialSurveyDesignsGeoRequest {
    bioYear: number;
    surveyTypeId: number;
    analysisUnitId: number;
    as: ExportAerialSurveyDesignsGeoAsEnum;
    _function?: ExportAerialSurveyDesignsGeoFunctionEnum;
    singleTrack?: boolean;
    srid?: number;
    filterManagementUnitId?: string;
    filterStratumId?: string;
    filterBioYear?: string;
    filterIsSelected?: string;
    filterIsSurveyed?: string;
}

export interface IndexAerialSurveyDesignsRequest {
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterSurveyTypeId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterSubunitId?: string;
    filterStratumId?: string;
    filterBioYear?: string;
    filterIsSelected?: string;
    filterIsSurveyed?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface SampleAerialSurveyDesignRequest {
    designSampleRequest: DesignSampleRequest;
}

export interface SaveAerialSurveyDesignsRequest {
    syncAerialSurveyDesignsRequest: SyncAerialSurveyDesignsRequest;
}

export interface ShowAerialSurveyDesignRequest {
    id: number;
    appends?: string;
    includes?: string;
}

export interface StoreAerialSurveyDesignOperationRequest {
    storeAerialSurveyDesignRequest: StoreAerialSurveyDesignRequest;
}

export interface StoreMultipleAerialSurveyDesignsOperationRequest {
    storeMultipleAerialSurveyDesignsRequest: StoreMultipleAerialSurveyDesignsRequest;
}

export interface UpdateAerialSurveyDesignOperationRequest {
    id: number;
    updateAerialSurveyDesignRequest: UpdateAerialSurveyDesignRequest;
}

export interface UpdateMultipleAerialSurveyDesignsOperationRequest {
    updateMultipleAerialSurveyDesignsRequest: UpdateMultipleAerialSurveyDesignsRequest;
}

/**
 * 
 */
export class SightAerialSurveyDesignsApi extends runtime.BaseAPI {

    /**
     * Delete aerial survey design.
     */
    async destroyAerialSurveyDesignRaw(requestParameters: DestroyAerialSurveyDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyAerialSurveyDesign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete aerial survey design.
     */
    async destroyAerialSurveyDesign(requestParameters: DestroyAerialSurveyDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyAerialSurveyDesignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export aerial survey designs in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyDesignsRaw(requestParameters: ExportAerialSurveyDesignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAerialSurveyDesigns.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterSubunitId !== undefined) {
            queryParameters['filter[subunit_id]'] = requestParameters.filterSubunitId;
        }

        if (requestParameters.filterStratumId !== undefined) {
            queryParameters['filter[stratum_id]'] = requestParameters.filterStratumId;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterIsSelected !== undefined) {
            queryParameters['filter[is_selected]'] = requestParameters.filterIsSelected;
        }

        if (requestParameters.filterIsSurveyed !== undefined) {
            queryParameters['filter[is_surveyed]'] = requestParameters.filterIsSurveyed;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export aerial survey designs in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyDesigns(requestParameters: ExportAerialSurveyDesignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAerialSurveyDesignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export Geo information for aerial survey designs.
     */
    async exportAerialSurveyDesignsGeoRaw(requestParameters: ExportAerialSurveyDesignsGeoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.bioYear === null || requestParameters.bioYear === undefined) {
            throw new runtime.RequiredError('bioYear','Required parameter requestParameters.bioYear was null or undefined when calling exportAerialSurveyDesignsGeo.');
        }

        if (requestParameters.surveyTypeId === null || requestParameters.surveyTypeId === undefined) {
            throw new runtime.RequiredError('surveyTypeId','Required parameter requestParameters.surveyTypeId was null or undefined when calling exportAerialSurveyDesignsGeo.');
        }

        if (requestParameters.analysisUnitId === null || requestParameters.analysisUnitId === undefined) {
            throw new runtime.RequiredError('analysisUnitId','Required parameter requestParameters.analysisUnitId was null or undefined when calling exportAerialSurveyDesignsGeo.');
        }

        if (requestParameters.as === null || requestParameters.as === undefined) {
            throw new runtime.RequiredError('as','Required parameter requestParameters.as was null or undefined when calling exportAerialSurveyDesignsGeo.');
        }

        const queryParameters: any = {};

        if (requestParameters.bioYear !== undefined) {
            queryParameters['bio_year'] = requestParameters.bioYear;
        }

        if (requestParameters.surveyTypeId !== undefined) {
            queryParameters['survey_type_id'] = requestParameters.surveyTypeId;
        }

        if (requestParameters.analysisUnitId !== undefined) {
            queryParameters['analysis_unit_id'] = requestParameters.analysisUnitId;
        }

        if (requestParameters.as !== undefined) {
            queryParameters['as'] = requestParameters.as;
        }

        if (requestParameters._function !== undefined) {
            queryParameters['function'] = requestParameters._function;
        }

        if (requestParameters.singleTrack !== undefined) {
            queryParameters['single_track'] = requestParameters.singleTrack;
        }

        if (requestParameters.srid !== undefined) {
            queryParameters['srid'] = requestParameters.srid;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterStratumId !== undefined) {
            queryParameters['filter[stratum_id]'] = requestParameters.filterStratumId;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterIsSelected !== undefined) {
            queryParameters['filter[is_selected]'] = requestParameters.filterIsSelected;
        }

        if (requestParameters.filterIsSurveyed !== undefined) {
            queryParameters['filter[is_surveyed]'] = requestParameters.filterIsSurveyed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/geo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Geo information for aerial survey designs.
     */
    async exportAerialSurveyDesignsGeo(requestParameters: ExportAerialSurveyDesignsGeoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.exportAerialSurveyDesignsGeoRaw(requestParameters, initOverrides);
    }

    /**
     * Index aerial survey designs.
     */
    async indexAerialSurveyDesignsRaw(requestParameters: IndexAerialSurveyDesignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAerialSurveyDesignsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterSubunitId !== undefined) {
            queryParameters['filter[subunit_id]'] = requestParameters.filterSubunitId;
        }

        if (requestParameters.filterStratumId !== undefined) {
            queryParameters['filter[stratum_id]'] = requestParameters.filterStratumId;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterIsSelected !== undefined) {
            queryParameters['filter[is_selected]'] = requestParameters.filterIsSelected;
        }

        if (requestParameters.filterIsSurveyed !== undefined) {
            queryParameters['filter[is_surveyed]'] = requestParameters.filterIsSurveyed;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAerialSurveyDesignsResponseFromJSON(jsonValue));
    }

    /**
     * Index aerial survey designs.
     */
    async indexAerialSurveyDesigns(requestParameters: IndexAerialSurveyDesignsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAerialSurveyDesignsResponse> {
        const response = await this.indexAerialSurveyDesignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample aerial survey designs.
     */
    async sampleAerialSurveyDesignRaw(requestParameters: SampleAerialSurveyDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DesignSampleResponse>> {
        if (requestParameters.designSampleRequest === null || requestParameters.designSampleRequest === undefined) {
            throw new runtime.RequiredError('designSampleRequest','Required parameter requestParameters.designSampleRequest was null or undefined when calling sampleAerialSurveyDesign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/sample`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DesignSampleRequestToJSON(requestParameters.designSampleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DesignSampleResponseFromJSON(jsonValue));
    }

    /**
     * Sample aerial survey designs.
     */
    async sampleAerialSurveyDesign(requestParameters: SampleAerialSurveyDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DesignSampleResponse> {
        const response = await this.sampleAerialSurveyDesignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync aerial survey designs for given survey type, bio year             and location (analysis/management unit). What you submit will be             stored in the database other (existing) records will be deleted.
     */
    async saveAerialSurveyDesignsRaw(requestParameters: SaveAerialSurveyDesignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SyncAerialSurveyDesignsResponse>> {
        if (requestParameters.syncAerialSurveyDesignsRequest === null || requestParameters.syncAerialSurveyDesignsRequest === undefined) {
            throw new runtime.RequiredError('syncAerialSurveyDesignsRequest','Required parameter requestParameters.syncAerialSurveyDesignsRequest was null or undefined when calling saveAerialSurveyDesigns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyncAerialSurveyDesignsRequestToJSON(requestParameters.syncAerialSurveyDesignsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SyncAerialSurveyDesignsResponseFromJSON(jsonValue));
    }

    /**
     * Sync aerial survey designs for given survey type, bio year             and location (analysis/management unit). What you submit will be             stored in the database other (existing) records will be deleted.
     */
    async saveAerialSurveyDesigns(requestParameters: SaveAerialSurveyDesignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SyncAerialSurveyDesignsResponse> {
        const response = await this.saveAerialSurveyDesignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show aerial survey design by id.
     */
    async showAerialSurveyDesignRaw(requestParameters: ShowAerialSurveyDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowAerialSurveyDesignResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showAerialSurveyDesign.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowAerialSurveyDesignResponseFromJSON(jsonValue));
    }

    /**
     * Show aerial survey design by id.
     */
    async showAerialSurveyDesign(requestParameters: ShowAerialSurveyDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowAerialSurveyDesignResponse> {
        const response = await this.showAerialSurveyDesignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store aerial survey design.
     */
    async storeAerialSurveyDesignRaw(requestParameters: StoreAerialSurveyDesignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreAerialSurveyDesignResponse>> {
        if (requestParameters.storeAerialSurveyDesignRequest === null || requestParameters.storeAerialSurveyDesignRequest === undefined) {
            throw new runtime.RequiredError('storeAerialSurveyDesignRequest','Required parameter requestParameters.storeAerialSurveyDesignRequest was null or undefined when calling storeAerialSurveyDesign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreAerialSurveyDesignRequestToJSON(requestParameters.storeAerialSurveyDesignRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreAerialSurveyDesignResponseFromJSON(jsonValue));
    }

    /**
     * Store aerial survey design.
     */
    async storeAerialSurveyDesign(requestParameters: StoreAerialSurveyDesignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreAerialSurveyDesignResponse> {
        const response = await this.storeAerialSurveyDesignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store aerial survey desings.
     */
    async storeMultipleAerialSurveyDesignsRaw(requestParameters: StoreMultipleAerialSurveyDesignsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleAerialSurveyDesigns200Response>> {
        if (requestParameters.storeMultipleAerialSurveyDesignsRequest === null || requestParameters.storeMultipleAerialSurveyDesignsRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleAerialSurveyDesignsRequest','Required parameter requestParameters.storeMultipleAerialSurveyDesignsRequest was null or undefined when calling storeMultipleAerialSurveyDesigns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleAerialSurveyDesignsRequestToJSON(requestParameters.storeMultipleAerialSurveyDesignsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleAerialSurveyDesigns200ResponseFromJSON(jsonValue));
    }

    /**
     * Store aerial survey desings.
     */
    async storeMultipleAerialSurveyDesigns(requestParameters: StoreMultipleAerialSurveyDesignsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleAerialSurveyDesigns200Response> {
        const response = await this.storeMultipleAerialSurveyDesignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update aerial survey design.
     */
    async updateAerialSurveyDesignRaw(requestParameters: UpdateAerialSurveyDesignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAerialSurveyDesignResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAerialSurveyDesign.');
        }

        if (requestParameters.updateAerialSurveyDesignRequest === null || requestParameters.updateAerialSurveyDesignRequest === undefined) {
            throw new runtime.RequiredError('updateAerialSurveyDesignRequest','Required parameter requestParameters.updateAerialSurveyDesignRequest was null or undefined when calling updateAerialSurveyDesign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAerialSurveyDesignRequestToJSON(requestParameters.updateAerialSurveyDesignRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAerialSurveyDesignResponseFromJSON(jsonValue));
    }

    /**
     * Update aerial survey design.
     */
    async updateAerialSurveyDesign(requestParameters: UpdateAerialSurveyDesignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAerialSurveyDesignResponse> {
        const response = await this.updateAerialSurveyDesignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update aerial survey designs.
     */
    async updateMultipleAerialSurveyDesignsRaw(requestParameters: UpdateMultipleAerialSurveyDesignsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleAerialSurveyDesigns200Response>> {
        if (requestParameters.updateMultipleAerialSurveyDesignsRequest === null || requestParameters.updateMultipleAerialSurveyDesignsRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleAerialSurveyDesignsRequest','Required parameter requestParameters.updateMultipleAerialSurveyDesignsRequest was null or undefined when calling updateMultipleAerialSurveyDesigns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleAerialSurveyDesignsRequestToJSON(requestParameters.updateMultipleAerialSurveyDesignsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleAerialSurveyDesigns200ResponseFromJSON(jsonValue));
    }

    /**
     * Update aerial survey designs.
     */
    async updateMultipleAerialSurveyDesigns(requestParameters: UpdateMultipleAerialSurveyDesignsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleAerialSurveyDesigns200Response> {
        const response = await this.updateMultipleAerialSurveyDesignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAerialSurveyDesignsFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAerialSurveyDesignsFormatEnum = typeof ExportAerialSurveyDesignsFormatEnum[keyof typeof ExportAerialSurveyDesignsFormatEnum];
/**
 * @export
 */
export const ExportAerialSurveyDesignsGeoAsEnum = {
    Kml: 'KML',
    Gpx: 'GPX',
    GeoJson: 'GeoJSON'
} as const;
export type ExportAerialSurveyDesignsGeoAsEnum = typeof ExportAerialSurveyDesignsGeoAsEnum[keyof typeof ExportAerialSurveyDesignsGeoAsEnum];
/**
 * @export
 */
export const ExportAerialSurveyDesignsGeoFunctionEnum = {
    Centroid: 'Centroid',
    PointOnSurface: 'PointOnSurface'
} as const;
export type ExportAerialSurveyDesignsGeoFunctionEnum = typeof ExportAerialSurveyDesignsGeoFunctionEnum[keyof typeof ExportAerialSurveyDesignsGeoFunctionEnum];
