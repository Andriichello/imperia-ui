/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexStrataResponse,
  ShowStratumResponse,
  StoreMultipleStrataRequest,
  StoreMultipleStrataResponse,
  StoreStratumRequest,
  StoreStratumResponse,
  UpdateMultipleStrataRequest,
  UpdateMultipleStrataResponse,
  UpdateStratumRequest,
  UpdateStratumResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexStrataResponseFromJSON,
    IndexStrataResponseToJSON,
    ShowStratumResponseFromJSON,
    ShowStratumResponseToJSON,
    StoreMultipleStrataRequestFromJSON,
    StoreMultipleStrataRequestToJSON,
    StoreMultipleStrataResponseFromJSON,
    StoreMultipleStrataResponseToJSON,
    StoreStratumRequestFromJSON,
    StoreStratumRequestToJSON,
    StoreStratumResponseFromJSON,
    StoreStratumResponseToJSON,
    UpdateMultipleStrataRequestFromJSON,
    UpdateMultipleStrataRequestToJSON,
    UpdateMultipleStrataResponseFromJSON,
    UpdateMultipleStrataResponseToJSON,
    UpdateStratumRequestFromJSON,
    UpdateStratumRequestToJSON,
    UpdateStratumResponseFromJSON,
    UpdateStratumResponseToJSON,
} from '../models';

export interface DestroyStratumRequest {
    id: number;
}

export interface ExportStrataRequest {
    format: ExportStrataFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterSurveyTypeId?: string;
    filterStratumOrder?: string;
    filterAbbreviation?: string;
    filterName?: string;
    filterExtrapolate?: string;
    filterMapColor?: string;
    filterDefaultProp?: string;
}

export interface IndexStrataRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterSurveyTypeId?: string;
    filterStratumOrder?: string;
    filterAbbreviation?: string;
    filterName?: string;
    filterExtrapolate?: string;
    filterMapColor?: string;
    filterDefaultProp?: string;
}

export interface ShowStratumRequest {
    id: number;
    includes?: string;
}

export interface StoreMultipleStrataOperationRequest {
    storeMultipleStrataRequest: StoreMultipleStrataRequest;
}

export interface StoreStratumOperationRequest {
    storeStratumRequest: StoreStratumRequest;
}

export interface UpdateMultipleStrataOperationRequest {
    updateMultipleStrataRequest: UpdateMultipleStrataRequest;
}

export interface UpdateStratumOperationRequest {
    id: number;
    updateStratumRequest: UpdateStratumRequest;
}

/**
 * 
 */
export class LocationStrataApi extends runtime.BaseAPI {

    /**
     * Delete stratum.
     */
    async destroyStratumRaw(requestParameters: DestroyStratumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyStratum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strata/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete stratum.
     */
    async destroyStratum(requestParameters: DestroyStratumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyStratumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export strata in a selected format (csv, json, parquet).
     */
    async exportStrataRaw(requestParameters: ExportStrataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportStrata.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterStratumOrder !== undefined) {
            queryParameters['filter[stratum_order]'] = requestParameters.filterStratumOrder;
        }

        if (requestParameters.filterAbbreviation !== undefined) {
            queryParameters['filter[abbreviation]'] = requestParameters.filterAbbreviation;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterExtrapolate !== undefined) {
            queryParameters['filter[extrapolate]'] = requestParameters.filterExtrapolate;
        }

        if (requestParameters.filterMapColor !== undefined) {
            queryParameters['filter[map_color]'] = requestParameters.filterMapColor;
        }

        if (requestParameters.filterDefaultProp !== undefined) {
            queryParameters['filter[default_prop]'] = requestParameters.filterDefaultProp;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strata/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export strata in a selected format (csv, json, parquet).
     */
    async exportStrata(requestParameters: ExportStrataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportStrataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index strata.
     */
    async indexStrataRaw(requestParameters: IndexStrataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexStrataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterStratumOrder !== undefined) {
            queryParameters['filter[stratum_order]'] = requestParameters.filterStratumOrder;
        }

        if (requestParameters.filterAbbreviation !== undefined) {
            queryParameters['filter[abbreviation]'] = requestParameters.filterAbbreviation;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterExtrapolate !== undefined) {
            queryParameters['filter[extrapolate]'] = requestParameters.filterExtrapolate;
        }

        if (requestParameters.filterMapColor !== undefined) {
            queryParameters['filter[map_color]'] = requestParameters.filterMapColor;
        }

        if (requestParameters.filterDefaultProp !== undefined) {
            queryParameters['filter[default_prop]'] = requestParameters.filterDefaultProp;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexStrataResponseFromJSON(jsonValue));
    }

    /**
     * Index strata.
     */
    async indexStrata(requestParameters: IndexStrataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexStrataResponse> {
        const response = await this.indexStrataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show stratum by id.
     */
    async showStratumRaw(requestParameters: ShowStratumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowStratumResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showStratum.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strata/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowStratumResponseFromJSON(jsonValue));
    }

    /**
     * Show stratum by id.
     */
    async showStratum(requestParameters: ShowStratumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowStratumResponse> {
        const response = await this.showStratumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple strata.
     */
    async storeMultipleStrataRaw(requestParameters: StoreMultipleStrataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleStrataResponse>> {
        if (requestParameters.storeMultipleStrataRequest === null || requestParameters.storeMultipleStrataRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleStrataRequest','Required parameter requestParameters.storeMultipleStrataRequest was null or undefined when calling storeMultipleStrata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strata/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleStrataRequestToJSON(requestParameters.storeMultipleStrataRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleStrataResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple strata.
     */
    async storeMultipleStrata(requestParameters: StoreMultipleStrataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleStrataResponse> {
        const response = await this.storeMultipleStrataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store statum.
     */
    async storeStratumRaw(requestParameters: StoreStratumOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreStratumResponse>> {
        if (requestParameters.storeStratumRequest === null || requestParameters.storeStratumRequest === undefined) {
            throw new runtime.RequiredError('storeStratumRequest','Required parameter requestParameters.storeStratumRequest was null or undefined when calling storeStratum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strata`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreStratumRequestToJSON(requestParameters.storeStratumRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreStratumResponseFromJSON(jsonValue));
    }

    /**
     * Store statum.
     */
    async storeStratum(requestParameters: StoreStratumOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreStratumResponse> {
        const response = await this.storeStratumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple strata.
     */
    async updateMultipleStrataRaw(requestParameters: UpdateMultipleStrataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleStrataResponse>> {
        if (requestParameters.updateMultipleStrataRequest === null || requestParameters.updateMultipleStrataRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleStrataRequest','Required parameter requestParameters.updateMultipleStrataRequest was null or undefined when calling updateMultipleStrata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strata/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleStrataRequestToJSON(requestParameters.updateMultipleStrataRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleStrataResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple strata.
     */
    async updateMultipleStrata(requestParameters: UpdateMultipleStrataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleStrataResponse> {
        const response = await this.updateMultipleStrataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update stratum.
     */
    async updateStratumRaw(requestParameters: UpdateStratumOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateStratumResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStratum.');
        }

        if (requestParameters.updateStratumRequest === null || requestParameters.updateStratumRequest === undefined) {
            throw new runtime.RequiredError('updateStratumRequest','Required parameter requestParameters.updateStratumRequest was null or undefined when calling updateStratum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strata/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStratumRequestToJSON(requestParameters.updateStratumRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateStratumResponseFromJSON(jsonValue));
    }

    /**
     * Update stratum.
     */
    async updateStratum(requestParameters: UpdateStratumOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateStratumResponse> {
        const response = await this.updateStratumRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportStrataFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportStrataFormatEnum = typeof ExportStrataFormatEnum[keyof typeof ExportStrataFormatEnum];
