/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexProjectSpeciesResponse,
  ShowProjectSpeciesResponse,
  StoreMultipleProjectSpecies200Response,
  StoreMultipleProjectSpeciesRequest,
  StoreProjectSpeciesRequest,
  StoreProjectSpeciesResponse,
  UpdateMultipleProjectSpecies200Response,
  UpdateMultipleProjectSpeciesRequest,
  UpdateProjectSpeciesRequest,
  UpdateProjectSpeciesResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexProjectSpeciesResponseFromJSON,
    IndexProjectSpeciesResponseToJSON,
    ShowProjectSpeciesResponseFromJSON,
    ShowProjectSpeciesResponseToJSON,
    StoreMultipleProjectSpecies200ResponseFromJSON,
    StoreMultipleProjectSpecies200ResponseToJSON,
    StoreMultipleProjectSpeciesRequestFromJSON,
    StoreMultipleProjectSpeciesRequestToJSON,
    StoreProjectSpeciesRequestFromJSON,
    StoreProjectSpeciesRequestToJSON,
    StoreProjectSpeciesResponseFromJSON,
    StoreProjectSpeciesResponseToJSON,
    UpdateMultipleProjectSpecies200ResponseFromJSON,
    UpdateMultipleProjectSpecies200ResponseToJSON,
    UpdateMultipleProjectSpeciesRequestFromJSON,
    UpdateMultipleProjectSpeciesRequestToJSON,
    UpdateProjectSpeciesRequestFromJSON,
    UpdateProjectSpeciesRequestToJSON,
    UpdateProjectSpeciesResponseFromJSON,
    UpdateProjectSpeciesResponseToJSON,
} from '../models';

export interface DestroyProjectSpeciesRequest {
    id: number;
}

export interface ExportProjectSpeciesRequest {
    format: ExportProjectSpeciesFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterSpeciesId?: string;
    filterSpeciesName?: string;
    filterModelDay?: string;
    filterModelMonth?: string;
    filterIsEnabled?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexProjectSpeciesRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterSpeciesId?: string;
    filterSpeciesName?: string;
    filterModelDay?: string;
    filterModelMonth?: string;
    filterIsEnabled?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowProjectSpeciesRequest {
    id: number;
    includes?: string;
}

export interface StoreMultipleProjectSpeciesOperationRequest {
    storeMultipleProjectSpeciesRequest: StoreMultipleProjectSpeciesRequest;
}

export interface StoreProjectSpeciesOperationRequest {
    storeProjectSpeciesRequest: StoreProjectSpeciesRequest;
}

export interface UpdateMultipleProjectSpeciesOperationRequest {
    updateMultipleProjectSpeciesRequest: UpdateMultipleProjectSpeciesRequest;
}

export interface UpdateProjectSpeciesOperationRequest {
    id: number;
    updateProjectSpeciesRequest: UpdateProjectSpeciesRequest;
}

/**
 * 
 */
export class ProjectSpeciesApi extends runtime.BaseAPI {

    /**
     * Delete project species.
     */
    async destroyProjectSpeciesRaw(requestParameters: DestroyProjectSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyProjectSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/species/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete project species.
     */
    async destroyProjectSpecies(requestParameters: DestroyProjectSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyProjectSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export project species in a selected format (csv, json, parquet).
     */
    async exportProjectSpeciesRaw(requestParameters: ExportProjectSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportProjectSpecies.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterSpeciesName !== undefined) {
            queryParameters['filter[species_name]'] = requestParameters.filterSpeciesName;
        }

        if (requestParameters.filterModelDay !== undefined) {
            queryParameters['filter[model_day]'] = requestParameters.filterModelDay;
        }

        if (requestParameters.filterModelMonth !== undefined) {
            queryParameters['filter[model_month]'] = requestParameters.filterModelMonth;
        }

        if (requestParameters.filterIsEnabled !== undefined) {
            queryParameters['filter[is_enabled]'] = requestParameters.filterIsEnabled;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/species/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export project species in a selected format (csv, json, parquet).
     */
    async exportProjectSpecies(requestParameters: ExportProjectSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportProjectSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index project species.
     */
    async indexProjectSpeciesRaw(requestParameters: IndexProjectSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexProjectSpeciesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterSpeciesName !== undefined) {
            queryParameters['filter[species_name]'] = requestParameters.filterSpeciesName;
        }

        if (requestParameters.filterModelDay !== undefined) {
            queryParameters['filter[model_day]'] = requestParameters.filterModelDay;
        }

        if (requestParameters.filterModelMonth !== undefined) {
            queryParameters['filter[model_month]'] = requestParameters.filterModelMonth;
        }

        if (requestParameters.filterIsEnabled !== undefined) {
            queryParameters['filter[is_enabled]'] = requestParameters.filterIsEnabled;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/species`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexProjectSpeciesResponseFromJSON(jsonValue));
    }

    /**
     * Index project species.
     */
    async indexProjectSpecies(requestParameters: IndexProjectSpeciesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexProjectSpeciesResponse> {
        const response = await this.indexProjectSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show project species by id.
     */
    async showProjectSpeciesRaw(requestParameters: ShowProjectSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowProjectSpeciesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showProjectSpecies.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/species/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowProjectSpeciesResponseFromJSON(jsonValue));
    }

    /**
     * Show project species by id.
     */
    async showProjectSpecies(requestParameters: ShowProjectSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowProjectSpeciesResponse> {
        const response = await this.showProjectSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple project species.
     */
    async storeMultipleProjectSpeciesRaw(requestParameters: StoreMultipleProjectSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleProjectSpecies200Response>> {
        if (requestParameters.storeMultipleProjectSpeciesRequest === null || requestParameters.storeMultipleProjectSpeciesRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleProjectSpeciesRequest','Required parameter requestParameters.storeMultipleProjectSpeciesRequest was null or undefined when calling storeMultipleProjectSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/species/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleProjectSpeciesRequestToJSON(requestParameters.storeMultipleProjectSpeciesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleProjectSpecies200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple project species.
     */
    async storeMultipleProjectSpecies(requestParameters: StoreMultipleProjectSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleProjectSpecies200Response> {
        const response = await this.storeMultipleProjectSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store project species.
     */
    async storeProjectSpeciesRaw(requestParameters: StoreProjectSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreProjectSpeciesResponse>> {
        if (requestParameters.storeProjectSpeciesRequest === null || requestParameters.storeProjectSpeciesRequest === undefined) {
            throw new runtime.RequiredError('storeProjectSpeciesRequest','Required parameter requestParameters.storeProjectSpeciesRequest was null or undefined when calling storeProjectSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/species`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreProjectSpeciesRequestToJSON(requestParameters.storeProjectSpeciesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreProjectSpeciesResponseFromJSON(jsonValue));
    }

    /**
     * Store project species.
     */
    async storeProjectSpecies(requestParameters: StoreProjectSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreProjectSpeciesResponse> {
        const response = await this.storeProjectSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple project species.
     */
    async updateMultipleProjectSpeciesRaw(requestParameters: UpdateMultipleProjectSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleProjectSpecies200Response>> {
        if (requestParameters.updateMultipleProjectSpeciesRequest === null || requestParameters.updateMultipleProjectSpeciesRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleProjectSpeciesRequest','Required parameter requestParameters.updateMultipleProjectSpeciesRequest was null or undefined when calling updateMultipleProjectSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/species/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleProjectSpeciesRequestToJSON(requestParameters.updateMultipleProjectSpeciesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleProjectSpecies200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple project species.
     */
    async updateMultipleProjectSpecies(requestParameters: UpdateMultipleProjectSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleProjectSpecies200Response> {
        const response = await this.updateMultipleProjectSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update project species.
     */
    async updateProjectSpeciesRaw(requestParameters: UpdateProjectSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProjectSpeciesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProjectSpecies.');
        }

        if (requestParameters.updateProjectSpeciesRequest === null || requestParameters.updateProjectSpeciesRequest === undefined) {
            throw new runtime.RequiredError('updateProjectSpeciesRequest','Required parameter requestParameters.updateProjectSpeciesRequest was null or undefined when calling updateProjectSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/species/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectSpeciesRequestToJSON(requestParameters.updateProjectSpeciesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProjectSpeciesResponseFromJSON(jsonValue));
    }

    /**
     * Update project species.
     */
    async updateProjectSpecies(requestParameters: UpdateProjectSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProjectSpeciesResponse> {
        const response = await this.updateProjectSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportProjectSpeciesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportProjectSpeciesFormatEnum = typeof ExportProjectSpeciesFormatEnum[keyof typeof ExportProjectSpeciesFormatEnum];
