/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexSpeciesResponse,
  ShowSpeciesResponse,
  StoreMultipleSpecies200Response,
  StoreMultipleSpeciesRequest,
  StoreSpeciesRequest,
  StoreSpeciesResponse,
  UpdateMultipleSpecies200Response,
  UpdateMultipleSpeciesRequest,
  UpdateSpeciesRequest,
  UpdateSpeciesResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexSpeciesResponseFromJSON,
    IndexSpeciesResponseToJSON,
    ShowSpeciesResponseFromJSON,
    ShowSpeciesResponseToJSON,
    StoreMultipleSpecies200ResponseFromJSON,
    StoreMultipleSpecies200ResponseToJSON,
    StoreMultipleSpeciesRequestFromJSON,
    StoreMultipleSpeciesRequestToJSON,
    StoreSpeciesRequestFromJSON,
    StoreSpeciesRequestToJSON,
    StoreSpeciesResponseFromJSON,
    StoreSpeciesResponseToJSON,
    UpdateMultipleSpecies200ResponseFromJSON,
    UpdateMultipleSpecies200ResponseToJSON,
    UpdateMultipleSpeciesRequestFromJSON,
    UpdateMultipleSpeciesRequestToJSON,
    UpdateSpeciesRequestFromJSON,
    UpdateSpeciesRequestToJSON,
    UpdateSpeciesResponseFromJSON,
    UpdateSpeciesResponseToJSON,
} from '../models';

export interface DestroySpeciesRequest {
    id: number;
}

export interface ExportSpeciesRequest {
    format: ExportSpeciesFormatEnum;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterName?: string;
    filterLatinName?: string;
    filterInnerName?: string;
}

export interface IndexSpeciesRequest {
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterName?: string;
    filterLatinName?: string;
    filterInnerName?: string;
}

export interface ShowSpeciesRequest {
    id: number;
}

export interface StoreMultipleSpeciesOperationRequest {
    storeMultipleSpeciesRequest: StoreMultipleSpeciesRequest;
}

export interface StoreSpeciesOperationRequest {
    storeSpeciesRequest: StoreSpeciesRequest;
}

export interface UpdateMultipleSpeciesOperationRequest {
    updateMultipleSpeciesRequest: UpdateMultipleSpeciesRequest;
}

export interface UpdateSpeciesOperationRequest {
    id: number;
    updateSpeciesRequest: UpdateSpeciesRequest;
}

/**
 * 
 */
export class EnumSpeciesApi extends runtime.BaseAPI {

    /**
     * Delete species.
     */
    async destroySpeciesRaw(requestParameters: DestroySpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroySpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/species/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete species.
     */
    async destroySpecies(requestParameters: DestroySpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroySpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export species in a selected format (csv, json, parquet).
     */
    async exportSpeciesRaw(requestParameters: ExportSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportSpecies.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterLatinName !== undefined) {
            queryParameters['filter[latin_name]'] = requestParameters.filterLatinName;
        }

        if (requestParameters.filterInnerName !== undefined) {
            queryParameters['filter[inner_name]'] = requestParameters.filterInnerName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/species/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export species in a selected format (csv, json, parquet).
     */
    async exportSpecies(requestParameters: ExportSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index species.
     */
    async indexSpeciesRaw(requestParameters: IndexSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexSpeciesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterLatinName !== undefined) {
            queryParameters['filter[latin_name]'] = requestParameters.filterLatinName;
        }

        if (requestParameters.filterInnerName !== undefined) {
            queryParameters['filter[inner_name]'] = requestParameters.filterInnerName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/species`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexSpeciesResponseFromJSON(jsonValue));
    }

    /**
     * Index species.
     */
    async indexSpecies(requestParameters: IndexSpeciesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexSpeciesResponse> {
        const response = await this.indexSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show species by id.
     */
    async showSpeciesRaw(requestParameters: ShowSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowSpeciesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/species/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowSpeciesResponseFromJSON(jsonValue));
    }

    /**
     * Show species by id.
     */
    async showSpecies(requestParameters: ShowSpeciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowSpeciesResponse> {
        const response = await this.showSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple species.
     */
    async storeMultipleSpeciesRaw(requestParameters: StoreMultipleSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleSpecies200Response>> {
        if (requestParameters.storeMultipleSpeciesRequest === null || requestParameters.storeMultipleSpeciesRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleSpeciesRequest','Required parameter requestParameters.storeMultipleSpeciesRequest was null or undefined when calling storeMultipleSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/species/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleSpeciesRequestToJSON(requestParameters.storeMultipleSpeciesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleSpecies200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple species.
     */
    async storeMultipleSpecies(requestParameters: StoreMultipleSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleSpecies200Response> {
        const response = await this.storeMultipleSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store species.
     */
    async storeSpeciesRaw(requestParameters: StoreSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreSpeciesResponse>> {
        if (requestParameters.storeSpeciesRequest === null || requestParameters.storeSpeciesRequest === undefined) {
            throw new runtime.RequiredError('storeSpeciesRequest','Required parameter requestParameters.storeSpeciesRequest was null or undefined when calling storeSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/species`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreSpeciesRequestToJSON(requestParameters.storeSpeciesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreSpeciesResponseFromJSON(jsonValue));
    }

    /**
     * Store species.
     */
    async storeSpecies(requestParameters: StoreSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreSpeciesResponse> {
        const response = await this.storeSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple species.
     */
    async updateMultipleSpeciesRaw(requestParameters: UpdateMultipleSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleSpecies200Response>> {
        if (requestParameters.updateMultipleSpeciesRequest === null || requestParameters.updateMultipleSpeciesRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleSpeciesRequest','Required parameter requestParameters.updateMultipleSpeciesRequest was null or undefined when calling updateMultipleSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/species/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleSpeciesRequestToJSON(requestParameters.updateMultipleSpeciesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleSpecies200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple species.
     */
    async updateMultipleSpecies(requestParameters: UpdateMultipleSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleSpecies200Response> {
        const response = await this.updateMultipleSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update species.
     */
    async updateSpeciesRaw(requestParameters: UpdateSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSpeciesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSpecies.');
        }

        if (requestParameters.updateSpeciesRequest === null || requestParameters.updateSpeciesRequest === undefined) {
            throw new runtime.RequiredError('updateSpeciesRequest','Required parameter requestParameters.updateSpeciesRequest was null or undefined when calling updateSpecies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/species/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSpeciesRequestToJSON(requestParameters.updateSpeciesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSpeciesResponseFromJSON(jsonValue));
    }

    /**
     * Update species.
     */
    async updateSpecies(requestParameters: UpdateSpeciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSpeciesResponse> {
        const response = await this.updateSpeciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportSpeciesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportSpeciesFormatEnum = typeof ExportSpeciesFormatEnum[keyof typeof ExportSpeciesFormatEnum];
