/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexOutputFilesResponse,
  ShowOutputFileResponse,
  StoreOutputFileResponse,
  UpdateOutputFileRequest,
  UpdateOutputFileResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexOutputFilesResponseFromJSON,
    IndexOutputFilesResponseToJSON,
    ShowOutputFileResponseFromJSON,
    ShowOutputFileResponseToJSON,
    StoreOutputFileResponseFromJSON,
    StoreOutputFileResponseToJSON,
    UpdateOutputFileRequestFromJSON,
    UpdateOutputFileRequestToJSON,
    UpdateOutputFileResponseFromJSON,
    UpdateOutputFileResponseToJSON,
} from '../models';

export interface DestroyOutputFileRequest {
    id: number;
}

export interface ExportOutputFilesRequest {
    format: ExportOutputFilesFormatEnum;
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterModelId?: string;
    filterRecipeId?: string;
    filterMetadata?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexOutputFilesRequest {
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterContextId?: string;
    filterContextType?: string;
    filterName?: string;
    filterMetadata?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowOutputFileRequest {
    id: number;
    appends?: string;
    includes?: string;
}

export interface StoreOutputFileRequest {
    file?: Blob;
    projectId?: number | null;
    outputId?: number;
    name?: string;
}

export interface UpdateOutputFileOperationRequest {
    id: number;
    updateOutputFileRequest: UpdateOutputFileRequest;
}

/**
 * 
 */
export class OutputOutputFilesApi extends runtime.BaseAPI {

    /**
     * Delete model output file.
     */
    async destroyOutputFileRaw(requestParameters: DestroyOutputFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyOutputFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete model output file.
     */
    async destroyOutputFile(requestParameters: DestroyOutputFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyOutputFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export model output files in a selected format (csv, json, parquet).
     */
    async exportOutputFilesRaw(requestParameters: ExportOutputFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportOutputFiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterRecipeId !== undefined) {
            queryParameters['filter[recipe_id]'] = requestParameters.filterRecipeId;
        }

        if (requestParameters.filterMetadata !== undefined) {
            queryParameters['filter[metadata]'] = requestParameters.filterMetadata;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/files/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export model output files in a selected format (csv, json, parquet).
     */
    async exportOutputFiles(requestParameters: ExportOutputFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportOutputFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index model ouput files.
     */
    async indexOutputFilesRaw(requestParameters: IndexOutputFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexOutputFilesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterContextId !== undefined) {
            queryParameters['filter[context_id]'] = requestParameters.filterContextId;
        }

        if (requestParameters.filterContextType !== undefined) {
            queryParameters['filter[context_type]'] = requestParameters.filterContextType;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterMetadata !== undefined) {
            queryParameters['filter[metadata]'] = requestParameters.filterMetadata;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexOutputFilesResponseFromJSON(jsonValue));
    }

    /**
     * Index model ouput files.
     */
    async indexOutputFiles(requestParameters: IndexOutputFilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexOutputFilesResponse> {
        const response = await this.indexOutputFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show model output file by id.
     */
    async showOutputFileRaw(requestParameters: ShowOutputFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowOutputFileResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showOutputFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowOutputFileResponseFromJSON(jsonValue));
    }

    /**
     * Show model output file by id.
     */
    async showOutputFile(requestParameters: ShowOutputFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowOutputFileResponse> {
        const response = await this.showOutputFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store model output file.
     */
    async storeOutputFileRaw(requestParameters: StoreOutputFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreOutputFileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.projectId !== undefined) {
            formParams.append('project_id', requestParameters.projectId as any);
        }

        if (requestParameters.outputId !== undefined) {
            formParams.append('output_id', requestParameters.outputId as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/api/models/outputs/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreOutputFileResponseFromJSON(jsonValue));
    }

    /**
     * Store model output file.
     */
    async storeOutputFile(requestParameters: StoreOutputFileRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreOutputFileResponse> {
        const response = await this.storeOutputFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update model output file.
     */
    async updateOutputFileRaw(requestParameters: UpdateOutputFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOutputFileResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOutputFile.');
        }

        if (requestParameters.updateOutputFileRequest === null || requestParameters.updateOutputFileRequest === undefined) {
            throw new runtime.RequiredError('updateOutputFileRequest','Required parameter requestParameters.updateOutputFileRequest was null or undefined when calling updateOutputFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOutputFileRequestToJSON(requestParameters.updateOutputFileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOutputFileResponseFromJSON(jsonValue));
    }

    /**
     * Update model output file.
     */
    async updateOutputFile(requestParameters: UpdateOutputFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOutputFileResponse> {
        const response = await this.updateOutputFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportOutputFilesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportOutputFilesFormatEnum = typeof ExportOutputFilesFormatEnum[keyof typeof ExportOutputFilesFormatEnum];
