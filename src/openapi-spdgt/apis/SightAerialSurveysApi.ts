/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttachModelToAerialSurveyRequest,
  AttachModelToAerialSurveyResponse,
  DestroyResponse,
  DetachModelFromAerialSurveyRequest,
  DetachModelFromAerialSurveyResponse,
  ExportIndexResponse,
  IndexAerialSurveysResponse,
  ShowAerialSurveyResponse,
  StoreAerialSurveyRequest,
  StoreAerialSurveyResponse,
  StoreMultipleAerialSurveys200Response,
  StoreMultipleAerialSurveysRequest,
  UpdateAerialSurveyRequest,
  UpdateAerialSurveyResponse,
  UpdateModelPivotOfAerialSurveyRequest,
  UpdateMultipleAerialSurveys200Response,
  UpdateMultipleAerialSurveysRequest,
} from '../models';
import {
    AttachModelToAerialSurveyRequestFromJSON,
    AttachModelToAerialSurveyRequestToJSON,
    AttachModelToAerialSurveyResponseFromJSON,
    AttachModelToAerialSurveyResponseToJSON,
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    DetachModelFromAerialSurveyRequestFromJSON,
    DetachModelFromAerialSurveyRequestToJSON,
    DetachModelFromAerialSurveyResponseFromJSON,
    DetachModelFromAerialSurveyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAerialSurveysResponseFromJSON,
    IndexAerialSurveysResponseToJSON,
    ShowAerialSurveyResponseFromJSON,
    ShowAerialSurveyResponseToJSON,
    StoreAerialSurveyRequestFromJSON,
    StoreAerialSurveyRequestToJSON,
    StoreAerialSurveyResponseFromJSON,
    StoreAerialSurveyResponseToJSON,
    StoreMultipleAerialSurveys200ResponseFromJSON,
    StoreMultipleAerialSurveys200ResponseToJSON,
    StoreMultipleAerialSurveysRequestFromJSON,
    StoreMultipleAerialSurveysRequestToJSON,
    UpdateAerialSurveyRequestFromJSON,
    UpdateAerialSurveyRequestToJSON,
    UpdateAerialSurveyResponseFromJSON,
    UpdateAerialSurveyResponseToJSON,
    UpdateModelPivotOfAerialSurveyRequestFromJSON,
    UpdateModelPivotOfAerialSurveyRequestToJSON,
    UpdateMultipleAerialSurveys200ResponseFromJSON,
    UpdateMultipleAerialSurveys200ResponseToJSON,
    UpdateMultipleAerialSurveysRequestFromJSON,
    UpdateMultipleAerialSurveysRequestToJSON,
} from '../models';

export interface AttachModelToAerialSurveyOperationRequest {
    attachModelToAerialSurveyRequest: AttachModelToAerialSurveyRequest;
}

export interface DestroyAerialSurveyRequest {
    id: number;
}

export interface DetachModelFromAerialSurveyOperationRequest {
    detachModelFromAerialSurveyRequest: DetachModelFromAerialSurveyRequest;
}

export interface ExportAerialSurveysRequest {
    format: ExportAerialSurveysFormatEnum;
    includes?: string;
    appends?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterSurveyTypeId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterAircraftId?: string;
    filterDate?: string;
    filterBioYear?: string;
    filterStartTach?: string;
    filterEndTach?: string;
    filterStartTime?: string;
    filterEndTime?: string;
    filterFlight?: string;
    filterPilot?: string;
    filterObservers?: string;
    filterTemperature?: string;
    filterWind?: string;
    filterClouds?: string;
    filterPrecipitation?: string;
    filterMetadata?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexAerialSurveysRequest {
    includes?: string;
    appends?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterSurveyTypeId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterAircraftId?: string;
    filterDate?: string;
    filterBioYear?: string;
    filterStartTach?: string;
    filterEndTach?: string;
    filterStartTime?: string;
    filterEndTime?: string;
    filterFlight?: string;
    filterPilot?: string;
    filterObservers?: string;
    filterTemperature?: string;
    filterWind?: string;
    filterClouds?: string;
    filterPrecipitation?: string;
    filterMetadata?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowAerialSurveyRequest {
    id: number;
    includes?: string;
    appends?: string;
}

export interface StoreAerialSurveyOperationRequest {
    storeAerialSurveyRequest: StoreAerialSurveyRequest;
}

export interface StoreMultipleAerialSurveysOperationRequest {
    storeMultipleAerialSurveysRequest: StoreMultipleAerialSurveysRequest;
}

export interface UpdateAerialSurveyOperationRequest {
    id: number;
    updateAerialSurveyRequest: UpdateAerialSurveyRequest;
}

export interface UpdateModelPivotOfAerialSurveyOperationRequest {
    updateModelPivotOfAerialSurveyRequest: UpdateModelPivotOfAerialSurveyRequest;
}

export interface UpdateMultipleAerialSurveysOperationRequest {
    updateMultipleAerialSurveysRequest: UpdateMultipleAerialSurveysRequest;
}

/**
 * 
 */
export class SightAerialSurveysApi extends runtime.BaseAPI {

    /**
     * Attach model to aerial survey.
     */
    async attachModelToAerialSurveyRaw(requestParameters: AttachModelToAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttachModelToAerialSurveyResponse>> {
        if (requestParameters.attachModelToAerialSurveyRequest === null || requestParameters.attachModelToAerialSurveyRequest === undefined) {
            throw new runtime.RequiredError('attachModelToAerialSurveyRequest','Required parameter requestParameters.attachModelToAerialSurveyRequest was null or undefined when calling attachModelToAerialSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/models/attach`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttachModelToAerialSurveyRequestToJSON(requestParameters.attachModelToAerialSurveyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachModelToAerialSurveyResponseFromJSON(jsonValue));
    }

    /**
     * Attach model to aerial survey.
     */
    async attachModelToAerialSurvey(requestParameters: AttachModelToAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttachModelToAerialSurveyResponse> {
        const response = await this.attachModelToAerialSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete aerial survey.
     */
    async destroyAerialSurveyRaw(requestParameters: DestroyAerialSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyAerialSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete aerial survey.
     */
    async destroyAerialSurvey(requestParameters: DestroyAerialSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyAerialSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach model from aerial survey.
     */
    async detachModelFromAerialSurveyRaw(requestParameters: DetachModelFromAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetachModelFromAerialSurveyResponse>> {
        if (requestParameters.detachModelFromAerialSurveyRequest === null || requestParameters.detachModelFromAerialSurveyRequest === undefined) {
            throw new runtime.RequiredError('detachModelFromAerialSurveyRequest','Required parameter requestParameters.detachModelFromAerialSurveyRequest was null or undefined when calling detachModelFromAerialSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/models/detach`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DetachModelFromAerialSurveyRequestToJSON(requestParameters.detachModelFromAerialSurveyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetachModelFromAerialSurveyResponseFromJSON(jsonValue));
    }

    /**
     * Detach model from aerial survey.
     */
    async detachModelFromAerialSurvey(requestParameters: DetachModelFromAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetachModelFromAerialSurveyResponse> {
        const response = await this.detachModelFromAerialSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export aerial surveys in a selected format (csv, json, parquet).
     */
    async exportAerialSurveysRaw(requestParameters: ExportAerialSurveysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAerialSurveys.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterAircraftId !== undefined) {
            queryParameters['filter[aircraft_id]'] = requestParameters.filterAircraftId;
        }

        if (requestParameters.filterDate !== undefined) {
            queryParameters['filter[date]'] = requestParameters.filterDate;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterStartTach !== undefined) {
            queryParameters['filter[start_tach]'] = requestParameters.filterStartTach;
        }

        if (requestParameters.filterEndTach !== undefined) {
            queryParameters['filter[end_tach]'] = requestParameters.filterEndTach;
        }

        if (requestParameters.filterStartTime !== undefined) {
            queryParameters['filter[start_time]'] = requestParameters.filterStartTime;
        }

        if (requestParameters.filterEndTime !== undefined) {
            queryParameters['filter[end_time]'] = requestParameters.filterEndTime;
        }

        if (requestParameters.filterFlight !== undefined) {
            queryParameters['filter[flight]'] = requestParameters.filterFlight;
        }

        if (requestParameters.filterPilot !== undefined) {
            queryParameters['filter[pilot]'] = requestParameters.filterPilot;
        }

        if (requestParameters.filterObservers !== undefined) {
            queryParameters['filter[observers]'] = requestParameters.filterObservers;
        }

        if (requestParameters.filterTemperature !== undefined) {
            queryParameters['filter[temperature]'] = requestParameters.filterTemperature;
        }

        if (requestParameters.filterWind !== undefined) {
            queryParameters['filter[wind]'] = requestParameters.filterWind;
        }

        if (requestParameters.filterClouds !== undefined) {
            queryParameters['filter[clouds]'] = requestParameters.filterClouds;
        }

        if (requestParameters.filterPrecipitation !== undefined) {
            queryParameters['filter[precipitation]'] = requestParameters.filterPrecipitation;
        }

        if (requestParameters.filterMetadata !== undefined) {
            queryParameters['filter[metadata]'] = requestParameters.filterMetadata;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export aerial surveys in a selected format (csv, json, parquet).
     */
    async exportAerialSurveys(requestParameters: ExportAerialSurveysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAerialSurveysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index aerial surveys.
     */
    async indexAerialSurveysRaw(requestParameters: IndexAerialSurveysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAerialSurveysResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterAircraftId !== undefined) {
            queryParameters['filter[aircraft_id]'] = requestParameters.filterAircraftId;
        }

        if (requestParameters.filterDate !== undefined) {
            queryParameters['filter[date]'] = requestParameters.filterDate;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterStartTach !== undefined) {
            queryParameters['filter[start_tach]'] = requestParameters.filterStartTach;
        }

        if (requestParameters.filterEndTach !== undefined) {
            queryParameters['filter[end_tach]'] = requestParameters.filterEndTach;
        }

        if (requestParameters.filterStartTime !== undefined) {
            queryParameters['filter[start_time]'] = requestParameters.filterStartTime;
        }

        if (requestParameters.filterEndTime !== undefined) {
            queryParameters['filter[end_time]'] = requestParameters.filterEndTime;
        }

        if (requestParameters.filterFlight !== undefined) {
            queryParameters['filter[flight]'] = requestParameters.filterFlight;
        }

        if (requestParameters.filterPilot !== undefined) {
            queryParameters['filter[pilot]'] = requestParameters.filterPilot;
        }

        if (requestParameters.filterObservers !== undefined) {
            queryParameters['filter[observers]'] = requestParameters.filterObservers;
        }

        if (requestParameters.filterTemperature !== undefined) {
            queryParameters['filter[temperature]'] = requestParameters.filterTemperature;
        }

        if (requestParameters.filterWind !== undefined) {
            queryParameters['filter[wind]'] = requestParameters.filterWind;
        }

        if (requestParameters.filterClouds !== undefined) {
            queryParameters['filter[clouds]'] = requestParameters.filterClouds;
        }

        if (requestParameters.filterPrecipitation !== undefined) {
            queryParameters['filter[precipitation]'] = requestParameters.filterPrecipitation;
        }

        if (requestParameters.filterMetadata !== undefined) {
            queryParameters['filter[metadata]'] = requestParameters.filterMetadata;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAerialSurveysResponseFromJSON(jsonValue));
    }

    /**
     * Index aerial surveys.
     */
    async indexAerialSurveys(requestParameters: IndexAerialSurveysRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAerialSurveysResponse> {
        const response = await this.indexAerialSurveysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show aerial survey by id.
     */
    async showAerialSurveyRaw(requestParameters: ShowAerialSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowAerialSurveyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showAerialSurvey.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowAerialSurveyResponseFromJSON(jsonValue));
    }

    /**
     * Show aerial survey by id.
     */
    async showAerialSurvey(requestParameters: ShowAerialSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowAerialSurveyResponse> {
        const response = await this.showAerialSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store aerial survey.
     */
    async storeAerialSurveyRaw(requestParameters: StoreAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreAerialSurveyResponse>> {
        if (requestParameters.storeAerialSurveyRequest === null || requestParameters.storeAerialSurveyRequest === undefined) {
            throw new runtime.RequiredError('storeAerialSurveyRequest','Required parameter requestParameters.storeAerialSurveyRequest was null or undefined when calling storeAerialSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreAerialSurveyRequestToJSON(requestParameters.storeAerialSurveyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreAerialSurveyResponseFromJSON(jsonValue));
    }

    /**
     * Store aerial survey.
     */
    async storeAerialSurvey(requestParameters: StoreAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreAerialSurveyResponse> {
        const response = await this.storeAerialSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple aerial surveys.
     */
    async storeMultipleAerialSurveysRaw(requestParameters: StoreMultipleAerialSurveysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleAerialSurveys200Response>> {
        if (requestParameters.storeMultipleAerialSurveysRequest === null || requestParameters.storeMultipleAerialSurveysRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleAerialSurveysRequest','Required parameter requestParameters.storeMultipleAerialSurveysRequest was null or undefined when calling storeMultipleAerialSurveys.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleAerialSurveysRequestToJSON(requestParameters.storeMultipleAerialSurveysRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleAerialSurveys200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple aerial surveys.
     */
    async storeMultipleAerialSurveys(requestParameters: StoreMultipleAerialSurveysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleAerialSurveys200Response> {
        const response = await this.storeMultipleAerialSurveysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update aerial survey.
     */
    async updateAerialSurveyRaw(requestParameters: UpdateAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAerialSurveyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAerialSurvey.');
        }

        if (requestParameters.updateAerialSurveyRequest === null || requestParameters.updateAerialSurveyRequest === undefined) {
            throw new runtime.RequiredError('updateAerialSurveyRequest','Required parameter requestParameters.updateAerialSurveyRequest was null or undefined when calling updateAerialSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAerialSurveyRequestToJSON(requestParameters.updateAerialSurveyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAerialSurveyResponseFromJSON(jsonValue));
    }

    /**
     * Update aerial survey.
     */
    async updateAerialSurvey(requestParameters: UpdateAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAerialSurveyResponse> {
        const response = await this.updateAerialSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update model pivot to aerial survey.
     */
    async updateModelPivotOfAerialSurveyRaw(requestParameters: UpdateModelPivotOfAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateModelPivotOfAerialSurveyRequest>> {
        if (requestParameters.updateModelPivotOfAerialSurveyRequest === null || requestParameters.updateModelPivotOfAerialSurveyRequest === undefined) {
            throw new runtime.RequiredError('updateModelPivotOfAerialSurveyRequest','Required parameter requestParameters.updateModelPivotOfAerialSurveyRequest was null or undefined when calling updateModelPivotOfAerialSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/models`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateModelPivotOfAerialSurveyRequestToJSON(requestParameters.updateModelPivotOfAerialSurveyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateModelPivotOfAerialSurveyRequestFromJSON(jsonValue));
    }

    /**
     * Update model pivot to aerial survey.
     */
    async updateModelPivotOfAerialSurvey(requestParameters: UpdateModelPivotOfAerialSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateModelPivotOfAerialSurveyRequest> {
        const response = await this.updateModelPivotOfAerialSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple aerial surveys.
     */
    async updateMultipleAerialSurveysRaw(requestParameters: UpdateMultipleAerialSurveysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleAerialSurveys200Response>> {
        if (requestParameters.updateMultipleAerialSurveysRequest === null || requestParameters.updateMultipleAerialSurveysRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleAerialSurveysRequest','Required parameter requestParameters.updateMultipleAerialSurveysRequest was null or undefined when calling updateMultipleAerialSurveys.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleAerialSurveysRequestToJSON(requestParameters.updateMultipleAerialSurveysRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleAerialSurveys200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple aerial surveys.
     */
    async updateMultipleAerialSurveys(requestParameters: UpdateMultipleAerialSurveysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleAerialSurveys200Response> {
        const response = await this.updateMultipleAerialSurveysRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAerialSurveysFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAerialSurveysFormatEnum = typeof ExportAerialSurveysFormatEnum[keyof typeof ExportAerialSurveysFormatEnum];
