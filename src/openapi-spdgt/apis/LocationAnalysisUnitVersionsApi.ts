/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexAnalysisUnitVersionsResponse,
  ShowAnalysisUnitVersionResponse,
  StoreAnalysisUnitVersionRequest,
  StoreAnalysisUnitVersionResponse,
  StoreMultipleAnalysisUnitVersions200Response,
  StoreMultipleAnalysisUnitVersionsRequest,
  UpdateAnalysisUnitVersionRequest,
  UpdateAnalysisUnitVersionResponse,
  UpdateMultipleAnalysisUnitVersions200Response,
  UpdateMultipleAnalysisUnitVersionsRequest,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAnalysisUnitVersionsResponseFromJSON,
    IndexAnalysisUnitVersionsResponseToJSON,
    ShowAnalysisUnitVersionResponseFromJSON,
    ShowAnalysisUnitVersionResponseToJSON,
    StoreAnalysisUnitVersionRequestFromJSON,
    StoreAnalysisUnitVersionRequestToJSON,
    StoreAnalysisUnitVersionResponseFromJSON,
    StoreAnalysisUnitVersionResponseToJSON,
    StoreMultipleAnalysisUnitVersions200ResponseFromJSON,
    StoreMultipleAnalysisUnitVersions200ResponseToJSON,
    StoreMultipleAnalysisUnitVersionsRequestFromJSON,
    StoreMultipleAnalysisUnitVersionsRequestToJSON,
    UpdateAnalysisUnitVersionRequestFromJSON,
    UpdateAnalysisUnitVersionRequestToJSON,
    UpdateAnalysisUnitVersionResponseFromJSON,
    UpdateAnalysisUnitVersionResponseToJSON,
    UpdateMultipleAnalysisUnitVersions200ResponseFromJSON,
    UpdateMultipleAnalysisUnitVersions200ResponseToJSON,
    UpdateMultipleAnalysisUnitVersionsRequestFromJSON,
    UpdateMultipleAnalysisUnitVersionsRequestToJSON,
} from '../models';

export interface DestroyAnalysisUnitVersionRequest {
    id: number;
}

export interface ExportAnalysisUnitVersionsRequest {
    format: ExportAnalysisUnitVersionsFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterSpeciesId?: string;
    filterDate?: string;
    filterName?: string;
    filterSource?: string;
    filterCreatedBy?: string;
}

export interface IndexAnalysisUnitVersionsRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterSpeciesId?: string;
    filterDate?: string;
    filterName?: string;
    filterSource?: string;
    filterCreatedBy?: string;
}

export interface ShowAnalysisUnitVersionRequest {
    id: number;
    includes?: string;
}

export interface StoreAnalysisUnitVersionOperationRequest {
    storeAnalysisUnitVersionRequest: StoreAnalysisUnitVersionRequest;
}

export interface StoreMultipleAnalysisUnitVersionsOperationRequest {
    storeMultipleAnalysisUnitVersionsRequest: StoreMultipleAnalysisUnitVersionsRequest;
}

export interface UpdateAnalysisUnitVersionOperationRequest {
    id: number;
    updateAnalysisUnitVersionRequest: UpdateAnalysisUnitVersionRequest;
}

export interface UpdateMultipleAnalysisUnitVersionsOperationRequest {
    updateMultipleAnalysisUnitVersionsRequest: UpdateMultipleAnalysisUnitVersionsRequest;
}

/**
 * 
 */
export class LocationAnalysisUnitVersionsApi extends runtime.BaseAPI {

    /**
     * Delete analysis unit version.
     */
    async destroyAnalysisUnitVersionRaw(requestParameters: DestroyAnalysisUnitVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyAnalysisUnitVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/analysis-units/versions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete analysis unit version.
     */
    async destroyAnalysisUnitVersion(requestParameters: DestroyAnalysisUnitVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyAnalysisUnitVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export analysis unit versions in a selected format (csv, json, parquet).
     */
    async exportAnalysisUnitVersionsRaw(requestParameters: ExportAnalysisUnitVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAnalysisUnitVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterDate !== undefined) {
            queryParameters['filter[date]'] = requestParameters.filterDate;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterSource !== undefined) {
            queryParameters['filter[source]'] = requestParameters.filterSource;
        }

        if (requestParameters.filterCreatedBy !== undefined) {
            queryParameters['filter[created_by]'] = requestParameters.filterCreatedBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/analysis-units/versions/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export analysis unit versions in a selected format (csv, json, parquet).
     */
    async exportAnalysisUnitVersions(requestParameters: ExportAnalysisUnitVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAnalysisUnitVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index analysis unit versions.
     */
    async indexAnalysisUnitVersionsRaw(requestParameters: IndexAnalysisUnitVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAnalysisUnitVersionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterDate !== undefined) {
            queryParameters['filter[date]'] = requestParameters.filterDate;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterSource !== undefined) {
            queryParameters['filter[source]'] = requestParameters.filterSource;
        }

        if (requestParameters.filterCreatedBy !== undefined) {
            queryParameters['filter[created_by]'] = requestParameters.filterCreatedBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/analysis-units/versions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAnalysisUnitVersionsResponseFromJSON(jsonValue));
    }

    /**
     * Index analysis unit versions.
     */
    async indexAnalysisUnitVersions(requestParameters: IndexAnalysisUnitVersionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAnalysisUnitVersionsResponse> {
        const response = await this.indexAnalysisUnitVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show analysis unit version by id.
     */
    async showAnalysisUnitVersionRaw(requestParameters: ShowAnalysisUnitVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowAnalysisUnitVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showAnalysisUnitVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/analysis-units/versions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowAnalysisUnitVersionResponseFromJSON(jsonValue));
    }

    /**
     * Show analysis unit version by id.
     */
    async showAnalysisUnitVersion(requestParameters: ShowAnalysisUnitVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowAnalysisUnitVersionResponse> {
        const response = await this.showAnalysisUnitVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store analysis unit version.
     */
    async storeAnalysisUnitVersionRaw(requestParameters: StoreAnalysisUnitVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreAnalysisUnitVersionResponse>> {
        if (requestParameters.storeAnalysisUnitVersionRequest === null || requestParameters.storeAnalysisUnitVersionRequest === undefined) {
            throw new runtime.RequiredError('storeAnalysisUnitVersionRequest','Required parameter requestParameters.storeAnalysisUnitVersionRequest was null or undefined when calling storeAnalysisUnitVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/analysis-units/versions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreAnalysisUnitVersionRequestToJSON(requestParameters.storeAnalysisUnitVersionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreAnalysisUnitVersionResponseFromJSON(jsonValue));
    }

    /**
     * Store analysis unit version.
     */
    async storeAnalysisUnitVersion(requestParameters: StoreAnalysisUnitVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreAnalysisUnitVersionResponse> {
        const response = await this.storeAnalysisUnitVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple analysis unit versions.
     */
    async storeMultipleAnalysisUnitVersionsRaw(requestParameters: StoreMultipleAnalysisUnitVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleAnalysisUnitVersions200Response>> {
        if (requestParameters.storeMultipleAnalysisUnitVersionsRequest === null || requestParameters.storeMultipleAnalysisUnitVersionsRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleAnalysisUnitVersionsRequest','Required parameter requestParameters.storeMultipleAnalysisUnitVersionsRequest was null or undefined when calling storeMultipleAnalysisUnitVersions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/analysis-units/versions/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleAnalysisUnitVersionsRequestToJSON(requestParameters.storeMultipleAnalysisUnitVersionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleAnalysisUnitVersions200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple analysis unit versions.
     */
    async storeMultipleAnalysisUnitVersions(requestParameters: StoreMultipleAnalysisUnitVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleAnalysisUnitVersions200Response> {
        const response = await this.storeMultipleAnalysisUnitVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update analysis unit version.
     */
    async updateAnalysisUnitVersionRaw(requestParameters: UpdateAnalysisUnitVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAnalysisUnitVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAnalysisUnitVersion.');
        }

        if (requestParameters.updateAnalysisUnitVersionRequest === null || requestParameters.updateAnalysisUnitVersionRequest === undefined) {
            throw new runtime.RequiredError('updateAnalysisUnitVersionRequest','Required parameter requestParameters.updateAnalysisUnitVersionRequest was null or undefined when calling updateAnalysisUnitVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/analysis-units/versions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAnalysisUnitVersionRequestToJSON(requestParameters.updateAnalysisUnitVersionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAnalysisUnitVersionResponseFromJSON(jsonValue));
    }

    /**
     * Update analysis unit version.
     */
    async updateAnalysisUnitVersion(requestParameters: UpdateAnalysisUnitVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAnalysisUnitVersionResponse> {
        const response = await this.updateAnalysisUnitVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple analysis unit versions.
     */
    async updateMultipleAnalysisUnitVersionsRaw(requestParameters: UpdateMultipleAnalysisUnitVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleAnalysisUnitVersions200Response>> {
        if (requestParameters.updateMultipleAnalysisUnitVersionsRequest === null || requestParameters.updateMultipleAnalysisUnitVersionsRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleAnalysisUnitVersionsRequest','Required parameter requestParameters.updateMultipleAnalysisUnitVersionsRequest was null or undefined when calling updateMultipleAnalysisUnitVersions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/analysis-units/versions/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleAnalysisUnitVersionsRequestToJSON(requestParameters.updateMultipleAnalysisUnitVersionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleAnalysisUnitVersions200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple analysis unit versions.
     */
    async updateMultipleAnalysisUnitVersions(requestParameters: UpdateMultipleAnalysisUnitVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleAnalysisUnitVersions200Response> {
        const response = await this.updateMultipleAnalysisUnitVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAnalysisUnitVersionsFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAnalysisUnitVersionsFormatEnum = typeof ExportAnalysisUnitVersionsFormatEnum[keyof typeof ExportAnalysisUnitVersionsFormatEnum];
