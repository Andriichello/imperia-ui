/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexCovarCategoriesResponse,
  ShowCovarCategoryResponse,
  StoreCovarCategoryRequest,
  StoreCovarCategoryResponse,
  StoreMultipleCovarCategories200Response,
  StoreMultipleCovarCategoriesRequest,
  UpdateCovarCategoryRequest,
  UpdateCovarCategoryResponse,
  UpdateMultipleCovarCategories200Response,
  UpdateMultipleCovarCategoriesRequest,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexCovarCategoriesResponseFromJSON,
    IndexCovarCategoriesResponseToJSON,
    ShowCovarCategoryResponseFromJSON,
    ShowCovarCategoryResponseToJSON,
    StoreCovarCategoryRequestFromJSON,
    StoreCovarCategoryRequestToJSON,
    StoreCovarCategoryResponseFromJSON,
    StoreCovarCategoryResponseToJSON,
    StoreMultipleCovarCategories200ResponseFromJSON,
    StoreMultipleCovarCategories200ResponseToJSON,
    StoreMultipleCovarCategoriesRequestFromJSON,
    StoreMultipleCovarCategoriesRequestToJSON,
    UpdateCovarCategoryRequestFromJSON,
    UpdateCovarCategoryRequestToJSON,
    UpdateCovarCategoryResponseFromJSON,
    UpdateCovarCategoryResponseToJSON,
    UpdateMultipleCovarCategories200ResponseFromJSON,
    UpdateMultipleCovarCategories200ResponseToJSON,
    UpdateMultipleCovarCategoriesRequestFromJSON,
    UpdateMultipleCovarCategoriesRequestToJSON,
} from '../models';

export interface DestroyCovarCategoryRequest {
    id: number;
}

export interface ExportCovarCategoriesRequest {
    format: ExportCovarCategoriesFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterCovarId?: string;
    filterSurveyTypeId?: string;
    filterCategory?: string;
    filterModelId?: string;
    filterValue?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexCovarCategoriesRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterCovarId?: string;
    filterSurveyTypeId?: string;
    filterCategory?: string;
    filterModelId?: string;
    filterValue?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowCovarCategoryRequest {
    id: number;
    includes?: string;
}

export interface StoreCovarCategoryOperationRequest {
    storeCovarCategoryRequest: StoreCovarCategoryRequest;
}

export interface StoreMultipleCovarCategoriesOperationRequest {
    storeMultipleCovarCategoriesRequest: StoreMultipleCovarCategoriesRequest;
}

export interface UpdateCovarCategoryOperationRequest {
    id: number;
    updateCovarCategoryRequest: UpdateCovarCategoryRequest;
}

export interface UpdateMultipleCovarCategoriesOperationRequest {
    updateMultipleCovarCategoriesRequest: UpdateMultipleCovarCategoriesRequest;
}

/**
 * 
 */
export class ModelCovarCategoriesApi extends runtime.BaseAPI {

    /**
     * Delete covar category.
     */
    async destroyCovarCategoryRaw(requestParameters: DestroyCovarCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyCovarCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete covar category.
     */
    async destroyCovarCategory(requestParameters: DestroyCovarCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyCovarCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export covar categories in a selected format (csv, json, parquet).
     */
    async exportCovarCategoriesRaw(requestParameters: ExportCovarCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportCovarCategories.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterCovarId !== undefined) {
            queryParameters['filter[covar_id]'] = requestParameters.filterCovarId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterCategory !== undefined) {
            queryParameters['filter[category]'] = requestParameters.filterCategory;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterValue !== undefined) {
            queryParameters['filter[value]'] = requestParameters.filterValue;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/categories/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export covar categories in a selected format (csv, json, parquet).
     */
    async exportCovarCategories(requestParameters: ExportCovarCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportCovarCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index covar categories.
     */
    async indexCovarCategoriesRaw(requestParameters: IndexCovarCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexCovarCategoriesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterCovarId !== undefined) {
            queryParameters['filter[covar_id]'] = requestParameters.filterCovarId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterCategory !== undefined) {
            queryParameters['filter[category]'] = requestParameters.filterCategory;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterValue !== undefined) {
            queryParameters['filter[value]'] = requestParameters.filterValue;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCovarCategoriesResponseFromJSON(jsonValue));
    }

    /**
     * Index covar categories.
     */
    async indexCovarCategories(requestParameters: IndexCovarCategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexCovarCategoriesResponse> {
        const response = await this.indexCovarCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show covar category by id.
     */
    async showCovarCategoryRaw(requestParameters: ShowCovarCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowCovarCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showCovarCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowCovarCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Show covar category by id.
     */
    async showCovarCategory(requestParameters: ShowCovarCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowCovarCategoryResponse> {
        const response = await this.showCovarCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store covar category.
     */
    async storeCovarCategoryRaw(requestParameters: StoreCovarCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreCovarCategoryResponse>> {
        if (requestParameters.storeCovarCategoryRequest === null || requestParameters.storeCovarCategoryRequest === undefined) {
            throw new runtime.RequiredError('storeCovarCategoryRequest','Required parameter requestParameters.storeCovarCategoryRequest was null or undefined when calling storeCovarCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreCovarCategoryRequestToJSON(requestParameters.storeCovarCategoryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreCovarCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Store covar category.
     */
    async storeCovarCategory(requestParameters: StoreCovarCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreCovarCategoryResponse> {
        const response = await this.storeCovarCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple covars categories.
     */
    async storeMultipleCovarCategoriesRaw(requestParameters: StoreMultipleCovarCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleCovarCategories200Response>> {
        if (requestParameters.storeMultipleCovarCategoriesRequest === null || requestParameters.storeMultipleCovarCategoriesRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleCovarCategoriesRequest','Required parameter requestParameters.storeMultipleCovarCategoriesRequest was null or undefined when calling storeMultipleCovarCategories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/categories/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleCovarCategoriesRequestToJSON(requestParameters.storeMultipleCovarCategoriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleCovarCategories200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple covars categories.
     */
    async storeMultipleCovarCategories(requestParameters: StoreMultipleCovarCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleCovarCategories200Response> {
        const response = await this.storeMultipleCovarCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update covar category.
     */
    async updateCovarCategoryRaw(requestParameters: UpdateCovarCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCovarCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCovarCategory.');
        }

        if (requestParameters.updateCovarCategoryRequest === null || requestParameters.updateCovarCategoryRequest === undefined) {
            throw new runtime.RequiredError('updateCovarCategoryRequest','Required parameter requestParameters.updateCovarCategoryRequest was null or undefined when calling updateCovarCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCovarCategoryRequestToJSON(requestParameters.updateCovarCategoryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCovarCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Update covar category.
     */
    async updateCovarCategory(requestParameters: UpdateCovarCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCovarCategoryResponse> {
        const response = await this.updateCovarCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple covars categories.
     */
    async updateMultipleCovarCategoriesRaw(requestParameters: UpdateMultipleCovarCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleCovarCategories200Response>> {
        if (requestParameters.updateMultipleCovarCategoriesRequest === null || requestParameters.updateMultipleCovarCategoriesRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleCovarCategoriesRequest','Required parameter requestParameters.updateMultipleCovarCategoriesRequest was null or undefined when calling updateMultipleCovarCategories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/covars/categories/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleCovarCategoriesRequestToJSON(requestParameters.updateMultipleCovarCategoriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleCovarCategories200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple covars categories.
     */
    async updateMultipleCovarCategories(requestParameters: UpdateMultipleCovarCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleCovarCategories200Response> {
        const response = await this.updateMultipleCovarCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportCovarCategoriesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportCovarCategoriesFormatEnum = typeof ExportCovarCategoriesFormatEnum[keyof typeof ExportCovarCategoriesFormatEnum];
