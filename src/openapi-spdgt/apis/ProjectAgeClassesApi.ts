/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexProjectAgeClassesResponse,
  ShowProjectAgeClassResponse,
  StoreMultipleProjectAgeClasses200Response,
  StoreMultipleProjectAgeClassesRequest,
  StoreProjectAgeClassRequest,
  StoreProjectAgeClassResponse,
  UpdateMultipleProjectAgeClasses200Response,
  UpdateMultipleProjectAgeClassesRequest,
  UpdateProjectAgeClassRequest,
  UpdateProjectAgeClassResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexProjectAgeClassesResponseFromJSON,
    IndexProjectAgeClassesResponseToJSON,
    ShowProjectAgeClassResponseFromJSON,
    ShowProjectAgeClassResponseToJSON,
    StoreMultipleProjectAgeClasses200ResponseFromJSON,
    StoreMultipleProjectAgeClasses200ResponseToJSON,
    StoreMultipleProjectAgeClassesRequestFromJSON,
    StoreMultipleProjectAgeClassesRequestToJSON,
    StoreProjectAgeClassRequestFromJSON,
    StoreProjectAgeClassRequestToJSON,
    StoreProjectAgeClassResponseFromJSON,
    StoreProjectAgeClassResponseToJSON,
    UpdateMultipleProjectAgeClasses200ResponseFromJSON,
    UpdateMultipleProjectAgeClasses200ResponseToJSON,
    UpdateMultipleProjectAgeClassesRequestFromJSON,
    UpdateMultipleProjectAgeClassesRequestToJSON,
    UpdateProjectAgeClassRequestFromJSON,
    UpdateProjectAgeClassRequestToJSON,
    UpdateProjectAgeClassResponseFromJSON,
    UpdateProjectAgeClassResponseToJSON,
} from '../models';

export interface DestroyProjectAgeClassRequest {
    id: number;
}

export interface ExportProjectAgeClassesRequest {
    format: ExportProjectAgeClassesFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterSpeciesId?: string;
    filterAgeClass?: string;
    filterAgeMinClasses?: string;
    filterAgeMaxClasses?: string;
    filterIsFirstReproduction?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexProjectAgeClassesRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterSpeciesId?: string;
    filterAgeClass?: string;
    filterAgeMinClasses?: string;
    filterAgeMaxClasses?: string;
    filterIsFirstReproduction?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowProjectAgeClassRequest {
    id: number;
    includes?: string;
}

export interface StoreMultipleProjectAgeClassesOperationRequest {
    storeMultipleProjectAgeClassesRequest: StoreMultipleProjectAgeClassesRequest;
}

export interface StoreProjectAgeClassOperationRequest {
    storeProjectAgeClassRequest: StoreProjectAgeClassRequest;
}

export interface UpdateMultipleProjectAgeClassesOperationRequest {
    updateMultipleProjectAgeClassesRequest: UpdateMultipleProjectAgeClassesRequest;
}

export interface UpdateProjectAgeClassOperationRequest {
    id: number;
    updateProjectAgeClassRequest: UpdateProjectAgeClassRequest;
}

/**
 * 
 */
export class ProjectAgeClassesApi extends runtime.BaseAPI {

    /**
     * Delete project age class.
     */
    async destroyProjectAgeClassRaw(requestParameters: DestroyProjectAgeClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyProjectAgeClass.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/age-classes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete project age class.
     */
    async destroyProjectAgeClass(requestParameters: DestroyProjectAgeClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyProjectAgeClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export project age classes in a selected format (csv, json, parquet).
     */
    async exportProjectAgeClassesRaw(requestParameters: ExportProjectAgeClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportProjectAgeClasses.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterAgeClass !== undefined) {
            queryParameters['filter[age_class]'] = requestParameters.filterAgeClass;
        }

        if (requestParameters.filterAgeMinClasses !== undefined) {
            queryParameters['filter[age_min_classes]'] = requestParameters.filterAgeMinClasses;
        }

        if (requestParameters.filterAgeMaxClasses !== undefined) {
            queryParameters['filter[age_max_classes]'] = requestParameters.filterAgeMaxClasses;
        }

        if (requestParameters.filterIsFirstReproduction !== undefined) {
            queryParameters['filter[is_first_reproduction]'] = requestParameters.filterIsFirstReproduction;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/age-classes/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export project age classes in a selected format (csv, json, parquet).
     */
    async exportProjectAgeClasses(requestParameters: ExportProjectAgeClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportProjectAgeClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index project age classes.
     */
    async indexProjectAgeClassesRaw(requestParameters: IndexProjectAgeClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexProjectAgeClassesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterAgeClass !== undefined) {
            queryParameters['filter[age_class]'] = requestParameters.filterAgeClass;
        }

        if (requestParameters.filterAgeMinClasses !== undefined) {
            queryParameters['filter[age_min_classes]'] = requestParameters.filterAgeMinClasses;
        }

        if (requestParameters.filterAgeMaxClasses !== undefined) {
            queryParameters['filter[age_max_classes]'] = requestParameters.filterAgeMaxClasses;
        }

        if (requestParameters.filterIsFirstReproduction !== undefined) {
            queryParameters['filter[is_first_reproduction]'] = requestParameters.filterIsFirstReproduction;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/age-classes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexProjectAgeClassesResponseFromJSON(jsonValue));
    }

    /**
     * Index project age classes.
     */
    async indexProjectAgeClasses(requestParameters: IndexProjectAgeClassesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexProjectAgeClassesResponse> {
        const response = await this.indexProjectAgeClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show project age class by id.
     */
    async showProjectAgeClassRaw(requestParameters: ShowProjectAgeClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowProjectAgeClassResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showProjectAgeClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/age-classes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowProjectAgeClassResponseFromJSON(jsonValue));
    }

    /**
     * Show project age class by id.
     */
    async showProjectAgeClass(requestParameters: ShowProjectAgeClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowProjectAgeClassResponse> {
        const response = await this.showProjectAgeClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple projectAgeClasses.
     */
    async storeMultipleProjectAgeClassesRaw(requestParameters: StoreMultipleProjectAgeClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleProjectAgeClasses200Response>> {
        if (requestParameters.storeMultipleProjectAgeClassesRequest === null || requestParameters.storeMultipleProjectAgeClassesRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleProjectAgeClassesRequest','Required parameter requestParameters.storeMultipleProjectAgeClassesRequest was null or undefined when calling storeMultipleProjectAgeClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/age-classes/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleProjectAgeClassesRequestToJSON(requestParameters.storeMultipleProjectAgeClassesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleProjectAgeClasses200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple projectAgeClasses.
     */
    async storeMultipleProjectAgeClasses(requestParameters: StoreMultipleProjectAgeClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleProjectAgeClasses200Response> {
        const response = await this.storeMultipleProjectAgeClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store project age class.
     */
    async storeProjectAgeClassRaw(requestParameters: StoreProjectAgeClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreProjectAgeClassResponse>> {
        if (requestParameters.storeProjectAgeClassRequest === null || requestParameters.storeProjectAgeClassRequest === undefined) {
            throw new runtime.RequiredError('storeProjectAgeClassRequest','Required parameter requestParameters.storeProjectAgeClassRequest was null or undefined when calling storeProjectAgeClass.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/age-classes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreProjectAgeClassRequestToJSON(requestParameters.storeProjectAgeClassRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreProjectAgeClassResponseFromJSON(jsonValue));
    }

    /**
     * Store project age class.
     */
    async storeProjectAgeClass(requestParameters: StoreProjectAgeClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreProjectAgeClassResponse> {
        const response = await this.storeProjectAgeClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple projectAgeClasses.
     */
    async updateMultipleProjectAgeClassesRaw(requestParameters: UpdateMultipleProjectAgeClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleProjectAgeClasses200Response>> {
        if (requestParameters.updateMultipleProjectAgeClassesRequest === null || requestParameters.updateMultipleProjectAgeClassesRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleProjectAgeClassesRequest','Required parameter requestParameters.updateMultipleProjectAgeClassesRequest was null or undefined when calling updateMultipleProjectAgeClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/age-classes/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleProjectAgeClassesRequestToJSON(requestParameters.updateMultipleProjectAgeClassesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleProjectAgeClasses200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple projectAgeClasses.
     */
    async updateMultipleProjectAgeClasses(requestParameters: UpdateMultipleProjectAgeClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleProjectAgeClasses200Response> {
        const response = await this.updateMultipleProjectAgeClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update project age class.
     */
    async updateProjectAgeClassRaw(requestParameters: UpdateProjectAgeClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProjectAgeClassResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProjectAgeClass.');
        }

        if (requestParameters.updateProjectAgeClassRequest === null || requestParameters.updateProjectAgeClassRequest === undefined) {
            throw new runtime.RequiredError('updateProjectAgeClassRequest','Required parameter requestParameters.updateProjectAgeClassRequest was null or undefined when calling updateProjectAgeClass.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/projects/age-classes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectAgeClassRequestToJSON(requestParameters.updateProjectAgeClassRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProjectAgeClassResponseFromJSON(jsonValue));
    }

    /**
     * Update project age class.
     */
    async updateProjectAgeClass(requestParameters: UpdateProjectAgeClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProjectAgeClassResponse> {
        const response = await this.updateProjectAgeClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportProjectAgeClassesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportProjectAgeClassesFormatEnum = typeof ExportProjectAgeClassesFormatEnum[keyof typeof ExportProjectAgeClassesFormatEnum];
