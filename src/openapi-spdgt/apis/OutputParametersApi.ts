/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexParametersResponse,
  ShowParameterResponse,
  StoreMultipleParameters200Response,
  StoreMultipleParametersRequest,
  StoreParameterRequest,
  StoreParameterResponse,
  UpdateMultipleParameters200Response,
  UpdateMultipleParametersRequest,
  UpdateParameterRequest,
  UpdateParameterResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexParametersResponseFromJSON,
    IndexParametersResponseToJSON,
    ShowParameterResponseFromJSON,
    ShowParameterResponseToJSON,
    StoreMultipleParameters200ResponseFromJSON,
    StoreMultipleParameters200ResponseToJSON,
    StoreMultipleParametersRequestFromJSON,
    StoreMultipleParametersRequestToJSON,
    StoreParameterRequestFromJSON,
    StoreParameterRequestToJSON,
    StoreParameterResponseFromJSON,
    StoreParameterResponseToJSON,
    UpdateMultipleParameters200ResponseFromJSON,
    UpdateMultipleParameters200ResponseToJSON,
    UpdateMultipleParametersRequestFromJSON,
    UpdateMultipleParametersRequestToJSON,
    UpdateParameterRequestFromJSON,
    UpdateParameterRequestToJSON,
    UpdateParameterResponseFromJSON,
    UpdateParameterResponseToJSON,
} from '../models';

export interface DestroyParameterRequest {
    id: number;
}

export interface ExportParametersRequest {
    format: ExportParametersFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterName?: string;
    filterAbbreviation?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexParametersRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterName?: string;
    filterAbbreviation?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowParameterRequest {
    id: number;
    includes?: string;
}

export interface StoreMultipleParametersOperationRequest {
    storeMultipleParametersRequest: StoreMultipleParametersRequest;
}

export interface StoreParameterOperationRequest {
    storeParameterRequest: StoreParameterRequest;
}

export interface UpdateMultipleParametersOperationRequest {
    updateMultipleParametersRequest: UpdateMultipleParametersRequest;
}

export interface UpdateParameterOperationRequest {
    id: number;
    updateParameterRequest: UpdateParameterRequest;
}

/**
 * 
 */
export class OutputParametersApi extends runtime.BaseAPI {

    /**
     * Delete parameter.
     */
    async destroyParameterRaw(requestParameters: DestroyParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyParameter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/parameters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete parameter.
     */
    async destroyParameter(requestParameters: DestroyParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export model parameters in a selected format (csv, json, parquet).
     */
    async exportParametersRaw(requestParameters: ExportParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportParameters.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterAbbreviation !== undefined) {
            queryParameters['filter[abbreviation]'] = requestParameters.filterAbbreviation;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/parameters/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export model parameters in a selected format (csv, json, parquet).
     */
    async exportParameters(requestParameters: ExportParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index model parameters.
     */
    async indexParametersRaw(requestParameters: IndexParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexParametersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterAbbreviation !== undefined) {
            queryParameters['filter[abbreviation]'] = requestParameters.filterAbbreviation;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/parameters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexParametersResponseFromJSON(jsonValue));
    }

    /**
     * Index model parameters.
     */
    async indexParameters(requestParameters: IndexParametersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexParametersResponse> {
        const response = await this.indexParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show parameter by id.
     */
    async showParameterRaw(requestParameters: ShowParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowParameterResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showParameter.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/parameters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowParameterResponseFromJSON(jsonValue));
    }

    /**
     * Show parameter by id.
     */
    async showParameter(requestParameters: ShowParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowParameterResponse> {
        const response = await this.showParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple parameters.
     */
    async storeMultipleParametersRaw(requestParameters: StoreMultipleParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleParameters200Response>> {
        if (requestParameters.storeMultipleParametersRequest === null || requestParameters.storeMultipleParametersRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleParametersRequest','Required parameter requestParameters.storeMultipleParametersRequest was null or undefined when calling storeMultipleParameters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/parameters/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleParametersRequestToJSON(requestParameters.storeMultipleParametersRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleParameters200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple parameters.
     */
    async storeMultipleParameters(requestParameters: StoreMultipleParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleParameters200Response> {
        const response = await this.storeMultipleParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store parameter.
     */
    async storeParameterRaw(requestParameters: StoreParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreParameterResponse>> {
        if (requestParameters.storeParameterRequest === null || requestParameters.storeParameterRequest === undefined) {
            throw new runtime.RequiredError('storeParameterRequest','Required parameter requestParameters.storeParameterRequest was null or undefined when calling storeParameter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/parameters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreParameterRequestToJSON(requestParameters.storeParameterRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreParameterResponseFromJSON(jsonValue));
    }

    /**
     * Store parameter.
     */
    async storeParameter(requestParameters: StoreParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreParameterResponse> {
        const response = await this.storeParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple parameters.
     */
    async updateMultipleParametersRaw(requestParameters: UpdateMultipleParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleParameters200Response>> {
        if (requestParameters.updateMultipleParametersRequest === null || requestParameters.updateMultipleParametersRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleParametersRequest','Required parameter requestParameters.updateMultipleParametersRequest was null or undefined when calling updateMultipleParameters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/parameters/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleParametersRequestToJSON(requestParameters.updateMultipleParametersRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleParameters200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple parameters.
     */
    async updateMultipleParameters(requestParameters: UpdateMultipleParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleParameters200Response> {
        const response = await this.updateMultipleParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update parameter.
     */
    async updateParameterRaw(requestParameters: UpdateParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateParameterResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateParameter.');
        }

        if (requestParameters.updateParameterRequest === null || requestParameters.updateParameterRequest === undefined) {
            throw new runtime.RequiredError('updateParameterRequest','Required parameter requestParameters.updateParameterRequest was null or undefined when calling updateParameter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/parameters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateParameterRequestToJSON(requestParameters.updateParameterRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateParameterResponseFromJSON(jsonValue));
    }

    /**
     * Update parameter.
     */
    async updateParameter(requestParameters: UpdateParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateParameterResponse> {
        const response = await this.updateParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportParametersFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportParametersFormatEnum = typeof ExportParametersFormatEnum[keyof typeof ExportParametersFormatEnum];
