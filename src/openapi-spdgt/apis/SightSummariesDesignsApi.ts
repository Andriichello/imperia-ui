/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExportIndexResponse,
  IndexAerialSurveyDesignSummariesResponse,
} from '../models';
import {
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAerialSurveyDesignSummariesResponseFromJSON,
    IndexAerialSurveyDesignSummariesResponseToJSON,
} from '../models';

export interface ExportAerialSurveyDesignSummariesRequest {
    format: ExportAerialSurveyDesignSummariesFormatEnum;
    bioYear: number;
    surveyTypeId: number;
    analysisUnitId: number;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterStratumId?: string;
    filterStratumAbbreviation?: string;
    filterStratumName?: string;
}

export interface IndexAerialSurveyDesignSummariesRequest {
    bioYear: number;
    surveyTypeId: number;
    analysisUnitId: number;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterStratumId?: string;
    filterStratumAbbreviation?: string;
    filterStratumName?: string;
}

/**
 * 
 */
export class SightSummariesDesignsApi extends runtime.BaseAPI {

    /**
     * phpcs:disable
     * Export aerial survey design summaries in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyDesignSummariesRaw(requestParameters: ExportAerialSurveyDesignSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAerialSurveyDesignSummaries.');
        }

        if (requestParameters.bioYear === null || requestParameters.bioYear === undefined) {
            throw new runtime.RequiredError('bioYear','Required parameter requestParameters.bioYear was null or undefined when calling exportAerialSurveyDesignSummaries.');
        }

        if (requestParameters.surveyTypeId === null || requestParameters.surveyTypeId === undefined) {
            throw new runtime.RequiredError('surveyTypeId','Required parameter requestParameters.surveyTypeId was null or undefined when calling exportAerialSurveyDesignSummaries.');
        }

        if (requestParameters.analysisUnitId === null || requestParameters.analysisUnitId === undefined) {
            throw new runtime.RequiredError('analysisUnitId','Required parameter requestParameters.analysisUnitId was null or undefined when calling exportAerialSurveyDesignSummaries.');
        }

        const queryParameters: any = {};

        if (requestParameters.bioYear !== undefined) {
            queryParameters['bio_year'] = requestParameters.bioYear;
        }

        if (requestParameters.surveyTypeId !== undefined) {
            queryParameters['survey_type_id'] = requestParameters.surveyTypeId;
        }

        if (requestParameters.analysisUnitId !== undefined) {
            queryParameters['analysis_unit_id'] = requestParameters.analysisUnitId;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterStratumId !== undefined) {
            queryParameters['filter[stratum_id]'] = requestParameters.filterStratumId;
        }

        if (requestParameters.filterStratumAbbreviation !== undefined) {
            queryParameters['filter[stratum_abbreviation]'] = requestParameters.filterStratumAbbreviation;
        }

        if (requestParameters.filterStratumName !== undefined) {
            queryParameters['filter[stratum_name]'] = requestParameters.filterStratumName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/summaries/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * phpcs:disable
     * Export aerial survey design summaries in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyDesignSummaries(requestParameters: ExportAerialSurveyDesignSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAerialSurveyDesignSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index aerial survey design summaries.
     */
    async indexAerialSurveyDesignSummariesRaw(requestParameters: IndexAerialSurveyDesignSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAerialSurveyDesignSummariesResponse>> {
        if (requestParameters.bioYear === null || requestParameters.bioYear === undefined) {
            throw new runtime.RequiredError('bioYear','Required parameter requestParameters.bioYear was null or undefined when calling indexAerialSurveyDesignSummaries.');
        }

        if (requestParameters.surveyTypeId === null || requestParameters.surveyTypeId === undefined) {
            throw new runtime.RequiredError('surveyTypeId','Required parameter requestParameters.surveyTypeId was null or undefined when calling indexAerialSurveyDesignSummaries.');
        }

        if (requestParameters.analysisUnitId === null || requestParameters.analysisUnitId === undefined) {
            throw new runtime.RequiredError('analysisUnitId','Required parameter requestParameters.analysisUnitId was null or undefined when calling indexAerialSurveyDesignSummaries.');
        }

        const queryParameters: any = {};

        if (requestParameters.bioYear !== undefined) {
            queryParameters['bio_year'] = requestParameters.bioYear;
        }

        if (requestParameters.surveyTypeId !== undefined) {
            queryParameters['survey_type_id'] = requestParameters.surveyTypeId;
        }

        if (requestParameters.analysisUnitId !== undefined) {
            queryParameters['analysis_unit_id'] = requestParameters.analysisUnitId;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterStratumId !== undefined) {
            queryParameters['filter[stratum_id]'] = requestParameters.filterStratumId;
        }

        if (requestParameters.filterStratumAbbreviation !== undefined) {
            queryParameters['filter[stratum_abbreviation]'] = requestParameters.filterStratumAbbreviation;
        }

        if (requestParameters.filterStratumName !== undefined) {
            queryParameters['filter[stratum_name]'] = requestParameters.filterStratumName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/designs/summaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAerialSurveyDesignSummariesResponseFromJSON(jsonValue));
    }

    /**
     * Index aerial survey design summaries.
     */
    async indexAerialSurveyDesignSummaries(requestParameters: IndexAerialSurveyDesignSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAerialSurveyDesignSummariesResponse> {
        const response = await this.indexAerialSurveyDesignSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAerialSurveyDesignSummariesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAerialSurveyDesignSummariesFormatEnum = typeof ExportAerialSurveyDesignSummariesFormatEnum[keyof typeof ExportAerialSurveyDesignSummariesFormatEnum];
