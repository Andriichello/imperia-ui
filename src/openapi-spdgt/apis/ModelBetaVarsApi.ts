/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexBetaVarsResponse,
  ShowBetaVarResponse,
  StoreBetaVarRequest,
  StoreBetaVarResponse,
  StoreMultipleBetaVars200Response,
  StoreMultipleBetaVarsRequest,
  UpdateBetaVarRequest,
  UpdateBetaVarResponse,
  UpdateMultipleBetaVars200Response,
  UpdateMultipleBetaVarsRequest,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexBetaVarsResponseFromJSON,
    IndexBetaVarsResponseToJSON,
    ShowBetaVarResponseFromJSON,
    ShowBetaVarResponseToJSON,
    StoreBetaVarRequestFromJSON,
    StoreBetaVarRequestToJSON,
    StoreBetaVarResponseFromJSON,
    StoreBetaVarResponseToJSON,
    StoreMultipleBetaVars200ResponseFromJSON,
    StoreMultipleBetaVars200ResponseToJSON,
    StoreMultipleBetaVarsRequestFromJSON,
    StoreMultipleBetaVarsRequestToJSON,
    UpdateBetaVarRequestFromJSON,
    UpdateBetaVarRequestToJSON,
    UpdateBetaVarResponseFromJSON,
    UpdateBetaVarResponseToJSON,
    UpdateMultipleBetaVars200ResponseFromJSON,
    UpdateMultipleBetaVars200ResponseToJSON,
    UpdateMultipleBetaVarsRequestFromJSON,
    UpdateMultipleBetaVarsRequestToJSON,
} from '../models';

export interface DestroyBetaVarRequest {
    id: number;
}

export interface ExportBetaVarsRequest {
    format: ExportBetaVarsFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterBetaId1?: string;
    filterBetaId2?: string;
    filterModelId?: string;
    filterSurveyTypeId?: string;
    filterVcov?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexBetaVarsRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterBetaId1?: string;
    filterBetaId2?: string;
    filterModelId?: string;
    filterSurveyTypeId?: string;
    filterVcov?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowBetaVarRequest {
    id: number;
    includes?: string;
}

export interface StoreBetaVarOperationRequest {
    storeBetaVarRequest: StoreBetaVarRequest;
}

export interface StoreMultipleBetaVarsOperationRequest {
    storeMultipleBetaVarsRequest: StoreMultipleBetaVarsRequest;
}

export interface UpdateBetaVarOperationRequest {
    id: number;
    updateBetaVarRequest: UpdateBetaVarRequest;
}

export interface UpdateMultipleBetaVarsOperationRequest {
    updateMultipleBetaVarsRequest: UpdateMultipleBetaVarsRequest;
}

/**
 * 
 */
export class ModelBetaVarsApi extends runtime.BaseAPI {

    /**
     * Delete beta var.
     */
    async destroyBetaVarRaw(requestParameters: DestroyBetaVarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyBetaVar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/beta-vars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete beta var.
     */
    async destroyBetaVar(requestParameters: DestroyBetaVarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyBetaVarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export beta vars in a selected format (csv, json, parquet).
     */
    async exportBetaVarsRaw(requestParameters: ExportBetaVarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportBetaVars.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterBetaId1 !== undefined) {
            queryParameters['filter[beta_id1]'] = requestParameters.filterBetaId1;
        }

        if (requestParameters.filterBetaId2 !== undefined) {
            queryParameters['filter[beta_id2]'] = requestParameters.filterBetaId2;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterVcov !== undefined) {
            queryParameters['filter[vcov]'] = requestParameters.filterVcov;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/beta-vars/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export beta vars in a selected format (csv, json, parquet).
     */
    async exportBetaVars(requestParameters: ExportBetaVarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportBetaVarsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index beta vars.
     */
    async indexBetaVarsRaw(requestParameters: IndexBetaVarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexBetaVarsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterBetaId1 !== undefined) {
            queryParameters['filter[beta_id1]'] = requestParameters.filterBetaId1;
        }

        if (requestParameters.filterBetaId2 !== undefined) {
            queryParameters['filter[beta_id2]'] = requestParameters.filterBetaId2;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterVcov !== undefined) {
            queryParameters['filter[vcov]'] = requestParameters.filterVcov;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/beta-vars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexBetaVarsResponseFromJSON(jsonValue));
    }

    /**
     * Index beta vars.
     */
    async indexBetaVars(requestParameters: IndexBetaVarsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexBetaVarsResponse> {
        const response = await this.indexBetaVarsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show beta var by id.
     */
    async showBetaVarRaw(requestParameters: ShowBetaVarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowBetaVarResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showBetaVar.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/beta-vars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowBetaVarResponseFromJSON(jsonValue));
    }

    /**
     * Show beta var by id.
     */
    async showBetaVar(requestParameters: ShowBetaVarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowBetaVarResponse> {
        const response = await this.showBetaVarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store beta var.
     */
    async storeBetaVarRaw(requestParameters: StoreBetaVarOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreBetaVarResponse>> {
        if (requestParameters.storeBetaVarRequest === null || requestParameters.storeBetaVarRequest === undefined) {
            throw new runtime.RequiredError('storeBetaVarRequest','Required parameter requestParameters.storeBetaVarRequest was null or undefined when calling storeBetaVar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/beta-vars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreBetaVarRequestToJSON(requestParameters.storeBetaVarRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreBetaVarResponseFromJSON(jsonValue));
    }

    /**
     * Store beta var.
     */
    async storeBetaVar(requestParameters: StoreBetaVarOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreBetaVarResponse> {
        const response = await this.storeBetaVarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple beta vars.
     */
    async storeMultipleBetaVarsRaw(requestParameters: StoreMultipleBetaVarsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleBetaVars200Response>> {
        if (requestParameters.storeMultipleBetaVarsRequest === null || requestParameters.storeMultipleBetaVarsRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleBetaVarsRequest','Required parameter requestParameters.storeMultipleBetaVarsRequest was null or undefined when calling storeMultipleBetaVars.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/beta-vars/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleBetaVarsRequestToJSON(requestParameters.storeMultipleBetaVarsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleBetaVars200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple beta vars.
     */
    async storeMultipleBetaVars(requestParameters: StoreMultipleBetaVarsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleBetaVars200Response> {
        const response = await this.storeMultipleBetaVarsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update beta var.
     */
    async updateBetaVarRaw(requestParameters: UpdateBetaVarOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateBetaVarResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBetaVar.');
        }

        if (requestParameters.updateBetaVarRequest === null || requestParameters.updateBetaVarRequest === undefined) {
            throw new runtime.RequiredError('updateBetaVarRequest','Required parameter requestParameters.updateBetaVarRequest was null or undefined when calling updateBetaVar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/beta-vars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBetaVarRequestToJSON(requestParameters.updateBetaVarRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateBetaVarResponseFromJSON(jsonValue));
    }

    /**
     * Update beta var.
     */
    async updateBetaVar(requestParameters: UpdateBetaVarOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateBetaVarResponse> {
        const response = await this.updateBetaVarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple beta vars.
     */
    async updateMultipleBetaVarsRaw(requestParameters: UpdateMultipleBetaVarsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleBetaVars200Response>> {
        if (requestParameters.updateMultipleBetaVarsRequest === null || requestParameters.updateMultipleBetaVarsRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleBetaVarsRequest','Required parameter requestParameters.updateMultipleBetaVarsRequest was null or undefined when calling updateMultipleBetaVars.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/beta-vars/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleBetaVarsRequestToJSON(requestParameters.updateMultipleBetaVarsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleBetaVars200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple beta vars.
     */
    async updateMultipleBetaVars(requestParameters: UpdateMultipleBetaVarsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleBetaVars200Response> {
        const response = await this.updateMultipleBetaVarsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportBetaVarsFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportBetaVarsFormatEnum = typeof ExportBetaVarsFormatEnum[keyof typeof ExportBetaVarsFormatEnum];
