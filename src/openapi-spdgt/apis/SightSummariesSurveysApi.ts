/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExportIndexResponse,
  IndexAerialSurveySummariesResponse,
} from '../models';
import {
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAerialSurveySummariesResponseFromJSON,
    IndexAerialSurveySummariesResponseToJSON,
} from '../models';

export interface ExportAerialSurveySummariesRequest {
    format: ExportAerialSurveySummariesFormatEnum;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterAerialSurveyId?: string;
    filterBioYear?: string;
    filterDate?: string;
    filterSurveyTypeId?: string;
    filterSurveyType?: string;
    filterSpeciesId?: string;
    filterSpecies?: string;
    filterSpeciesIds?: string;
    filterAnalysisUnitId?: string;
    filterAnalysisUnit?: string;
    filterManagementUnit?: string;
    filterManagementUnitId?: string;
    filterAircraftId?: string;
    filterAircraft?: string;
    filterSampledSubunits?: string;
    filterObservations?: string;
    filterMaxTotal?: string;
    filterMinTotal?: string;
    filterAvgTotal?: string;
    filterTotal?: string;
    filterMalesTotal?: string;
    filterFemalesTotal?: string;
    filterYoungsTotal?: string;
    filterUnclassTotal?: string;
    filterZeroTotals?: string;
    filterOtherSampledSubunits?: string;
    filterOtherObservations?: string;
    filterOtherMaxTotal?: string;
    filterOtherMinTotal?: string;
    filterOtherAvgTotal?: string;
    filterOtherTotal?: string;
    filterOtherMalesTotal?: string;
    filterOtherFemalesTotal?: string;
    filterOtherYoungsTotal?: string;
    filterOtherUnclassTotal?: string;
    filterOtherZeroTotals?: string;
}

export interface IndexAerialSurveySummariesRequest {
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterAerialSurveyId?: string;
    filterBioYear?: string;
    filterDate?: string;
    filterSurveyTypeId?: string;
    filterSurveyType?: string;
    filterSpeciesId?: string;
    filterSpecies?: string;
    filterSpeciesIds?: string;
    filterAnalysisUnitId?: string;
    filterAnalysisUnit?: string;
    filterManagementUnit?: string;
    filterManagementUnitId?: string;
    filterAircraftId?: string;
    filterAircraft?: string;
    filterSampledSubunits?: string;
    filterObservations?: string;
    filterMaxTotal?: string;
    filterMinTotal?: string;
    filterAvgTotal?: string;
    filterTotal?: string;
    filterMalesTotal?: string;
    filterFemalesTotal?: string;
    filterYoungsTotal?: string;
    filterUnclassTotal?: string;
    filterZeroTotals?: string;
    filterOtherSampledSubunits?: string;
    filterOtherObservations?: string;
    filterOtherMaxTotal?: string;
    filterOtherMinTotal?: string;
    filterOtherAvgTotal?: string;
    filterOtherTotal?: string;
    filterOtherMalesTotal?: string;
    filterOtherFemalesTotal?: string;
    filterOtherYoungsTotal?: string;
    filterOtherUnclassTotal?: string;
    filterOtherZeroTotals?: string;
}

/**
 * 
 */
export class SightSummariesSurveysApi extends runtime.BaseAPI {

    /**
     * phpcs:disable
     * Export aerial survey summaries in a selected format (csv, json, parquet).
     */
    async exportAerialSurveySummariesRaw(requestParameters: ExportAerialSurveySummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAerialSurveySummaries.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterAerialSurveyId !== undefined) {
            queryParameters['filter[aerial_survey_id]'] = requestParameters.filterAerialSurveyId;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterDate !== undefined) {
            queryParameters['filter[date]'] = requestParameters.filterDate;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterSurveyType !== undefined) {
            queryParameters['filter[survey_type]'] = requestParameters.filterSurveyType;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterSpecies !== undefined) {
            queryParameters['filter[species]'] = requestParameters.filterSpecies;
        }

        if (requestParameters.filterSpeciesIds !== undefined) {
            queryParameters['filter[species_ids]'] = requestParameters.filterSpeciesIds;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterAnalysisUnit !== undefined) {
            queryParameters['filter[analysis_unit]'] = requestParameters.filterAnalysisUnit;
        }

        if (requestParameters.filterManagementUnit !== undefined) {
            queryParameters['filter[management_unit]'] = requestParameters.filterManagementUnit;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterAircraftId !== undefined) {
            queryParameters['filter[aircraft_id]'] = requestParameters.filterAircraftId;
        }

        if (requestParameters.filterAircraft !== undefined) {
            queryParameters['filter[aircraft]'] = requestParameters.filterAircraft;
        }

        if (requestParameters.filterSampledSubunits !== undefined) {
            queryParameters['filter[sampled_subunits]'] = requestParameters.filterSampledSubunits;
        }

        if (requestParameters.filterObservations !== undefined) {
            queryParameters['filter[observations]'] = requestParameters.filterObservations;
        }

        if (requestParameters.filterMaxTotal !== undefined) {
            queryParameters['filter[max_total]'] = requestParameters.filterMaxTotal;
        }

        if (requestParameters.filterMinTotal !== undefined) {
            queryParameters['filter[min_total]'] = requestParameters.filterMinTotal;
        }

        if (requestParameters.filterAvgTotal !== undefined) {
            queryParameters['filter[avg_total]'] = requestParameters.filterAvgTotal;
        }

        if (requestParameters.filterTotal !== undefined) {
            queryParameters['filter[total]'] = requestParameters.filterTotal;
        }

        if (requestParameters.filterMalesTotal !== undefined) {
            queryParameters['filter[males_total]'] = requestParameters.filterMalesTotal;
        }

        if (requestParameters.filterFemalesTotal !== undefined) {
            queryParameters['filter[females_total]'] = requestParameters.filterFemalesTotal;
        }

        if (requestParameters.filterYoungsTotal !== undefined) {
            queryParameters['filter[youngs_total]'] = requestParameters.filterYoungsTotal;
        }

        if (requestParameters.filterUnclassTotal !== undefined) {
            queryParameters['filter[unclass_total]'] = requestParameters.filterUnclassTotal;
        }

        if (requestParameters.filterZeroTotals !== undefined) {
            queryParameters['filter[zero_totals]'] = requestParameters.filterZeroTotals;
        }

        if (requestParameters.filterOtherSampledSubunits !== undefined) {
            queryParameters['filter[other_sampled_subunits]'] = requestParameters.filterOtherSampledSubunits;
        }

        if (requestParameters.filterOtherObservations !== undefined) {
            queryParameters['filter[other_observations]'] = requestParameters.filterOtherObservations;
        }

        if (requestParameters.filterOtherMaxTotal !== undefined) {
            queryParameters['filter[other_max_total]'] = requestParameters.filterOtherMaxTotal;
        }

        if (requestParameters.filterOtherMinTotal !== undefined) {
            queryParameters['filter[other_min_total]'] = requestParameters.filterOtherMinTotal;
        }

        if (requestParameters.filterOtherAvgTotal !== undefined) {
            queryParameters['filter[other_avg_total]'] = requestParameters.filterOtherAvgTotal;
        }

        if (requestParameters.filterOtherTotal !== undefined) {
            queryParameters['filter[other_total]'] = requestParameters.filterOtherTotal;
        }

        if (requestParameters.filterOtherMalesTotal !== undefined) {
            queryParameters['filter[other_males_total]'] = requestParameters.filterOtherMalesTotal;
        }

        if (requestParameters.filterOtherFemalesTotal !== undefined) {
            queryParameters['filter[other_females_total]'] = requestParameters.filterOtherFemalesTotal;
        }

        if (requestParameters.filterOtherYoungsTotal !== undefined) {
            queryParameters['filter[other_youngs_total]'] = requestParameters.filterOtherYoungsTotal;
        }

        if (requestParameters.filterOtherUnclassTotal !== undefined) {
            queryParameters['filter[other_unclass_total]'] = requestParameters.filterOtherUnclassTotal;
        }

        if (requestParameters.filterOtherZeroTotals !== undefined) {
            queryParameters['filter[other_zero_totals]'] = requestParameters.filterOtherZeroTotals;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/summaries/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * phpcs:disable
     * Export aerial survey summaries in a selected format (csv, json, parquet).
     */
    async exportAerialSurveySummaries(requestParameters: ExportAerialSurveySummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAerialSurveySummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index aerial survey summaries.
     */
    async indexAerialSurveySummariesRaw(requestParameters: IndexAerialSurveySummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAerialSurveySummariesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterAerialSurveyId !== undefined) {
            queryParameters['filter[aerial_survey_id]'] = requestParameters.filterAerialSurveyId;
        }

        if (requestParameters.filterBioYear !== undefined) {
            queryParameters['filter[bio_year]'] = requestParameters.filterBioYear;
        }

        if (requestParameters.filterDate !== undefined) {
            queryParameters['filter[date]'] = requestParameters.filterDate;
        }

        if (requestParameters.filterSurveyTypeId !== undefined) {
            queryParameters['filter[survey_type_id]'] = requestParameters.filterSurveyTypeId;
        }

        if (requestParameters.filterSurveyType !== undefined) {
            queryParameters['filter[survey_type]'] = requestParameters.filterSurveyType;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterSpecies !== undefined) {
            queryParameters['filter[species]'] = requestParameters.filterSpecies;
        }

        if (requestParameters.filterSpeciesIds !== undefined) {
            queryParameters['filter[species_ids]'] = requestParameters.filterSpeciesIds;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterAnalysisUnit !== undefined) {
            queryParameters['filter[analysis_unit]'] = requestParameters.filterAnalysisUnit;
        }

        if (requestParameters.filterManagementUnit !== undefined) {
            queryParameters['filter[management_unit]'] = requestParameters.filterManagementUnit;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterAircraftId !== undefined) {
            queryParameters['filter[aircraft_id]'] = requestParameters.filterAircraftId;
        }

        if (requestParameters.filterAircraft !== undefined) {
            queryParameters['filter[aircraft]'] = requestParameters.filterAircraft;
        }

        if (requestParameters.filterSampledSubunits !== undefined) {
            queryParameters['filter[sampled_subunits]'] = requestParameters.filterSampledSubunits;
        }

        if (requestParameters.filterObservations !== undefined) {
            queryParameters['filter[observations]'] = requestParameters.filterObservations;
        }

        if (requestParameters.filterMaxTotal !== undefined) {
            queryParameters['filter[max_total]'] = requestParameters.filterMaxTotal;
        }

        if (requestParameters.filterMinTotal !== undefined) {
            queryParameters['filter[min_total]'] = requestParameters.filterMinTotal;
        }

        if (requestParameters.filterAvgTotal !== undefined) {
            queryParameters['filter[avg_total]'] = requestParameters.filterAvgTotal;
        }

        if (requestParameters.filterTotal !== undefined) {
            queryParameters['filter[total]'] = requestParameters.filterTotal;
        }

        if (requestParameters.filterMalesTotal !== undefined) {
            queryParameters['filter[males_total]'] = requestParameters.filterMalesTotal;
        }

        if (requestParameters.filterFemalesTotal !== undefined) {
            queryParameters['filter[females_total]'] = requestParameters.filterFemalesTotal;
        }

        if (requestParameters.filterYoungsTotal !== undefined) {
            queryParameters['filter[youngs_total]'] = requestParameters.filterYoungsTotal;
        }

        if (requestParameters.filterUnclassTotal !== undefined) {
            queryParameters['filter[unclass_total]'] = requestParameters.filterUnclassTotal;
        }

        if (requestParameters.filterZeroTotals !== undefined) {
            queryParameters['filter[zero_totals]'] = requestParameters.filterZeroTotals;
        }

        if (requestParameters.filterOtherSampledSubunits !== undefined) {
            queryParameters['filter[other_sampled_subunits]'] = requestParameters.filterOtherSampledSubunits;
        }

        if (requestParameters.filterOtherObservations !== undefined) {
            queryParameters['filter[other_observations]'] = requestParameters.filterOtherObservations;
        }

        if (requestParameters.filterOtherMaxTotal !== undefined) {
            queryParameters['filter[other_max_total]'] = requestParameters.filterOtherMaxTotal;
        }

        if (requestParameters.filterOtherMinTotal !== undefined) {
            queryParameters['filter[other_min_total]'] = requestParameters.filterOtherMinTotal;
        }

        if (requestParameters.filterOtherAvgTotal !== undefined) {
            queryParameters['filter[other_avg_total]'] = requestParameters.filterOtherAvgTotal;
        }

        if (requestParameters.filterOtherTotal !== undefined) {
            queryParameters['filter[other_total]'] = requestParameters.filterOtherTotal;
        }

        if (requestParameters.filterOtherMalesTotal !== undefined) {
            queryParameters['filter[other_males_total]'] = requestParameters.filterOtherMalesTotal;
        }

        if (requestParameters.filterOtherFemalesTotal !== undefined) {
            queryParameters['filter[other_females_total]'] = requestParameters.filterOtherFemalesTotal;
        }

        if (requestParameters.filterOtherYoungsTotal !== undefined) {
            queryParameters['filter[other_youngs_total]'] = requestParameters.filterOtherYoungsTotal;
        }

        if (requestParameters.filterOtherUnclassTotal !== undefined) {
            queryParameters['filter[other_unclass_total]'] = requestParameters.filterOtherUnclassTotal;
        }

        if (requestParameters.filterOtherZeroTotals !== undefined) {
            queryParameters['filter[other_zero_totals]'] = requestParameters.filterOtherZeroTotals;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/summaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAerialSurveySummariesResponseFromJSON(jsonValue));
    }

    /**
     * Index aerial survey summaries.
     */
    async indexAerialSurveySummaries(requestParameters: IndexAerialSurveySummariesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAerialSurveySummariesResponse> {
        const response = await this.indexAerialSurveySummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAerialSurveySummariesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAerialSurveySummariesFormatEnum = typeof ExportAerialSurveySummariesFormatEnum[keyof typeof ExportAerialSurveySummariesFormatEnum];
