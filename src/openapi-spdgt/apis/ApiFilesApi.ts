/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexFilesResponse,
  ShowFileResponse,
  StoreFileResponse,
  UpdateFileRequest,
  UpdateFileResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexFilesResponseFromJSON,
    IndexFilesResponseToJSON,
    ShowFileResponseFromJSON,
    ShowFileResponseToJSON,
    StoreFileResponseFromJSON,
    StoreFileResponseToJSON,
    UpdateFileRequestFromJSON,
    UpdateFileRequestToJSON,
    UpdateFileResponseFromJSON,
    UpdateFileResponseToJSON,
} from '../models';

export interface DestroyFileRequest {
    id: number;
}

export interface ExportFilesRequest {
    format: ExportFilesFormatEnum;
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterModelId?: string;
    filterRecipeId?: string;
    filterMetadata?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexFilesRequest {
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterContextId?: string;
    filterContextType?: string;
    filterName?: string;
    filterMetadata?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowFileRequest {
    id: number;
    appends?: string;
    includes?: string;
}

export interface StoreFileRequest {
    file?: Blob;
    projectId?: number | null;
    contextId?: number | null;
    contextType?: string | null;
    name?: string;
}

export interface UpdateFileOperationRequest {
    id: number;
    updateFileRequest: UpdateFileRequest;
}

/**
 * 
 */
export class ApiFilesApi extends runtime.BaseAPI {

    /**
     * Delete file.
     */
    async destroyFileRaw(requestParameters: DestroyFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete file.
     */
    async destroyFile(requestParameters: DestroyFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export files in a selected format (csv, json, parquet).
     */
    async exportFilesRaw(requestParameters: ExportFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportFiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterModelId !== undefined) {
            queryParameters['filter[model_id]'] = requestParameters.filterModelId;
        }

        if (requestParameters.filterRecipeId !== undefined) {
            queryParameters['filter[recipe_id]'] = requestParameters.filterRecipeId;
        }

        if (requestParameters.filterMetadata !== undefined) {
            queryParameters['filter[metadata]'] = requestParameters.filterMetadata;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export files in a selected format (csv, json, parquet).
     */
    async exportFiles(requestParameters: ExportFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index files.
     */
    async indexFilesRaw(requestParameters: IndexFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexFilesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterContextId !== undefined) {
            queryParameters['filter[context_id]'] = requestParameters.filterContextId;
        }

        if (requestParameters.filterContextType !== undefined) {
            queryParameters['filter[context_type]'] = requestParameters.filterContextType;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterMetadata !== undefined) {
            queryParameters['filter[metadata]'] = requestParameters.filterMetadata;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexFilesResponseFromJSON(jsonValue));
    }

    /**
     * Index files.
     */
    async indexFiles(requestParameters: IndexFilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexFilesResponse> {
        const response = await this.indexFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show file by id.
     */
    async showFileRaw(requestParameters: ShowFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowFileResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowFileResponseFromJSON(jsonValue));
    }

    /**
     * Show file by id.
     */
    async showFile(requestParameters: ShowFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowFileResponse> {
        const response = await this.showFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store file.
     */
    async storeFileRaw(requestParameters: StoreFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreFileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.projectId !== undefined) {
            formParams.append('project_id', requestParameters.projectId as any);
        }

        if (requestParameters.contextId !== undefined) {
            formParams.append('context_id', requestParameters.contextId as any);
        }

        if (requestParameters.contextType !== undefined) {
            formParams.append('context_type', requestParameters.contextType as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/api/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreFileResponseFromJSON(jsonValue));
    }

    /**
     * Store file.
     */
    async storeFile(requestParameters: StoreFileRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreFileResponse> {
        const response = await this.storeFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update file.
     */
    async updateFileRaw(requestParameters: UpdateFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateFileResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFile.');
        }

        if (requestParameters.updateFileRequest === null || requestParameters.updateFileRequest === undefined) {
            throw new runtime.RequiredError('updateFileRequest','Required parameter requestParameters.updateFileRequest was null or undefined when calling updateFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFileRequestToJSON(requestParameters.updateFileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateFileResponseFromJSON(jsonValue));
    }

    /**
     * Update file.
     */
    async updateFile(requestParameters: UpdateFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateFileResponse> {
        const response = await this.updateFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportFilesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportFilesFormatEnum = typeof ExportFilesFormatEnum[keyof typeof ExportFilesFormatEnum];
