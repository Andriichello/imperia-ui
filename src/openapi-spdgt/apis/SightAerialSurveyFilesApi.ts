/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexAerialSurveyFilesResponse,
  ShowAerialSurveyFileResponse,
  StoreAerialSurveyFileResponse,
  UpdateAerialSurveyFileRequest,
  UpdateAerialSurveyFileResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexAerialSurveyFilesResponseFromJSON,
    IndexAerialSurveyFilesResponseToJSON,
    ShowAerialSurveyFileResponseFromJSON,
    ShowAerialSurveyFileResponseToJSON,
    StoreAerialSurveyFileResponseFromJSON,
    StoreAerialSurveyFileResponseToJSON,
    UpdateAerialSurveyFileRequestFromJSON,
    UpdateAerialSurveyFileRequestToJSON,
    UpdateAerialSurveyFileResponseFromJSON,
    UpdateAerialSurveyFileResponseToJSON,
} from '../models';

export interface DestroyAerialSurveyFileRequest {
    id: number;
}

export interface ExportAerialSurveyFilesRequest {
    format: ExportAerialSurveyFilesFormatEnum;
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterContextId?: string;
    filterContextType?: string;
    filterName?: string;
    filterPath?: string;
    filterDisk?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexAerialSurveyFilesRequest {
    appends?: string;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterContextId?: string;
    filterContextType?: string;
    filterName?: string;
    filterPath?: string;
    filterDisk?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowAerialSurveyFileRequest {
    id: number;
    appends?: string;
    includes?: string;
}

export interface StoreAerialSurveyFileRequest {
    file?: Blob;
    projectId?: number | null;
    aerialSurveyId?: number;
    name?: string;
}

export interface UpdateAerialSurveyFileOperationRequest {
    id: number;
    updateAerialSurveyFileRequest?: UpdateAerialSurveyFileRequest;
}

/**
 * 
 */
export class SightAerialSurveyFilesApi extends runtime.BaseAPI {

    /**
     * Delete aerial survey files.
     */
    async destroyAerialSurveyFileRaw(requestParameters: DestroyAerialSurveyFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyAerialSurveyFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete aerial survey files.
     */
    async destroyAerialSurveyFile(requestParameters: DestroyAerialSurveyFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyAerialSurveyFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export aerial survey files in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyFilesRaw(requestParameters: ExportAerialSurveyFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportAerialSurveyFiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterContextId !== undefined) {
            queryParameters['filter[context_id]'] = requestParameters.filterContextId;
        }

        if (requestParameters.filterContextType !== undefined) {
            queryParameters['filter[context_type]'] = requestParameters.filterContextType;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterPath !== undefined) {
            queryParameters['filter[path]'] = requestParameters.filterPath;
        }

        if (requestParameters.filterDisk !== undefined) {
            queryParameters['filter[disk]'] = requestParameters.filterDisk;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/files/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export aerial survey files in a selected format (csv, json, parquet).
     */
    async exportAerialSurveyFiles(requestParameters: ExportAerialSurveyFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportAerialSurveyFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index aerial survey files.
     */
    async indexAerialSurveyFilesRaw(requestParameters: IndexAerialSurveyFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexAerialSurveyFilesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterContextId !== undefined) {
            queryParameters['filter[context_id]'] = requestParameters.filterContextId;
        }

        if (requestParameters.filterContextType !== undefined) {
            queryParameters['filter[context_type]'] = requestParameters.filterContextType;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterPath !== undefined) {
            queryParameters['filter[path]'] = requestParameters.filterPath;
        }

        if (requestParameters.filterDisk !== undefined) {
            queryParameters['filter[disk]'] = requestParameters.filterDisk;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexAerialSurveyFilesResponseFromJSON(jsonValue));
    }

    /**
     * Index aerial survey files.
     */
    async indexAerialSurveyFiles(requestParameters: IndexAerialSurveyFilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexAerialSurveyFilesResponse> {
        const response = await this.indexAerialSurveyFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show aerial survey file by id.
     */
    async showAerialSurveyFileRaw(requestParameters: ShowAerialSurveyFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowAerialSurveyFileResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showAerialSurveyFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.appends !== undefined) {
            queryParameters['appends'] = requestParameters.appends;
        }

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowAerialSurveyFileResponseFromJSON(jsonValue));
    }

    /**
     * Show aerial survey file by id.
     */
    async showAerialSurveyFile(requestParameters: ShowAerialSurveyFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowAerialSurveyFileResponse> {
        const response = await this.showAerialSurveyFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store aerial survey file.
     */
    async storeAerialSurveyFileRaw(requestParameters: StoreAerialSurveyFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreAerialSurveyFileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.projectId !== undefined) {
            formParams.append('project_id', requestParameters.projectId as any);
        }

        if (requestParameters.aerialSurveyId !== undefined) {
            formParams.append('aerial_survey_id', requestParameters.aerialSurveyId as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        const response = await this.request({
            path: `/api/aerial-surveys/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreAerialSurveyFileResponseFromJSON(jsonValue));
    }

    /**
     * Store aerial survey file.
     */
    async storeAerialSurveyFile(requestParameters: StoreAerialSurveyFileRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreAerialSurveyFileResponse> {
        const response = await this.storeAerialSurveyFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update aerial survey file.
     */
    async updateAerialSurveyFileRaw(requestParameters: UpdateAerialSurveyFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAerialSurveyFileResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAerialSurveyFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/aerial-surveys/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAerialSurveyFileRequestToJSON(requestParameters.updateAerialSurveyFileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAerialSurveyFileResponseFromJSON(jsonValue));
    }

    /**
     * Update aerial survey file.
     */
    async updateAerialSurveyFile(requestParameters: UpdateAerialSurveyFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAerialSurveyFileResponse> {
        const response = await this.updateAerialSurveyFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportAerialSurveyFilesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportAerialSurveyFilesFormatEnum = typeof ExportAerialSurveyFilesFormatEnum[keyof typeof ExportAerialSurveyFilesFormatEnum];
