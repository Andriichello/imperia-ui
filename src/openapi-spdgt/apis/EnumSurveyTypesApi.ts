/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexSurveyTypesResponse,
  ShowSurveyTypeResponse,
  StoreMultipleSurveyTypes200Response,
  StoreMultipleSurveyTypesRequest,
  StoreSurveyTypeRequest,
  StoreSurveyTypeResponse,
  UpdateMultipleSurveyTypes200Response,
  UpdateMultipleSurveyTypesRequest,
  UpdateSurveyTypeRequest,
  UpdateSurveyTypeResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexSurveyTypesResponseFromJSON,
    IndexSurveyTypesResponseToJSON,
    ShowSurveyTypeResponseFromJSON,
    ShowSurveyTypeResponseToJSON,
    StoreMultipleSurveyTypes200ResponseFromJSON,
    StoreMultipleSurveyTypes200ResponseToJSON,
    StoreMultipleSurveyTypesRequestFromJSON,
    StoreMultipleSurveyTypesRequestToJSON,
    StoreSurveyTypeRequestFromJSON,
    StoreSurveyTypeRequestToJSON,
    StoreSurveyTypeResponseFromJSON,
    StoreSurveyTypeResponseToJSON,
    UpdateMultipleSurveyTypes200ResponseFromJSON,
    UpdateMultipleSurveyTypes200ResponseToJSON,
    UpdateMultipleSurveyTypesRequestFromJSON,
    UpdateMultipleSurveyTypesRequestToJSON,
    UpdateSurveyTypeRequestFromJSON,
    UpdateSurveyTypeRequestToJSON,
    UpdateSurveyTypeResponseFromJSON,
    UpdateSurveyTypeResponseToJSON,
} from '../models';

export interface DestroySurveyTypeRequest {
    id: number;
}

export interface ExportSurveyTypesRequest {
    format: ExportSurveyTypesFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterName?: string;
    filterLatinName?: string;
    filterInnerName?: string;
}

export interface IndexSurveyTypesRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterProjectId?: string;
    filterSpeciesId?: string;
    filterName?: string;
    filterCutoffDay?: string;
    filterCutoffMonth?: string;
}

export interface ShowSurveyTypeRequest {
    id: number;
    includes?: string;
}

export interface StoreMultipleSurveyTypesOperationRequest {
    storeMultipleSurveyTypesRequest: StoreMultipleSurveyTypesRequest;
}

export interface StoreSurveyTypeOperationRequest {
    storeSurveyTypeRequest: StoreSurveyTypeRequest;
}

export interface UpdateMultipleSurveyTypesOperationRequest {
    updateMultipleSurveyTypesRequest: UpdateMultipleSurveyTypesRequest;
}

export interface UpdateSurveyTypeOperationRequest {
    id: number;
    updateSurveyTypeRequest: UpdateSurveyTypeRequest;
}

/**
 * 
 */
export class EnumSurveyTypesApi extends runtime.BaseAPI {

    /**
     * Delete survey type.
     */
    async destroySurveyTypeRaw(requestParameters: DestroySurveyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroySurveyType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/surveys/types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete survey type.
     */
    async destroySurveyType(requestParameters: DestroySurveyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroySurveyTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export survey types in a selected format (csv, json, parquet).
     */
    async exportSurveyTypesRaw(requestParameters: ExportSurveyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportSurveyTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterLatinName !== undefined) {
            queryParameters['filter[latin_name]'] = requestParameters.filterLatinName;
        }

        if (requestParameters.filterInnerName !== undefined) {
            queryParameters['filter[inner_name]'] = requestParameters.filterInnerName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/surveys/types/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export survey types in a selected format (csv, json, parquet).
     */
    async exportSurveyTypes(requestParameters: ExportSurveyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportSurveyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index survey types.
     */
    async indexSurveyTypesRaw(requestParameters: IndexSurveyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexSurveyTypesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterProjectId !== undefined) {
            queryParameters['filter[project_id]'] = requestParameters.filterProjectId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterName !== undefined) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterCutoffDay !== undefined) {
            queryParameters['filter[cutoff_day]'] = requestParameters.filterCutoffDay;
        }

        if (requestParameters.filterCutoffMonth !== undefined) {
            queryParameters['filter[cutoff_month]'] = requestParameters.filterCutoffMonth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/surveys/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexSurveyTypesResponseFromJSON(jsonValue));
    }

    /**
     * Index survey types.
     */
    async indexSurveyTypes(requestParameters: IndexSurveyTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexSurveyTypesResponse> {
        const response = await this.indexSurveyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show survey type by id.
     */
    async showSurveyTypeRaw(requestParameters: ShowSurveyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowSurveyTypeResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showSurveyType.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/surveys/types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowSurveyTypeResponseFromJSON(jsonValue));
    }

    /**
     * Show survey type by id.
     */
    async showSurveyType(requestParameters: ShowSurveyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowSurveyTypeResponse> {
        const response = await this.showSurveyTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple species.
     */
    async storeMultipleSurveyTypesRaw(requestParameters: StoreMultipleSurveyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleSurveyTypes200Response>> {
        if (requestParameters.storeMultipleSurveyTypesRequest === null || requestParameters.storeMultipleSurveyTypesRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleSurveyTypesRequest','Required parameter requestParameters.storeMultipleSurveyTypesRequest was null or undefined when calling storeMultipleSurveyTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/surveys/types/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleSurveyTypesRequestToJSON(requestParameters.storeMultipleSurveyTypesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleSurveyTypes200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple species.
     */
    async storeMultipleSurveyTypes(requestParameters: StoreMultipleSurveyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleSurveyTypes200Response> {
        const response = await this.storeMultipleSurveyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store survey type.
     */
    async storeSurveyTypeRaw(requestParameters: StoreSurveyTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreSurveyTypeResponse>> {
        if (requestParameters.storeSurveyTypeRequest === null || requestParameters.storeSurveyTypeRequest === undefined) {
            throw new runtime.RequiredError('storeSurveyTypeRequest','Required parameter requestParameters.storeSurveyTypeRequest was null or undefined when calling storeSurveyType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/surveys/types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreSurveyTypeRequestToJSON(requestParameters.storeSurveyTypeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreSurveyTypeResponseFromJSON(jsonValue));
    }

    /**
     * Store survey type.
     */
    async storeSurveyType(requestParameters: StoreSurveyTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreSurveyTypeResponse> {
        const response = await this.storeSurveyTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple species.
     */
    async updateMultipleSurveyTypesRaw(requestParameters: UpdateMultipleSurveyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultipleSurveyTypes200Response>> {
        if (requestParameters.updateMultipleSurveyTypesRequest === null || requestParameters.updateMultipleSurveyTypesRequest === undefined) {
            throw new runtime.RequiredError('updateMultipleSurveyTypesRequest','Required parameter requestParameters.updateMultipleSurveyTypesRequest was null or undefined when calling updateMultipleSurveyTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/surveys/types/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleSurveyTypesRequestToJSON(requestParameters.updateMultipleSurveyTypesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultipleSurveyTypes200ResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple species.
     */
    async updateMultipleSurveyTypes(requestParameters: UpdateMultipleSurveyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultipleSurveyTypes200Response> {
        const response = await this.updateMultipleSurveyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update survey type.
     */
    async updateSurveyTypeRaw(requestParameters: UpdateSurveyTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSurveyTypeResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSurveyType.');
        }

        if (requestParameters.updateSurveyTypeRequest === null || requestParameters.updateSurveyTypeRequest === undefined) {
            throw new runtime.RequiredError('updateSurveyTypeRequest','Required parameter requestParameters.updateSurveyTypeRequest was null or undefined when calling updateSurveyType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/surveys/types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSurveyTypeRequestToJSON(requestParameters.updateSurveyTypeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSurveyTypeResponseFromJSON(jsonValue));
    }

    /**
     * Update survey type.
     */
    async updateSurveyType(requestParameters: UpdateSurveyTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSurveyTypeResponse> {
        const response = await this.updateSurveyTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportSurveyTypesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportSurveyTypesFormatEnum = typeof ExportSurveyTypesFormatEnum[keyof typeof ExportSurveyTypesFormatEnum];
