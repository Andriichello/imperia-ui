/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestroyResponse,
  ExportIndexResponse,
  IndexPriorEntriesResponse,
  ShowPriorEntryResponse,
  StoreMultiplePriorEntries200Response,
  StoreMultiplePriorEntriesRequest,
  StorePriorEntryRequest,
  StorePriorEntryResponse,
  UpdateMultiplePriorEntries200Response,
  UpdateMultiplePriorEntriesRequest,
  UpdatePriorEntryRequest,
  UpdatePriorEntryResponse,
} from '../models';
import {
    DestroyResponseFromJSON,
    DestroyResponseToJSON,
    ExportIndexResponseFromJSON,
    ExportIndexResponseToJSON,
    IndexPriorEntriesResponseFromJSON,
    IndexPriorEntriesResponseToJSON,
    ShowPriorEntryResponseFromJSON,
    ShowPriorEntryResponseToJSON,
    StoreMultiplePriorEntries200ResponseFromJSON,
    StoreMultiplePriorEntries200ResponseToJSON,
    StoreMultiplePriorEntriesRequestFromJSON,
    StoreMultiplePriorEntriesRequestToJSON,
    StorePriorEntryRequestFromJSON,
    StorePriorEntryRequestToJSON,
    StorePriorEntryResponseFromJSON,
    StorePriorEntryResponseToJSON,
    UpdateMultiplePriorEntries200ResponseFromJSON,
    UpdateMultiplePriorEntries200ResponseToJSON,
    UpdateMultiplePriorEntriesRequestFromJSON,
    UpdateMultiplePriorEntriesRequestToJSON,
    UpdatePriorEntryRequestFromJSON,
    UpdatePriorEntryRequestToJSON,
    UpdatePriorEntryResponseFromJSON,
    UpdatePriorEntryResponseToJSON,
} from '../models';

export interface DestroyOutputPriorEntryRequest {
    id: number;
}

export interface ExportOutputPriorEntriesRequest {
    format: ExportOutputPriorEntriesFormatEnum;
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterOutputId?: string;
    filterSpeciesId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterState?: string;
    filterAge?: string;
    filterSex?: string;
    filterParameterId?: string;
    filterMean?: string;
    filterLinkMean?: string;
    filterSe?: string;
    filterLinkSe?: string;
    filterSource?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface IndexOutputPriorEntriesRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
    filterId?: string;
    filterOutputId?: string;
    filterSpeciesId?: string;
    filterAnalysisUnitId?: string;
    filterManagementUnitId?: string;
    filterState?: string;
    filterAge?: string;
    filterSex?: string;
    filterParameterId?: string;
    filterMean?: string;
    filterLinkMean?: string;
    filterSe?: string;
    filterLinkSe?: string;
    filterSource?: string;
    filterCreatedAt?: string;
    filterUpdatedAt?: string;
}

export interface ShowOutputPriorEntryRequest {
    id: number;
    includes?: string;
}

export interface StoreMultiplePriorEntriesOperationRequest {
    storeMultiplePriorEntriesRequest: StoreMultiplePriorEntriesRequest;
}

export interface StoreOutputPriorEntryRequest {
    storePriorEntryRequest: StorePriorEntryRequest;
}

export interface UpdateMultiplePriorEntriesOperationRequest {
    updateMultiplePriorEntriesRequest: UpdateMultiplePriorEntriesRequest;
}

export interface UpdateOutputPriorEntryRequest {
    id: number;
    updatePriorEntryRequest: UpdatePriorEntryRequest;
}

/**
 * 
 */
export class OutputPriorEntriesApi extends runtime.BaseAPI {

    /**
     * Delete model output prior entry.
     */
    async destroyOutputPriorEntryRaw(requestParameters: DestroyOutputPriorEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestroyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyOutputPriorEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/prior-entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestroyResponseFromJSON(jsonValue));
    }

    /**
     * Delete model output prior entry.
     */
    async destroyOutputPriorEntry(requestParameters: DestroyOutputPriorEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestroyResponse> {
        const response = await this.destroyOutputPriorEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export model output prior entries in a selected format (csv, json, parquet).
     */
    async exportOutputPriorEntriesRaw(requestParameters: ExportOutputPriorEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportIndexResponse>> {
        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling exportOutputPriorEntries.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterOutputId !== undefined) {
            queryParameters['filter[output_id]'] = requestParameters.filterOutputId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterState !== undefined) {
            queryParameters['filter[state]'] = requestParameters.filterState;
        }

        if (requestParameters.filterAge !== undefined) {
            queryParameters['filter[age]'] = requestParameters.filterAge;
        }

        if (requestParameters.filterSex !== undefined) {
            queryParameters['filter[sex]'] = requestParameters.filterSex;
        }

        if (requestParameters.filterParameterId !== undefined) {
            queryParameters['filter[parameter_id]'] = requestParameters.filterParameterId;
        }

        if (requestParameters.filterMean !== undefined) {
            queryParameters['filter[mean]'] = requestParameters.filterMean;
        }

        if (requestParameters.filterLinkMean !== undefined) {
            queryParameters['filter[link_mean]'] = requestParameters.filterLinkMean;
        }

        if (requestParameters.filterSe !== undefined) {
            queryParameters['filter[se]'] = requestParameters.filterSe;
        }

        if (requestParameters.filterLinkSe !== undefined) {
            queryParameters['filter[link_se]'] = requestParameters.filterLinkSe;
        }

        if (requestParameters.filterSource !== undefined) {
            queryParameters['filter[source]'] = requestParameters.filterSource;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/prior-entries/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportIndexResponseFromJSON(jsonValue));
    }

    /**
     * Export model output prior entries in a selected format (csv, json, parquet).
     */
    async exportOutputPriorEntries(requestParameters: ExportOutputPriorEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportIndexResponse> {
        const response = await this.exportOutputPriorEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index model ouput prior entries.
     */
    async indexOutputPriorEntriesRaw(requestParameters: IndexOutputPriorEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexPriorEntriesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter[id]'] = requestParameters.filterId;
        }

        if (requestParameters.filterOutputId !== undefined) {
            queryParameters['filter[output_id]'] = requestParameters.filterOutputId;
        }

        if (requestParameters.filterSpeciesId !== undefined) {
            queryParameters['filter[species_id]'] = requestParameters.filterSpeciesId;
        }

        if (requestParameters.filterAnalysisUnitId !== undefined) {
            queryParameters['filter[analysis_unit_id]'] = requestParameters.filterAnalysisUnitId;
        }

        if (requestParameters.filterManagementUnitId !== undefined) {
            queryParameters['filter[management_unit_id]'] = requestParameters.filterManagementUnitId;
        }

        if (requestParameters.filterState !== undefined) {
            queryParameters['filter[state]'] = requestParameters.filterState;
        }

        if (requestParameters.filterAge !== undefined) {
            queryParameters['filter[age]'] = requestParameters.filterAge;
        }

        if (requestParameters.filterSex !== undefined) {
            queryParameters['filter[sex]'] = requestParameters.filterSex;
        }

        if (requestParameters.filterParameterId !== undefined) {
            queryParameters['filter[parameter_id]'] = requestParameters.filterParameterId;
        }

        if (requestParameters.filterMean !== undefined) {
            queryParameters['filter[mean]'] = requestParameters.filterMean;
        }

        if (requestParameters.filterLinkMean !== undefined) {
            queryParameters['filter[link_mean]'] = requestParameters.filterLinkMean;
        }

        if (requestParameters.filterSe !== undefined) {
            queryParameters['filter[se]'] = requestParameters.filterSe;
        }

        if (requestParameters.filterLinkSe !== undefined) {
            queryParameters['filter[link_se]'] = requestParameters.filterLinkSe;
        }

        if (requestParameters.filterSource !== undefined) {
            queryParameters['filter[source]'] = requestParameters.filterSource;
        }

        if (requestParameters.filterCreatedAt !== undefined) {
            queryParameters['filter[created_at]'] = requestParameters.filterCreatedAt;
        }

        if (requestParameters.filterUpdatedAt !== undefined) {
            queryParameters['filter[updated_at]'] = requestParameters.filterUpdatedAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/prior-entries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexPriorEntriesResponseFromJSON(jsonValue));
    }

    /**
     * Index model ouput prior entries.
     */
    async indexOutputPriorEntries(requestParameters: IndexOutputPriorEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexPriorEntriesResponse> {
        const response = await this.indexOutputPriorEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show model output prior entry by id.
     */
    async showOutputPriorEntryRaw(requestParameters: ShowOutputPriorEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowPriorEntryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showOutputPriorEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/prior-entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowPriorEntryResponseFromJSON(jsonValue));
    }

    /**
     * Show model output prior entry by id.
     */
    async showOutputPriorEntry(requestParameters: ShowOutputPriorEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowPriorEntryResponse> {
        const response = await this.showOutputPriorEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store prior entries.
     */
    async storeMultiplePriorEntriesRaw(requestParameters: StoreMultiplePriorEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultiplePriorEntries200Response>> {
        if (requestParameters.storeMultiplePriorEntriesRequest === null || requestParameters.storeMultiplePriorEntriesRequest === undefined) {
            throw new runtime.RequiredError('storeMultiplePriorEntriesRequest','Required parameter requestParameters.storeMultiplePriorEntriesRequest was null or undefined when calling storeMultiplePriorEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/prior-entries/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultiplePriorEntriesRequestToJSON(requestParameters.storeMultiplePriorEntriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultiplePriorEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Store prior entries.
     */
    async storeMultiplePriorEntries(requestParameters: StoreMultiplePriorEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultiplePriorEntries200Response> {
        const response = await this.storeMultiplePriorEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store model output prior entry.
     */
    async storeOutputPriorEntryRaw(requestParameters: StoreOutputPriorEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorePriorEntryResponse>> {
        if (requestParameters.storePriorEntryRequest === null || requestParameters.storePriorEntryRequest === undefined) {
            throw new runtime.RequiredError('storePriorEntryRequest','Required parameter requestParameters.storePriorEntryRequest was null or undefined when calling storeOutputPriorEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/prior-entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StorePriorEntryRequestToJSON(requestParameters.storePriorEntryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorePriorEntryResponseFromJSON(jsonValue));
    }

    /**
     * Store model output prior entry.
     */
    async storeOutputPriorEntry(requestParameters: StoreOutputPriorEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorePriorEntryResponse> {
        const response = await this.storeOutputPriorEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update prior entries.
     */
    async updateMultiplePriorEntriesRaw(requestParameters: UpdateMultiplePriorEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMultiplePriorEntries200Response>> {
        if (requestParameters.updateMultiplePriorEntriesRequest === null || requestParameters.updateMultiplePriorEntriesRequest === undefined) {
            throw new runtime.RequiredError('updateMultiplePriorEntriesRequest','Required parameter requestParameters.updateMultiplePriorEntriesRequest was null or undefined when calling updateMultiplePriorEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/prior-entries/multiple`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultiplePriorEntriesRequestToJSON(requestParameters.updateMultiplePriorEntriesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMultiplePriorEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Update prior entries.
     */
    async updateMultiplePriorEntries(requestParameters: UpdateMultiplePriorEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMultiplePriorEntries200Response> {
        const response = await this.updateMultiplePriorEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update model output prior entry.
     */
    async updateOutputPriorEntryRaw(requestParameters: UpdateOutputPriorEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePriorEntryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOutputPriorEntry.');
        }

        if (requestParameters.updatePriorEntryRequest === null || requestParameters.updatePriorEntryRequest === undefined) {
            throw new runtime.RequiredError('updatePriorEntryRequest','Required parameter requestParameters.updatePriorEntryRequest was null or undefined when calling updateOutputPriorEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/models/outputs/prior-entries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePriorEntryRequestToJSON(requestParameters.updatePriorEntryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePriorEntryResponseFromJSON(jsonValue));
    }

    /**
     * Update model output prior entry.
     */
    async updateOutputPriorEntry(requestParameters: UpdateOutputPriorEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePriorEntryResponse> {
        const response = await this.updateOutputPriorEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportOutputPriorEntriesFormatEnum = {
    Json: 'json',
    Csv: 'csv',
    Parquet: 'parquet'
} as const;
export type ExportOutputPriorEntriesFormatEnum = typeof ExportOutputPriorEntriesFormatEnum[keyof typeof ExportOutputPriorEntriesFormatEnum];
