/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MicrosoftPollTokenResponse,
  MicrosoftRefreshTokenRequest,
  MicrosoftRefreshTokenResponse,
  MicrosoftSignInUrlResponse,
} from '../models';
import {
    MicrosoftPollTokenResponseFromJSON,
    MicrosoftPollTokenResponseToJSON,
    MicrosoftRefreshTokenRequestFromJSON,
    MicrosoftRefreshTokenRequestToJSON,
    MicrosoftRefreshTokenResponseFromJSON,
    MicrosoftRefreshTokenResponseToJSON,
    MicrosoftSignInUrlResponseFromJSON,
    MicrosoftSignInUrlResponseToJSON,
} from '../models';

export interface MicrosoftGetSignInUrlRequest {
    abbreviation: string;
    redirect?: string;
    clientId?: string;
}

export interface MicrosoftPollAccessTokenRequest {
    state: string;
}

export interface MicrosoftRefreshAccessTokenRequest {
    microsoftRefreshTokenRequest: MicrosoftRefreshTokenRequest;
}

/**
 * 
 */
export class AuthMicrosoftApi extends runtime.BaseAPI {

    /**
     * Get Microsoft sign in URL.
     */
    async microsoftGetSignInUrlRaw(requestParameters: MicrosoftGetSignInUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MicrosoftSignInUrlResponse>> {
        if (requestParameters.abbreviation === null || requestParameters.abbreviation === undefined) {
            throw new runtime.RequiredError('abbreviation','Required parameter requestParameters.abbreviation was null or undefined when calling microsoftGetSignInUrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.abbreviation !== undefined) {
            queryParameters['abbreviation'] = requestParameters.abbreviation;
        }

        if (requestParameters.redirect !== undefined) {
            queryParameters['redirect'] = requestParameters.redirect;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/microsoft/url`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MicrosoftSignInUrlResponseFromJSON(jsonValue));
    }

    /**
     * Get Microsoft sign in URL.
     */
    async microsoftGetSignInUrl(requestParameters: MicrosoftGetSignInUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MicrosoftSignInUrlResponse> {
        const response = await this.microsoftGetSignInUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Poll Microsoft access token using state string.
     */
    async microsoftPollAccessTokenRaw(requestParameters: MicrosoftPollAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MicrosoftPollTokenResponse>> {
        if (requestParameters.state === null || requestParameters.state === undefined) {
            throw new runtime.RequiredError('state','Required parameter requestParameters.state was null or undefined when calling microsoftPollAccessToken.');
        }

        const queryParameters: any = {};

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/microsoft/poll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MicrosoftPollTokenResponseFromJSON(jsonValue));
    }

    /**
     * Poll Microsoft access token using state string.
     */
    async microsoftPollAccessToken(requestParameters: MicrosoftPollAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MicrosoftPollTokenResponse> {
        const response = await this.microsoftPollAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh Microsoft access token.
     */
    async microsoftRefreshAccessTokenRaw(requestParameters: MicrosoftRefreshAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MicrosoftRefreshTokenResponse>> {
        if (requestParameters.microsoftRefreshTokenRequest === null || requestParameters.microsoftRefreshTokenRequest === undefined) {
            throw new runtime.RequiredError('microsoftRefreshTokenRequest','Required parameter requestParameters.microsoftRefreshTokenRequest was null or undefined when calling microsoftRefreshAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/microsoft/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MicrosoftRefreshTokenRequestToJSON(requestParameters.microsoftRefreshTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MicrosoftRefreshTokenResponseFromJSON(jsonValue));
    }

    /**
     * Refresh Microsoft access token.
     */
    async microsoftRefreshAccessToken(requestParameters: MicrosoftRefreshAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MicrosoftRefreshTokenResponse> {
        const response = await this.microsoftRefreshAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
