/* tslint:disable */
/* eslint-disable */
/**
 * count-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangePasswordRequest,
  ChangePasswordResponse,
  IndexUsersResponse,
  ShowUserResponse,
  StoreMultipleUsers200Response,
  StoreMultipleUsersRequest,
  StoreUserRequest,
  StoreUserResponse,
} from '../models';
import {
    ChangePasswordRequestFromJSON,
    ChangePasswordRequestToJSON,
    ChangePasswordResponseFromJSON,
    ChangePasswordResponseToJSON,
    IndexUsersResponseFromJSON,
    IndexUsersResponseToJSON,
    ShowUserResponseFromJSON,
    ShowUserResponseToJSON,
    StoreMultipleUsers200ResponseFromJSON,
    StoreMultipleUsers200ResponseToJSON,
    StoreMultipleUsersRequestFromJSON,
    StoreMultipleUsersRequestToJSON,
    StoreUserRequestFromJSON,
    StoreUserRequestToJSON,
    StoreUserResponseFromJSON,
    StoreUserResponseToJSON,
} from '../models';

export interface ChangeUserPasswordRequest {
    changePasswordRequest: ChangePasswordRequest;
}

export interface IndexUsersRequest {
    includes?: string;
    pageSize?: number;
    pageNumber?: number;
    pageOmit?: number;
    sort?: string;
}

export interface ShowUserRequest {
    id: number;
    includes?: string;
}

export interface StoreMultipleUsersOperationRequest {
    storeMultipleUsersRequest: StoreMultipleUsersRequest;
}

export interface StoreUserOperationRequest {
    storeUserRequest: StoreUserRequest;
}

/**
 * 
 */
export class ApiUsersApi extends runtime.BaseAPI {

    /**
     * Change user password.
     */
    async changeUserPasswordRaw(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangePasswordResponse>> {
        if (requestParameters.changePasswordRequest === null || requestParameters.changePasswordRequest === undefined) {
            throw new runtime.RequiredError('changePasswordRequest','Required parameter requestParameters.changePasswordRequest was null or undefined when calling changeUserPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordRequestToJSON(requestParameters.changePasswordRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangePasswordResponseFromJSON(jsonValue));
    }

    /**
     * Change user password.
     */
    async changeUserPassword(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangePasswordResponse> {
        const response = await this.changeUserPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index users.
     */
    async indexUsersRaw(requestParameters: IndexUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexUsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOmit !== undefined) {
            queryParameters['page[omit]'] = requestParameters.pageOmit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexUsersResponseFromJSON(jsonValue));
    }

    /**
     * Index users.
     */
    async indexUsers(requestParameters: IndexUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexUsersResponse> {
        const response = await this.indexUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show user by id.
     */
    async showUserRaw(requestParameters: ShowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowUserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes !== undefined) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowUserResponseFromJSON(jsonValue));
    }

    /**
     * Show user by id.
     */
    async showUser(requestParameters: ShowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowUserResponse> {
        const response = await this.showUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store multiple users.
     */
    async storeMultipleUsersRaw(requestParameters: StoreMultipleUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreMultipleUsers200Response>> {
        if (requestParameters.storeMultipleUsersRequest === null || requestParameters.storeMultipleUsersRequest === undefined) {
            throw new runtime.RequiredError('storeMultipleUsersRequest','Required parameter requestParameters.storeMultipleUsersRequest was null or undefined when calling storeMultipleUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/multiple`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreMultipleUsersRequestToJSON(requestParameters.storeMultipleUsersRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreMultipleUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Store multiple users.
     */
    async storeMultipleUsers(requestParameters: StoreMultipleUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreMultipleUsers200Response> {
        const response = await this.storeMultipleUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store user.
     */
    async storeUserRaw(requestParameters: StoreUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreUserResponse>> {
        if (requestParameters.storeUserRequest === null || requestParameters.storeUserRequest === undefined) {
            throw new runtime.RequiredError('storeUserRequest','Required parameter requestParameters.storeUserRequest was null or undefined when calling storeUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreUserRequestToJSON(requestParameters.storeUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreUserResponseFromJSON(jsonValue));
    }

    /**
     * Store user.
     */
    async storeUser(requestParameters: StoreUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreUserResponse> {
        const response = await this.storeUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
